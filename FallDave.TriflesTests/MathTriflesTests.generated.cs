

using FallDave.Trifles;
using NUnit.Framework;
using System;
using System.Linq;
using System.Collections.Generic;
using System.Numerics;

namespace FallDave.Trifles.Tests
{
    [TestFixture()]
    public partial class MathTriflesTests
    {
		#region Test Min() and Max()

		[TestCase(((SByte)(0)), ((Byte)(0)))]
		[TestCase(((SByte)(0)), ((Byte)(1)))]
		[TestCase(((SByte)(0)), ((Byte)(100)))]
		[TestCase(((SByte)(1)), ((Byte)(0)))]
		[TestCase(((SByte)(1)), ((Byte)(1)))]
		[TestCase(((SByte)(1)), ((Byte)(100)))]
		[TestCase(((SByte)(-1)), ((Byte)(0)))]
		[TestCase(((SByte)(-1)), ((Byte)(1)))]
		[TestCase(((SByte)(-1)), ((Byte)(100)))]
		[TestCase(((SByte)(100)), ((Byte)(0)))]
		[TestCase(((SByte)(100)), ((Byte)(1)))]
		[TestCase(((SByte)(100)), ((Byte)(100)))]
		[TestCase(((SByte)(-100)), ((Byte)(0)))]
		[TestCase(((SByte)(-100)), ((Byte)(1)))]
		[TestCase(((SByte)(-100)), ((Byte)(100)))]
        public void TestMinMaxSByteByte(SByte val1, Byte val2)
        {
            BigInteger
                expectedMin = BigInteger.Min(val1, val2),
				expectedMax = BigInteger.Max(val1, val2),
                actualMin = MathTrifles.Min(val1, val2),
				actualMax = MathTrifles.Max(val1, val2);
            
            Assert.That(actualMin, Is.EqualTo(expectedMin));
			Assert.That(actualMax, Is.EqualTo(expectedMax));
        }

		[TestCase(((SByte)(0)), ((UInt16)(0)))]
		[TestCase(((SByte)(0)), ((UInt16)(1)))]
		[TestCase(((SByte)(0)), ((UInt16)(100)))]
		[TestCase(((SByte)(0)), ((UInt16)(10000)))]
		[TestCase(((SByte)(1)), ((UInt16)(0)))]
		[TestCase(((SByte)(1)), ((UInt16)(1)))]
		[TestCase(((SByte)(1)), ((UInt16)(100)))]
		[TestCase(((SByte)(1)), ((UInt16)(10000)))]
		[TestCase(((SByte)(-1)), ((UInt16)(0)))]
		[TestCase(((SByte)(-1)), ((UInt16)(1)))]
		[TestCase(((SByte)(-1)), ((UInt16)(100)))]
		[TestCase(((SByte)(-1)), ((UInt16)(10000)))]
		[TestCase(((SByte)(100)), ((UInt16)(0)))]
		[TestCase(((SByte)(100)), ((UInt16)(1)))]
		[TestCase(((SByte)(100)), ((UInt16)(100)))]
		[TestCase(((SByte)(100)), ((UInt16)(10000)))]
		[TestCase(((SByte)(-100)), ((UInt16)(0)))]
		[TestCase(((SByte)(-100)), ((UInt16)(1)))]
		[TestCase(((SByte)(-100)), ((UInt16)(100)))]
		[TestCase(((SByte)(-100)), ((UInt16)(10000)))]
        public void TestMinMaxSByteUInt16(SByte val1, UInt16 val2)
        {
            BigInteger
                expectedMin = BigInteger.Min(val1, val2),
				expectedMax = BigInteger.Max(val1, val2),
                actualMin = MathTrifles.Min(val1, val2),
				actualMax = MathTrifles.Max(val1, val2);
            
            Assert.That(actualMin, Is.EqualTo(expectedMin));
			Assert.That(actualMax, Is.EqualTo(expectedMax));
        }

		[TestCase(((SByte)(0)), 0U)]
		[TestCase(((SByte)(0)), 1U)]
		[TestCase(((SByte)(0)), 100U)]
		[TestCase(((SByte)(0)), 10000U)]
		[TestCase(((SByte)(0)), 100000000U)]
		[TestCase(((SByte)(1)), 0U)]
		[TestCase(((SByte)(1)), 1U)]
		[TestCase(((SByte)(1)), 100U)]
		[TestCase(((SByte)(1)), 10000U)]
		[TestCase(((SByte)(1)), 100000000U)]
		[TestCase(((SByte)(-1)), 0U)]
		[TestCase(((SByte)(-1)), 1U)]
		[TestCase(((SByte)(-1)), 100U)]
		[TestCase(((SByte)(-1)), 10000U)]
		[TestCase(((SByte)(-1)), 100000000U)]
		[TestCase(((SByte)(100)), 0U)]
		[TestCase(((SByte)(100)), 1U)]
		[TestCase(((SByte)(100)), 100U)]
		[TestCase(((SByte)(100)), 10000U)]
		[TestCase(((SByte)(100)), 100000000U)]
		[TestCase(((SByte)(-100)), 0U)]
		[TestCase(((SByte)(-100)), 1U)]
		[TestCase(((SByte)(-100)), 100U)]
		[TestCase(((SByte)(-100)), 10000U)]
		[TestCase(((SByte)(-100)), 100000000U)]
        public void TestMinMaxSByteUInt32(SByte val1, UInt32 val2)
        {
            BigInteger
                expectedMin = BigInteger.Min(val1, val2),
				expectedMax = BigInteger.Max(val1, val2),
                actualMin = MathTrifles.Min(val1, val2),
				actualMax = MathTrifles.Max(val1, val2);
            
            Assert.That(actualMin, Is.EqualTo(expectedMin));
			Assert.That(actualMax, Is.EqualTo(expectedMax));
        }

		[TestCase(((SByte)(0)), 0UL)]
		[TestCase(((SByte)(0)), 1UL)]
		[TestCase(((SByte)(0)), 100UL)]
		[TestCase(((SByte)(0)), 10000UL)]
		[TestCase(((SByte)(0)), 100000000UL)]
		[TestCase(((SByte)(0)), 10000000000000000UL)]
		[TestCase(((SByte)(1)), 0UL)]
		[TestCase(((SByte)(1)), 1UL)]
		[TestCase(((SByte)(1)), 100UL)]
		[TestCase(((SByte)(1)), 10000UL)]
		[TestCase(((SByte)(1)), 100000000UL)]
		[TestCase(((SByte)(1)), 10000000000000000UL)]
		[TestCase(((SByte)(-1)), 0UL)]
		[TestCase(((SByte)(-1)), 1UL)]
		[TestCase(((SByte)(-1)), 100UL)]
		[TestCase(((SByte)(-1)), 10000UL)]
		[TestCase(((SByte)(-1)), 100000000UL)]
		[TestCase(((SByte)(-1)), 10000000000000000UL)]
		[TestCase(((SByte)(100)), 0UL)]
		[TestCase(((SByte)(100)), 1UL)]
		[TestCase(((SByte)(100)), 100UL)]
		[TestCase(((SByte)(100)), 10000UL)]
		[TestCase(((SByte)(100)), 100000000UL)]
		[TestCase(((SByte)(100)), 10000000000000000UL)]
		[TestCase(((SByte)(-100)), 0UL)]
		[TestCase(((SByte)(-100)), 1UL)]
		[TestCase(((SByte)(-100)), 100UL)]
		[TestCase(((SByte)(-100)), 10000UL)]
		[TestCase(((SByte)(-100)), 100000000UL)]
		[TestCase(((SByte)(-100)), 10000000000000000UL)]
        public void TestMinMaxSByteUInt64(SByte val1, UInt64 val2)
        {
            BigInteger
                expectedMin = BigInteger.Min(val1, val2),
				expectedMax = BigInteger.Max(val1, val2),
                actualMin = MathTrifles.Min(val1, val2),
				actualMax = MathTrifles.Max(val1, val2);
            
            Assert.That(actualMin, Is.EqualTo(expectedMin));
			Assert.That(actualMax, Is.EqualTo(expectedMax));
        }

		[TestCase(((Int16)(0)), ((UInt16)(0)))]
		[TestCase(((Int16)(0)), ((UInt16)(1)))]
		[TestCase(((Int16)(0)), ((UInt16)(100)))]
		[TestCase(((Int16)(0)), ((UInt16)(10000)))]
		[TestCase(((Int16)(1)), ((UInt16)(0)))]
		[TestCase(((Int16)(1)), ((UInt16)(1)))]
		[TestCase(((Int16)(1)), ((UInt16)(100)))]
		[TestCase(((Int16)(1)), ((UInt16)(10000)))]
		[TestCase(((Int16)(-1)), ((UInt16)(0)))]
		[TestCase(((Int16)(-1)), ((UInt16)(1)))]
		[TestCase(((Int16)(-1)), ((UInt16)(100)))]
		[TestCase(((Int16)(-1)), ((UInt16)(10000)))]
		[TestCase(((Int16)(100)), ((UInt16)(0)))]
		[TestCase(((Int16)(100)), ((UInt16)(1)))]
		[TestCase(((Int16)(100)), ((UInt16)(100)))]
		[TestCase(((Int16)(100)), ((UInt16)(10000)))]
		[TestCase(((Int16)(-100)), ((UInt16)(0)))]
		[TestCase(((Int16)(-100)), ((UInt16)(1)))]
		[TestCase(((Int16)(-100)), ((UInt16)(100)))]
		[TestCase(((Int16)(-100)), ((UInt16)(10000)))]
		[TestCase(((Int16)(10000)), ((UInt16)(0)))]
		[TestCase(((Int16)(10000)), ((UInt16)(1)))]
		[TestCase(((Int16)(10000)), ((UInt16)(100)))]
		[TestCase(((Int16)(10000)), ((UInt16)(10000)))]
		[TestCase(((Int16)(-10000)), ((UInt16)(0)))]
		[TestCase(((Int16)(-10000)), ((UInt16)(1)))]
		[TestCase(((Int16)(-10000)), ((UInt16)(100)))]
		[TestCase(((Int16)(-10000)), ((UInt16)(10000)))]
        public void TestMinMaxInt16UInt16(Int16 val1, UInt16 val2)
        {
            BigInteger
                expectedMin = BigInteger.Min(val1, val2),
				expectedMax = BigInteger.Max(val1, val2),
                actualMin = MathTrifles.Min(val1, val2),
				actualMax = MathTrifles.Max(val1, val2);
            
            Assert.That(actualMin, Is.EqualTo(expectedMin));
			Assert.That(actualMax, Is.EqualTo(expectedMax));
        }

		[TestCase(((Int16)(0)), 0U)]
		[TestCase(((Int16)(0)), 1U)]
		[TestCase(((Int16)(0)), 100U)]
		[TestCase(((Int16)(0)), 10000U)]
		[TestCase(((Int16)(0)), 100000000U)]
		[TestCase(((Int16)(1)), 0U)]
		[TestCase(((Int16)(1)), 1U)]
		[TestCase(((Int16)(1)), 100U)]
		[TestCase(((Int16)(1)), 10000U)]
		[TestCase(((Int16)(1)), 100000000U)]
		[TestCase(((Int16)(-1)), 0U)]
		[TestCase(((Int16)(-1)), 1U)]
		[TestCase(((Int16)(-1)), 100U)]
		[TestCase(((Int16)(-1)), 10000U)]
		[TestCase(((Int16)(-1)), 100000000U)]
		[TestCase(((Int16)(100)), 0U)]
		[TestCase(((Int16)(100)), 1U)]
		[TestCase(((Int16)(100)), 100U)]
		[TestCase(((Int16)(100)), 10000U)]
		[TestCase(((Int16)(100)), 100000000U)]
		[TestCase(((Int16)(-100)), 0U)]
		[TestCase(((Int16)(-100)), 1U)]
		[TestCase(((Int16)(-100)), 100U)]
		[TestCase(((Int16)(-100)), 10000U)]
		[TestCase(((Int16)(-100)), 100000000U)]
		[TestCase(((Int16)(10000)), 0U)]
		[TestCase(((Int16)(10000)), 1U)]
		[TestCase(((Int16)(10000)), 100U)]
		[TestCase(((Int16)(10000)), 10000U)]
		[TestCase(((Int16)(10000)), 100000000U)]
		[TestCase(((Int16)(-10000)), 0U)]
		[TestCase(((Int16)(-10000)), 1U)]
		[TestCase(((Int16)(-10000)), 100U)]
		[TestCase(((Int16)(-10000)), 10000U)]
		[TestCase(((Int16)(-10000)), 100000000U)]
        public void TestMinMaxInt16UInt32(Int16 val1, UInt32 val2)
        {
            BigInteger
                expectedMin = BigInteger.Min(val1, val2),
				expectedMax = BigInteger.Max(val1, val2),
                actualMin = MathTrifles.Min(val1, val2),
				actualMax = MathTrifles.Max(val1, val2);
            
            Assert.That(actualMin, Is.EqualTo(expectedMin));
			Assert.That(actualMax, Is.EqualTo(expectedMax));
        }

		[TestCase(((Int16)(0)), 0UL)]
		[TestCase(((Int16)(0)), 1UL)]
		[TestCase(((Int16)(0)), 100UL)]
		[TestCase(((Int16)(0)), 10000UL)]
		[TestCase(((Int16)(0)), 100000000UL)]
		[TestCase(((Int16)(0)), 10000000000000000UL)]
		[TestCase(((Int16)(1)), 0UL)]
		[TestCase(((Int16)(1)), 1UL)]
		[TestCase(((Int16)(1)), 100UL)]
		[TestCase(((Int16)(1)), 10000UL)]
		[TestCase(((Int16)(1)), 100000000UL)]
		[TestCase(((Int16)(1)), 10000000000000000UL)]
		[TestCase(((Int16)(-1)), 0UL)]
		[TestCase(((Int16)(-1)), 1UL)]
		[TestCase(((Int16)(-1)), 100UL)]
		[TestCase(((Int16)(-1)), 10000UL)]
		[TestCase(((Int16)(-1)), 100000000UL)]
		[TestCase(((Int16)(-1)), 10000000000000000UL)]
		[TestCase(((Int16)(100)), 0UL)]
		[TestCase(((Int16)(100)), 1UL)]
		[TestCase(((Int16)(100)), 100UL)]
		[TestCase(((Int16)(100)), 10000UL)]
		[TestCase(((Int16)(100)), 100000000UL)]
		[TestCase(((Int16)(100)), 10000000000000000UL)]
		[TestCase(((Int16)(-100)), 0UL)]
		[TestCase(((Int16)(-100)), 1UL)]
		[TestCase(((Int16)(-100)), 100UL)]
		[TestCase(((Int16)(-100)), 10000UL)]
		[TestCase(((Int16)(-100)), 100000000UL)]
		[TestCase(((Int16)(-100)), 10000000000000000UL)]
		[TestCase(((Int16)(10000)), 0UL)]
		[TestCase(((Int16)(10000)), 1UL)]
		[TestCase(((Int16)(10000)), 100UL)]
		[TestCase(((Int16)(10000)), 10000UL)]
		[TestCase(((Int16)(10000)), 100000000UL)]
		[TestCase(((Int16)(10000)), 10000000000000000UL)]
		[TestCase(((Int16)(-10000)), 0UL)]
		[TestCase(((Int16)(-10000)), 1UL)]
		[TestCase(((Int16)(-10000)), 100UL)]
		[TestCase(((Int16)(-10000)), 10000UL)]
		[TestCase(((Int16)(-10000)), 100000000UL)]
		[TestCase(((Int16)(-10000)), 10000000000000000UL)]
        public void TestMinMaxInt16UInt64(Int16 val1, UInt64 val2)
        {
            BigInteger
                expectedMin = BigInteger.Min(val1, val2),
				expectedMax = BigInteger.Max(val1, val2),
                actualMin = MathTrifles.Min(val1, val2),
				actualMax = MathTrifles.Max(val1, val2);
            
            Assert.That(actualMin, Is.EqualTo(expectedMin));
			Assert.That(actualMax, Is.EqualTo(expectedMax));
        }

		[TestCase(0, 0U)]
		[TestCase(0, 1U)]
		[TestCase(0, 100U)]
		[TestCase(0, 10000U)]
		[TestCase(0, 100000000U)]
		[TestCase(1, 0U)]
		[TestCase(1, 1U)]
		[TestCase(1, 100U)]
		[TestCase(1, 10000U)]
		[TestCase(1, 100000000U)]
		[TestCase(-1, 0U)]
		[TestCase(-1, 1U)]
		[TestCase(-1, 100U)]
		[TestCase(-1, 10000U)]
		[TestCase(-1, 100000000U)]
		[TestCase(100, 0U)]
		[TestCase(100, 1U)]
		[TestCase(100, 100U)]
		[TestCase(100, 10000U)]
		[TestCase(100, 100000000U)]
		[TestCase(-100, 0U)]
		[TestCase(-100, 1U)]
		[TestCase(-100, 100U)]
		[TestCase(-100, 10000U)]
		[TestCase(-100, 100000000U)]
		[TestCase(10000, 0U)]
		[TestCase(10000, 1U)]
		[TestCase(10000, 100U)]
		[TestCase(10000, 10000U)]
		[TestCase(10000, 100000000U)]
		[TestCase(-10000, 0U)]
		[TestCase(-10000, 1U)]
		[TestCase(-10000, 100U)]
		[TestCase(-10000, 10000U)]
		[TestCase(-10000, 100000000U)]
		[TestCase(100000000, 0U)]
		[TestCase(100000000, 1U)]
		[TestCase(100000000, 100U)]
		[TestCase(100000000, 10000U)]
		[TestCase(100000000, 100000000U)]
		[TestCase(-100000000, 0U)]
		[TestCase(-100000000, 1U)]
		[TestCase(-100000000, 100U)]
		[TestCase(-100000000, 10000U)]
		[TestCase(-100000000, 100000000U)]
        public void TestMinMaxInt32UInt32(Int32 val1, UInt32 val2)
        {
            BigInteger
                expectedMin = BigInteger.Min(val1, val2),
				expectedMax = BigInteger.Max(val1, val2),
                actualMin = MathTrifles.Min(val1, val2),
				actualMax = MathTrifles.Max(val1, val2);
            
            Assert.That(actualMin, Is.EqualTo(expectedMin));
			Assert.That(actualMax, Is.EqualTo(expectedMax));
        }

		[TestCase(0, 0UL)]
		[TestCase(0, 1UL)]
		[TestCase(0, 100UL)]
		[TestCase(0, 10000UL)]
		[TestCase(0, 100000000UL)]
		[TestCase(0, 10000000000000000UL)]
		[TestCase(1, 0UL)]
		[TestCase(1, 1UL)]
		[TestCase(1, 100UL)]
		[TestCase(1, 10000UL)]
		[TestCase(1, 100000000UL)]
		[TestCase(1, 10000000000000000UL)]
		[TestCase(-1, 0UL)]
		[TestCase(-1, 1UL)]
		[TestCase(-1, 100UL)]
		[TestCase(-1, 10000UL)]
		[TestCase(-1, 100000000UL)]
		[TestCase(-1, 10000000000000000UL)]
		[TestCase(100, 0UL)]
		[TestCase(100, 1UL)]
		[TestCase(100, 100UL)]
		[TestCase(100, 10000UL)]
		[TestCase(100, 100000000UL)]
		[TestCase(100, 10000000000000000UL)]
		[TestCase(-100, 0UL)]
		[TestCase(-100, 1UL)]
		[TestCase(-100, 100UL)]
		[TestCase(-100, 10000UL)]
		[TestCase(-100, 100000000UL)]
		[TestCase(-100, 10000000000000000UL)]
		[TestCase(10000, 0UL)]
		[TestCase(10000, 1UL)]
		[TestCase(10000, 100UL)]
		[TestCase(10000, 10000UL)]
		[TestCase(10000, 100000000UL)]
		[TestCase(10000, 10000000000000000UL)]
		[TestCase(-10000, 0UL)]
		[TestCase(-10000, 1UL)]
		[TestCase(-10000, 100UL)]
		[TestCase(-10000, 10000UL)]
		[TestCase(-10000, 100000000UL)]
		[TestCase(-10000, 10000000000000000UL)]
		[TestCase(100000000, 0UL)]
		[TestCase(100000000, 1UL)]
		[TestCase(100000000, 100UL)]
		[TestCase(100000000, 10000UL)]
		[TestCase(100000000, 100000000UL)]
		[TestCase(100000000, 10000000000000000UL)]
		[TestCase(-100000000, 0UL)]
		[TestCase(-100000000, 1UL)]
		[TestCase(-100000000, 100UL)]
		[TestCase(-100000000, 10000UL)]
		[TestCase(-100000000, 100000000UL)]
		[TestCase(-100000000, 10000000000000000UL)]
        public void TestMinMaxInt32UInt64(Int32 val1, UInt64 val2)
        {
            BigInteger
                expectedMin = BigInteger.Min(val1, val2),
				expectedMax = BigInteger.Max(val1, val2),
                actualMin = MathTrifles.Min(val1, val2),
				actualMax = MathTrifles.Max(val1, val2);
            
            Assert.That(actualMin, Is.EqualTo(expectedMin));
			Assert.That(actualMax, Is.EqualTo(expectedMax));
        }

		[TestCase(0L, 0UL)]
		[TestCase(0L, 1UL)]
		[TestCase(0L, 100UL)]
		[TestCase(0L, 10000UL)]
		[TestCase(0L, 100000000UL)]
		[TestCase(0L, 10000000000000000UL)]
		[TestCase(1L, 0UL)]
		[TestCase(1L, 1UL)]
		[TestCase(1L, 100UL)]
		[TestCase(1L, 10000UL)]
		[TestCase(1L, 100000000UL)]
		[TestCase(1L, 10000000000000000UL)]
		[TestCase(-1L, 0UL)]
		[TestCase(-1L, 1UL)]
		[TestCase(-1L, 100UL)]
		[TestCase(-1L, 10000UL)]
		[TestCase(-1L, 100000000UL)]
		[TestCase(-1L, 10000000000000000UL)]
		[TestCase(100L, 0UL)]
		[TestCase(100L, 1UL)]
		[TestCase(100L, 100UL)]
		[TestCase(100L, 10000UL)]
		[TestCase(100L, 100000000UL)]
		[TestCase(100L, 10000000000000000UL)]
		[TestCase(-100L, 0UL)]
		[TestCase(-100L, 1UL)]
		[TestCase(-100L, 100UL)]
		[TestCase(-100L, 10000UL)]
		[TestCase(-100L, 100000000UL)]
		[TestCase(-100L, 10000000000000000UL)]
		[TestCase(10000L, 0UL)]
		[TestCase(10000L, 1UL)]
		[TestCase(10000L, 100UL)]
		[TestCase(10000L, 10000UL)]
		[TestCase(10000L, 100000000UL)]
		[TestCase(10000L, 10000000000000000UL)]
		[TestCase(-10000L, 0UL)]
		[TestCase(-10000L, 1UL)]
		[TestCase(-10000L, 100UL)]
		[TestCase(-10000L, 10000UL)]
		[TestCase(-10000L, 100000000UL)]
		[TestCase(-10000L, 10000000000000000UL)]
		[TestCase(100000000L, 0UL)]
		[TestCase(100000000L, 1UL)]
		[TestCase(100000000L, 100UL)]
		[TestCase(100000000L, 10000UL)]
		[TestCase(100000000L, 100000000UL)]
		[TestCase(100000000L, 10000000000000000UL)]
		[TestCase(-100000000L, 0UL)]
		[TestCase(-100000000L, 1UL)]
		[TestCase(-100000000L, 100UL)]
		[TestCase(-100000000L, 10000UL)]
		[TestCase(-100000000L, 100000000UL)]
		[TestCase(-100000000L, 10000000000000000UL)]
		[TestCase(10000000000000000L, 0UL)]
		[TestCase(10000000000000000L, 1UL)]
		[TestCase(10000000000000000L, 100UL)]
		[TestCase(10000000000000000L, 10000UL)]
		[TestCase(10000000000000000L, 100000000UL)]
		[TestCase(10000000000000000L, 10000000000000000UL)]
		[TestCase(-10000000000000000L, 0UL)]
		[TestCase(-10000000000000000L, 1UL)]
		[TestCase(-10000000000000000L, 100UL)]
		[TestCase(-10000000000000000L, 10000UL)]
		[TestCase(-10000000000000000L, 100000000UL)]
		[TestCase(-10000000000000000L, 10000000000000000UL)]
        public void TestMinMaxInt64UInt64(Int64 val1, UInt64 val2)
        {
            BigInteger
                expectedMin = BigInteger.Min(val1, val2),
				expectedMax = BigInteger.Max(val1, val2),
                actualMin = MathTrifles.Min(val1, val2),
				actualMax = MathTrifles.Max(val1, val2);
            
            Assert.That(actualMin, Is.EqualTo(expectedMin));
			Assert.That(actualMax, Is.EqualTo(expectedMax));
        }

		#endregion

	    #region Test ClampTo*()

		[TestCase(0)]
		[TestCase(1)]
		[TestCase(-1)]
		[TestCase(100)]
		[TestCase(-100)]
		[TestCase(10000)]
		[TestCase(-10000)]
		[TestCase(100000000)]
		[TestCase(-100000000)]
        public void TestClampInt32ToSByte(Int32 value)
        {
            BigInteger
                expected = Clamp(value, SByte.MinValue, SByte.MaxValue),
                actual = MathTrifles.ClampToSByte(value);
            
            Assert.That(actual, Is.EqualTo(expected));
        }

		[TestCase(0)]
		[TestCase(1)]
		[TestCase(-1)]
		[TestCase(100)]
		[TestCase(-100)]
		[TestCase(10000)]
		[TestCase(-10000)]
		[TestCase(100000000)]
		[TestCase(-100000000)]
        public void TestClampInt32ToByte(Int32 value)
        {
            BigInteger
                expected = Clamp(value, Byte.MinValue, Byte.MaxValue),
                actual = MathTrifles.ClampToByte(value);
            
            Assert.That(actual, Is.EqualTo(expected));
        }

		[TestCase(0)]
		[TestCase(1)]
		[TestCase(-1)]
		[TestCase(100)]
		[TestCase(-100)]
		[TestCase(10000)]
		[TestCase(-10000)]
		[TestCase(100000000)]
		[TestCase(-100000000)]
        public void TestClampInt32ToInt16(Int32 value)
        {
            BigInteger
                expected = Clamp(value, Int16.MinValue, Int16.MaxValue),
                actual = MathTrifles.ClampToInt16(value);
            
            Assert.That(actual, Is.EqualTo(expected));
        }

		[TestCase(0)]
		[TestCase(1)]
		[TestCase(-1)]
		[TestCase(100)]
		[TestCase(-100)]
		[TestCase(10000)]
		[TestCase(-10000)]
		[TestCase(100000000)]
		[TestCase(-100000000)]
        public void TestClampInt32ToUInt16(Int32 value)
        {
            BigInteger
                expected = Clamp(value, UInt16.MinValue, UInt16.MaxValue),
                actual = MathTrifles.ClampToUInt16(value);
            
            Assert.That(actual, Is.EqualTo(expected));
        }

		[TestCase(0L)]
		[TestCase(1L)]
		[TestCase(-1L)]
		[TestCase(100L)]
		[TestCase(-100L)]
		[TestCase(10000L)]
		[TestCase(-10000L)]
		[TestCase(100000000L)]
		[TestCase(-100000000L)]
		[TestCase(10000000000000000L)]
		[TestCase(-10000000000000000L)]
        public void TestClampInt64ToSByte(Int64 value)
        {
            BigInteger
                expected = Clamp(value, SByte.MinValue, SByte.MaxValue),
                actual = MathTrifles.ClampToSByte(value);
            
            Assert.That(actual, Is.EqualTo(expected));
        }

		[TestCase(0L)]
		[TestCase(1L)]
		[TestCase(-1L)]
		[TestCase(100L)]
		[TestCase(-100L)]
		[TestCase(10000L)]
		[TestCase(-10000L)]
		[TestCase(100000000L)]
		[TestCase(-100000000L)]
		[TestCase(10000000000000000L)]
		[TestCase(-10000000000000000L)]
        public void TestClampInt64ToByte(Int64 value)
        {
            BigInteger
                expected = Clamp(value, Byte.MinValue, Byte.MaxValue),
                actual = MathTrifles.ClampToByte(value);
            
            Assert.That(actual, Is.EqualTo(expected));
        }

		[TestCase(0L)]
		[TestCase(1L)]
		[TestCase(-1L)]
		[TestCase(100L)]
		[TestCase(-100L)]
		[TestCase(10000L)]
		[TestCase(-10000L)]
		[TestCase(100000000L)]
		[TestCase(-100000000L)]
		[TestCase(10000000000000000L)]
		[TestCase(-10000000000000000L)]
        public void TestClampInt64ToInt16(Int64 value)
        {
            BigInteger
                expected = Clamp(value, Int16.MinValue, Int16.MaxValue),
                actual = MathTrifles.ClampToInt16(value);
            
            Assert.That(actual, Is.EqualTo(expected));
        }

		[TestCase(0L)]
		[TestCase(1L)]
		[TestCase(-1L)]
		[TestCase(100L)]
		[TestCase(-100L)]
		[TestCase(10000L)]
		[TestCase(-10000L)]
		[TestCase(100000000L)]
		[TestCase(-100000000L)]
		[TestCase(10000000000000000L)]
		[TestCase(-10000000000000000L)]
        public void TestClampInt64ToUInt16(Int64 value)
        {
            BigInteger
                expected = Clamp(value, UInt16.MinValue, UInt16.MaxValue),
                actual = MathTrifles.ClampToUInt16(value);
            
            Assert.That(actual, Is.EqualTo(expected));
        }

		[TestCase(0L)]
		[TestCase(1L)]
		[TestCase(-1L)]
		[TestCase(100L)]
		[TestCase(-100L)]
		[TestCase(10000L)]
		[TestCase(-10000L)]
		[TestCase(100000000L)]
		[TestCase(-100000000L)]
		[TestCase(10000000000000000L)]
		[TestCase(-10000000000000000L)]
        public void TestClampInt64ToInt32(Int64 value)
        {
            BigInteger
                expected = Clamp(value, Int32.MinValue, Int32.MaxValue),
                actual = MathTrifles.ClampToInt32(value);
            
            Assert.That(actual, Is.EqualTo(expected));
        }

		[TestCase(0L)]
		[TestCase(1L)]
		[TestCase(-1L)]
		[TestCase(100L)]
		[TestCase(-100L)]
		[TestCase(10000L)]
		[TestCase(-10000L)]
		[TestCase(100000000L)]
		[TestCase(-100000000L)]
		[TestCase(10000000000000000L)]
		[TestCase(-10000000000000000L)]
        public void TestClampInt64ToUInt32(Int64 value)
        {
            BigInteger
                expected = Clamp(value, UInt32.MinValue, UInt32.MaxValue),
                actual = MathTrifles.ClampToUInt32(value);
            
            Assert.That(actual, Is.EqualTo(expected));
        }

		[TestCase(0UL)]
		[TestCase(1UL)]
		[TestCase(100UL)]
		[TestCase(10000UL)]
		[TestCase(100000000UL)]
		[TestCase(10000000000000000UL)]
        public void TestClampUInt64ToByte(UInt64 value)
        {
            BigInteger
                expected = Clamp(value, Byte.MinValue, Byte.MaxValue),
                actual = MathTrifles.ClampToByte(value);
            
            Assert.That(actual, Is.EqualTo(expected));
        }

		[TestCase(0UL)]
		[TestCase(1UL)]
		[TestCase(100UL)]
		[TestCase(10000UL)]
		[TestCase(100000000UL)]
		[TestCase(10000000000000000UL)]
        public void TestClampUInt64ToUInt16(UInt64 value)
        {
            BigInteger
                expected = Clamp(value, UInt16.MinValue, UInt16.MaxValue),
                actual = MathTrifles.ClampToUInt16(value);
            
            Assert.That(actual, Is.EqualTo(expected));
        }

		[TestCase(0UL)]
		[TestCase(1UL)]
		[TestCase(100UL)]
		[TestCase(10000UL)]
		[TestCase(100000000UL)]
		[TestCase(10000000000000000UL)]
        public void TestClampUInt64ToUInt32(UInt64 value)
        {
            BigInteger
                expected = Clamp(value, UInt32.MinValue, UInt32.MaxValue),
                actual = MathTrifles.ClampToUInt32(value);
            
            Assert.That(actual, Is.EqualTo(expected));
        }

		#endregion

	    #region Test Clamp*()

		[TestCase(0, ((SByte)(0)), ((SByte)(0)))]
		[TestCase(0, ((SByte)(0)), ((SByte)(1)))]
		[TestCase(0, ((SByte)(0)), ((SByte)(-1)))]
		[TestCase(0, ((SByte)(0)), ((SByte)(100)))]
		[TestCase(0, ((SByte)(0)), ((SByte)(-100)))]
		[TestCase(0, ((SByte)(1)), ((SByte)(0)))]
		[TestCase(0, ((SByte)(1)), ((SByte)(1)))]
		[TestCase(0, ((SByte)(1)), ((SByte)(-1)))]
		[TestCase(0, ((SByte)(1)), ((SByte)(100)))]
		[TestCase(0, ((SByte)(1)), ((SByte)(-100)))]
		[TestCase(0, ((SByte)(-1)), ((SByte)(0)))]
		[TestCase(0, ((SByte)(-1)), ((SByte)(1)))]
		[TestCase(0, ((SByte)(-1)), ((SByte)(-1)))]
		[TestCase(0, ((SByte)(-1)), ((SByte)(100)))]
		[TestCase(0, ((SByte)(-1)), ((SByte)(-100)))]
		[TestCase(0, ((SByte)(100)), ((SByte)(0)))]
		[TestCase(0, ((SByte)(100)), ((SByte)(1)))]
		[TestCase(0, ((SByte)(100)), ((SByte)(-1)))]
		[TestCase(0, ((SByte)(100)), ((SByte)(100)))]
		[TestCase(0, ((SByte)(100)), ((SByte)(-100)))]
		[TestCase(0, ((SByte)(-100)), ((SByte)(0)))]
		[TestCase(0, ((SByte)(-100)), ((SByte)(1)))]
		[TestCase(0, ((SByte)(-100)), ((SByte)(-1)))]
		[TestCase(0, ((SByte)(-100)), ((SByte)(100)))]
		[TestCase(0, ((SByte)(-100)), ((SByte)(-100)))]
		[TestCase(1, ((SByte)(0)), ((SByte)(0)))]
		[TestCase(1, ((SByte)(0)), ((SByte)(1)))]
		[TestCase(1, ((SByte)(0)), ((SByte)(-1)))]
		[TestCase(1, ((SByte)(0)), ((SByte)(100)))]
		[TestCase(1, ((SByte)(0)), ((SByte)(-100)))]
		[TestCase(1, ((SByte)(1)), ((SByte)(0)))]
		[TestCase(1, ((SByte)(1)), ((SByte)(1)))]
		[TestCase(1, ((SByte)(1)), ((SByte)(-1)))]
		[TestCase(1, ((SByte)(1)), ((SByte)(100)))]
		[TestCase(1, ((SByte)(1)), ((SByte)(-100)))]
		[TestCase(1, ((SByte)(-1)), ((SByte)(0)))]
		[TestCase(1, ((SByte)(-1)), ((SByte)(1)))]
		[TestCase(1, ((SByte)(-1)), ((SByte)(-1)))]
		[TestCase(1, ((SByte)(-1)), ((SByte)(100)))]
		[TestCase(1, ((SByte)(-1)), ((SByte)(-100)))]
		[TestCase(1, ((SByte)(100)), ((SByte)(0)))]
		[TestCase(1, ((SByte)(100)), ((SByte)(1)))]
		[TestCase(1, ((SByte)(100)), ((SByte)(-1)))]
		[TestCase(1, ((SByte)(100)), ((SByte)(100)))]
		[TestCase(1, ((SByte)(100)), ((SByte)(-100)))]
		[TestCase(1, ((SByte)(-100)), ((SByte)(0)))]
		[TestCase(1, ((SByte)(-100)), ((SByte)(1)))]
		[TestCase(1, ((SByte)(-100)), ((SByte)(-1)))]
		[TestCase(1, ((SByte)(-100)), ((SByte)(100)))]
		[TestCase(1, ((SByte)(-100)), ((SByte)(-100)))]
		[TestCase(-1, ((SByte)(0)), ((SByte)(0)))]
		[TestCase(-1, ((SByte)(0)), ((SByte)(1)))]
		[TestCase(-1, ((SByte)(0)), ((SByte)(-1)))]
		[TestCase(-1, ((SByte)(0)), ((SByte)(100)))]
		[TestCase(-1, ((SByte)(0)), ((SByte)(-100)))]
		[TestCase(-1, ((SByte)(1)), ((SByte)(0)))]
		[TestCase(-1, ((SByte)(1)), ((SByte)(1)))]
		[TestCase(-1, ((SByte)(1)), ((SByte)(-1)))]
		[TestCase(-1, ((SByte)(1)), ((SByte)(100)))]
		[TestCase(-1, ((SByte)(1)), ((SByte)(-100)))]
		[TestCase(-1, ((SByte)(-1)), ((SByte)(0)))]
		[TestCase(-1, ((SByte)(-1)), ((SByte)(1)))]
		[TestCase(-1, ((SByte)(-1)), ((SByte)(-1)))]
		[TestCase(-1, ((SByte)(-1)), ((SByte)(100)))]
		[TestCase(-1, ((SByte)(-1)), ((SByte)(-100)))]
		[TestCase(-1, ((SByte)(100)), ((SByte)(0)))]
		[TestCase(-1, ((SByte)(100)), ((SByte)(1)))]
		[TestCase(-1, ((SByte)(100)), ((SByte)(-1)))]
		[TestCase(-1, ((SByte)(100)), ((SByte)(100)))]
		[TestCase(-1, ((SByte)(100)), ((SByte)(-100)))]
		[TestCase(-1, ((SByte)(-100)), ((SByte)(0)))]
		[TestCase(-1, ((SByte)(-100)), ((SByte)(1)))]
		[TestCase(-1, ((SByte)(-100)), ((SByte)(-1)))]
		[TestCase(-1, ((SByte)(-100)), ((SByte)(100)))]
		[TestCase(-1, ((SByte)(-100)), ((SByte)(-100)))]
		[TestCase(100, ((SByte)(0)), ((SByte)(0)))]
		[TestCase(100, ((SByte)(0)), ((SByte)(1)))]
		[TestCase(100, ((SByte)(0)), ((SByte)(-1)))]
		[TestCase(100, ((SByte)(0)), ((SByte)(100)))]
		[TestCase(100, ((SByte)(0)), ((SByte)(-100)))]
		[TestCase(100, ((SByte)(1)), ((SByte)(0)))]
		[TestCase(100, ((SByte)(1)), ((SByte)(1)))]
		[TestCase(100, ((SByte)(1)), ((SByte)(-1)))]
		[TestCase(100, ((SByte)(1)), ((SByte)(100)))]
		[TestCase(100, ((SByte)(1)), ((SByte)(-100)))]
		[TestCase(100, ((SByte)(-1)), ((SByte)(0)))]
		[TestCase(100, ((SByte)(-1)), ((SByte)(1)))]
		[TestCase(100, ((SByte)(-1)), ((SByte)(-1)))]
		[TestCase(100, ((SByte)(-1)), ((SByte)(100)))]
		[TestCase(100, ((SByte)(-1)), ((SByte)(-100)))]
		[TestCase(100, ((SByte)(100)), ((SByte)(0)))]
		[TestCase(100, ((SByte)(100)), ((SByte)(1)))]
		[TestCase(100, ((SByte)(100)), ((SByte)(-1)))]
		[TestCase(100, ((SByte)(100)), ((SByte)(100)))]
		[TestCase(100, ((SByte)(100)), ((SByte)(-100)))]
		[TestCase(100, ((SByte)(-100)), ((SByte)(0)))]
		[TestCase(100, ((SByte)(-100)), ((SByte)(1)))]
		[TestCase(100, ((SByte)(-100)), ((SByte)(-1)))]
		[TestCase(100, ((SByte)(-100)), ((SByte)(100)))]
		[TestCase(100, ((SByte)(-100)), ((SByte)(-100)))]
		[TestCase(-100, ((SByte)(0)), ((SByte)(0)))]
		[TestCase(-100, ((SByte)(0)), ((SByte)(1)))]
		[TestCase(-100, ((SByte)(0)), ((SByte)(-1)))]
		[TestCase(-100, ((SByte)(0)), ((SByte)(100)))]
		[TestCase(-100, ((SByte)(0)), ((SByte)(-100)))]
		[TestCase(-100, ((SByte)(1)), ((SByte)(0)))]
		[TestCase(-100, ((SByte)(1)), ((SByte)(1)))]
		[TestCase(-100, ((SByte)(1)), ((SByte)(-1)))]
		[TestCase(-100, ((SByte)(1)), ((SByte)(100)))]
		[TestCase(-100, ((SByte)(1)), ((SByte)(-100)))]
		[TestCase(-100, ((SByte)(-1)), ((SByte)(0)))]
		[TestCase(-100, ((SByte)(-1)), ((SByte)(1)))]
		[TestCase(-100, ((SByte)(-1)), ((SByte)(-1)))]
		[TestCase(-100, ((SByte)(-1)), ((SByte)(100)))]
		[TestCase(-100, ((SByte)(-1)), ((SByte)(-100)))]
		[TestCase(-100, ((SByte)(100)), ((SByte)(0)))]
		[TestCase(-100, ((SByte)(100)), ((SByte)(1)))]
		[TestCase(-100, ((SByte)(100)), ((SByte)(-1)))]
		[TestCase(-100, ((SByte)(100)), ((SByte)(100)))]
		[TestCase(-100, ((SByte)(100)), ((SByte)(-100)))]
		[TestCase(-100, ((SByte)(-100)), ((SByte)(0)))]
		[TestCase(-100, ((SByte)(-100)), ((SByte)(1)))]
		[TestCase(-100, ((SByte)(-100)), ((SByte)(-1)))]
		[TestCase(-100, ((SByte)(-100)), ((SByte)(100)))]
		[TestCase(-100, ((SByte)(-100)), ((SByte)(-100)))]
		[TestCase(10000, ((SByte)(0)), ((SByte)(0)))]
		[TestCase(10000, ((SByte)(0)), ((SByte)(1)))]
		[TestCase(10000, ((SByte)(0)), ((SByte)(-1)))]
		[TestCase(10000, ((SByte)(0)), ((SByte)(100)))]
		[TestCase(10000, ((SByte)(0)), ((SByte)(-100)))]
		[TestCase(10000, ((SByte)(1)), ((SByte)(0)))]
		[TestCase(10000, ((SByte)(1)), ((SByte)(1)))]
		[TestCase(10000, ((SByte)(1)), ((SByte)(-1)))]
		[TestCase(10000, ((SByte)(1)), ((SByte)(100)))]
		[TestCase(10000, ((SByte)(1)), ((SByte)(-100)))]
		[TestCase(10000, ((SByte)(-1)), ((SByte)(0)))]
		[TestCase(10000, ((SByte)(-1)), ((SByte)(1)))]
		[TestCase(10000, ((SByte)(-1)), ((SByte)(-1)))]
		[TestCase(10000, ((SByte)(-1)), ((SByte)(100)))]
		[TestCase(10000, ((SByte)(-1)), ((SByte)(-100)))]
		[TestCase(10000, ((SByte)(100)), ((SByte)(0)))]
		[TestCase(10000, ((SByte)(100)), ((SByte)(1)))]
		[TestCase(10000, ((SByte)(100)), ((SByte)(-1)))]
		[TestCase(10000, ((SByte)(100)), ((SByte)(100)))]
		[TestCase(10000, ((SByte)(100)), ((SByte)(-100)))]
		[TestCase(10000, ((SByte)(-100)), ((SByte)(0)))]
		[TestCase(10000, ((SByte)(-100)), ((SByte)(1)))]
		[TestCase(10000, ((SByte)(-100)), ((SByte)(-1)))]
		[TestCase(10000, ((SByte)(-100)), ((SByte)(100)))]
		[TestCase(10000, ((SByte)(-100)), ((SByte)(-100)))]
		[TestCase(-10000, ((SByte)(0)), ((SByte)(0)))]
		[TestCase(-10000, ((SByte)(0)), ((SByte)(1)))]
		[TestCase(-10000, ((SByte)(0)), ((SByte)(-1)))]
		[TestCase(-10000, ((SByte)(0)), ((SByte)(100)))]
		[TestCase(-10000, ((SByte)(0)), ((SByte)(-100)))]
		[TestCase(-10000, ((SByte)(1)), ((SByte)(0)))]
		[TestCase(-10000, ((SByte)(1)), ((SByte)(1)))]
		[TestCase(-10000, ((SByte)(1)), ((SByte)(-1)))]
		[TestCase(-10000, ((SByte)(1)), ((SByte)(100)))]
		[TestCase(-10000, ((SByte)(1)), ((SByte)(-100)))]
		[TestCase(-10000, ((SByte)(-1)), ((SByte)(0)))]
		[TestCase(-10000, ((SByte)(-1)), ((SByte)(1)))]
		[TestCase(-10000, ((SByte)(-1)), ((SByte)(-1)))]
		[TestCase(-10000, ((SByte)(-1)), ((SByte)(100)))]
		[TestCase(-10000, ((SByte)(-1)), ((SByte)(-100)))]
		[TestCase(-10000, ((SByte)(100)), ((SByte)(0)))]
		[TestCase(-10000, ((SByte)(100)), ((SByte)(1)))]
		[TestCase(-10000, ((SByte)(100)), ((SByte)(-1)))]
		[TestCase(-10000, ((SByte)(100)), ((SByte)(100)))]
		[TestCase(-10000, ((SByte)(100)), ((SByte)(-100)))]
		[TestCase(-10000, ((SByte)(-100)), ((SByte)(0)))]
		[TestCase(-10000, ((SByte)(-100)), ((SByte)(1)))]
		[TestCase(-10000, ((SByte)(-100)), ((SByte)(-1)))]
		[TestCase(-10000, ((SByte)(-100)), ((SByte)(100)))]
		[TestCase(-10000, ((SByte)(-100)), ((SByte)(-100)))]
		[TestCase(100000000, ((SByte)(0)), ((SByte)(0)))]
		[TestCase(100000000, ((SByte)(0)), ((SByte)(1)))]
		[TestCase(100000000, ((SByte)(0)), ((SByte)(-1)))]
		[TestCase(100000000, ((SByte)(0)), ((SByte)(100)))]
		[TestCase(100000000, ((SByte)(0)), ((SByte)(-100)))]
		[TestCase(100000000, ((SByte)(1)), ((SByte)(0)))]
		[TestCase(100000000, ((SByte)(1)), ((SByte)(1)))]
		[TestCase(100000000, ((SByte)(1)), ((SByte)(-1)))]
		[TestCase(100000000, ((SByte)(1)), ((SByte)(100)))]
		[TestCase(100000000, ((SByte)(1)), ((SByte)(-100)))]
		[TestCase(100000000, ((SByte)(-1)), ((SByte)(0)))]
		[TestCase(100000000, ((SByte)(-1)), ((SByte)(1)))]
		[TestCase(100000000, ((SByte)(-1)), ((SByte)(-1)))]
		[TestCase(100000000, ((SByte)(-1)), ((SByte)(100)))]
		[TestCase(100000000, ((SByte)(-1)), ((SByte)(-100)))]
		[TestCase(100000000, ((SByte)(100)), ((SByte)(0)))]
		[TestCase(100000000, ((SByte)(100)), ((SByte)(1)))]
		[TestCase(100000000, ((SByte)(100)), ((SByte)(-1)))]
		[TestCase(100000000, ((SByte)(100)), ((SByte)(100)))]
		[TestCase(100000000, ((SByte)(100)), ((SByte)(-100)))]
		[TestCase(100000000, ((SByte)(-100)), ((SByte)(0)))]
		[TestCase(100000000, ((SByte)(-100)), ((SByte)(1)))]
		[TestCase(100000000, ((SByte)(-100)), ((SByte)(-1)))]
		[TestCase(100000000, ((SByte)(-100)), ((SByte)(100)))]
		[TestCase(100000000, ((SByte)(-100)), ((SByte)(-100)))]
		[TestCase(-100000000, ((SByte)(0)), ((SByte)(0)))]
		[TestCase(-100000000, ((SByte)(0)), ((SByte)(1)))]
		[TestCase(-100000000, ((SByte)(0)), ((SByte)(-1)))]
		[TestCase(-100000000, ((SByte)(0)), ((SByte)(100)))]
		[TestCase(-100000000, ((SByte)(0)), ((SByte)(-100)))]
		[TestCase(-100000000, ((SByte)(1)), ((SByte)(0)))]
		[TestCase(-100000000, ((SByte)(1)), ((SByte)(1)))]
		[TestCase(-100000000, ((SByte)(1)), ((SByte)(-1)))]
		[TestCase(-100000000, ((SByte)(1)), ((SByte)(100)))]
		[TestCase(-100000000, ((SByte)(1)), ((SByte)(-100)))]
		[TestCase(-100000000, ((SByte)(-1)), ((SByte)(0)))]
		[TestCase(-100000000, ((SByte)(-1)), ((SByte)(1)))]
		[TestCase(-100000000, ((SByte)(-1)), ((SByte)(-1)))]
		[TestCase(-100000000, ((SByte)(-1)), ((SByte)(100)))]
		[TestCase(-100000000, ((SByte)(-1)), ((SByte)(-100)))]
		[TestCase(-100000000, ((SByte)(100)), ((SByte)(0)))]
		[TestCase(-100000000, ((SByte)(100)), ((SByte)(1)))]
		[TestCase(-100000000, ((SByte)(100)), ((SByte)(-1)))]
		[TestCase(-100000000, ((SByte)(100)), ((SByte)(100)))]
		[TestCase(-100000000, ((SByte)(100)), ((SByte)(-100)))]
		[TestCase(-100000000, ((SByte)(-100)), ((SByte)(0)))]
		[TestCase(-100000000, ((SByte)(-100)), ((SByte)(1)))]
		[TestCase(-100000000, ((SByte)(-100)), ((SByte)(-1)))]
		[TestCase(-100000000, ((SByte)(-100)), ((SByte)(100)))]
		[TestCase(-100000000, ((SByte)(-100)), ((SByte)(-100)))]
		public void TestClampInt32SByte(Int32 value, SByte minInclusive, SByte maxInclusive)
        {
            BigInteger expected = 0, actual = 0;
            bool expectedException = false, actualException = false;

            try
            {
                expected = Clamp(value, minInclusive, maxInclusive);
            }
            catch (ArgumentException)
            {
                expectedException = true;
            }

            try
            {
                actual = MathTrifles.Clamp(value, minInclusive, maxInclusive);
            }
            catch (ArgumentException)
            {
                actualException = true;
            }

            Assert.That(actualException, Is.EqualTo(expectedException));

            if (!expectedException)
            {
                Assert.That(actual, Is.EqualTo(expected));
            }
        }


		[TestCase(0, ((Byte)(0)), ((Byte)(0)))]
		[TestCase(0, ((Byte)(0)), ((Byte)(1)))]
		[TestCase(0, ((Byte)(0)), ((Byte)(100)))]
		[TestCase(0, ((Byte)(1)), ((Byte)(0)))]
		[TestCase(0, ((Byte)(1)), ((Byte)(1)))]
		[TestCase(0, ((Byte)(1)), ((Byte)(100)))]
		[TestCase(0, ((Byte)(100)), ((Byte)(0)))]
		[TestCase(0, ((Byte)(100)), ((Byte)(1)))]
		[TestCase(0, ((Byte)(100)), ((Byte)(100)))]
		[TestCase(1, ((Byte)(0)), ((Byte)(0)))]
		[TestCase(1, ((Byte)(0)), ((Byte)(1)))]
		[TestCase(1, ((Byte)(0)), ((Byte)(100)))]
		[TestCase(1, ((Byte)(1)), ((Byte)(0)))]
		[TestCase(1, ((Byte)(1)), ((Byte)(1)))]
		[TestCase(1, ((Byte)(1)), ((Byte)(100)))]
		[TestCase(1, ((Byte)(100)), ((Byte)(0)))]
		[TestCase(1, ((Byte)(100)), ((Byte)(1)))]
		[TestCase(1, ((Byte)(100)), ((Byte)(100)))]
		[TestCase(-1, ((Byte)(0)), ((Byte)(0)))]
		[TestCase(-1, ((Byte)(0)), ((Byte)(1)))]
		[TestCase(-1, ((Byte)(0)), ((Byte)(100)))]
		[TestCase(-1, ((Byte)(1)), ((Byte)(0)))]
		[TestCase(-1, ((Byte)(1)), ((Byte)(1)))]
		[TestCase(-1, ((Byte)(1)), ((Byte)(100)))]
		[TestCase(-1, ((Byte)(100)), ((Byte)(0)))]
		[TestCase(-1, ((Byte)(100)), ((Byte)(1)))]
		[TestCase(-1, ((Byte)(100)), ((Byte)(100)))]
		[TestCase(100, ((Byte)(0)), ((Byte)(0)))]
		[TestCase(100, ((Byte)(0)), ((Byte)(1)))]
		[TestCase(100, ((Byte)(0)), ((Byte)(100)))]
		[TestCase(100, ((Byte)(1)), ((Byte)(0)))]
		[TestCase(100, ((Byte)(1)), ((Byte)(1)))]
		[TestCase(100, ((Byte)(1)), ((Byte)(100)))]
		[TestCase(100, ((Byte)(100)), ((Byte)(0)))]
		[TestCase(100, ((Byte)(100)), ((Byte)(1)))]
		[TestCase(100, ((Byte)(100)), ((Byte)(100)))]
		[TestCase(-100, ((Byte)(0)), ((Byte)(0)))]
		[TestCase(-100, ((Byte)(0)), ((Byte)(1)))]
		[TestCase(-100, ((Byte)(0)), ((Byte)(100)))]
		[TestCase(-100, ((Byte)(1)), ((Byte)(0)))]
		[TestCase(-100, ((Byte)(1)), ((Byte)(1)))]
		[TestCase(-100, ((Byte)(1)), ((Byte)(100)))]
		[TestCase(-100, ((Byte)(100)), ((Byte)(0)))]
		[TestCase(-100, ((Byte)(100)), ((Byte)(1)))]
		[TestCase(-100, ((Byte)(100)), ((Byte)(100)))]
		[TestCase(10000, ((Byte)(0)), ((Byte)(0)))]
		[TestCase(10000, ((Byte)(0)), ((Byte)(1)))]
		[TestCase(10000, ((Byte)(0)), ((Byte)(100)))]
		[TestCase(10000, ((Byte)(1)), ((Byte)(0)))]
		[TestCase(10000, ((Byte)(1)), ((Byte)(1)))]
		[TestCase(10000, ((Byte)(1)), ((Byte)(100)))]
		[TestCase(10000, ((Byte)(100)), ((Byte)(0)))]
		[TestCase(10000, ((Byte)(100)), ((Byte)(1)))]
		[TestCase(10000, ((Byte)(100)), ((Byte)(100)))]
		[TestCase(-10000, ((Byte)(0)), ((Byte)(0)))]
		[TestCase(-10000, ((Byte)(0)), ((Byte)(1)))]
		[TestCase(-10000, ((Byte)(0)), ((Byte)(100)))]
		[TestCase(-10000, ((Byte)(1)), ((Byte)(0)))]
		[TestCase(-10000, ((Byte)(1)), ((Byte)(1)))]
		[TestCase(-10000, ((Byte)(1)), ((Byte)(100)))]
		[TestCase(-10000, ((Byte)(100)), ((Byte)(0)))]
		[TestCase(-10000, ((Byte)(100)), ((Byte)(1)))]
		[TestCase(-10000, ((Byte)(100)), ((Byte)(100)))]
		[TestCase(100000000, ((Byte)(0)), ((Byte)(0)))]
		[TestCase(100000000, ((Byte)(0)), ((Byte)(1)))]
		[TestCase(100000000, ((Byte)(0)), ((Byte)(100)))]
		[TestCase(100000000, ((Byte)(1)), ((Byte)(0)))]
		[TestCase(100000000, ((Byte)(1)), ((Byte)(1)))]
		[TestCase(100000000, ((Byte)(1)), ((Byte)(100)))]
		[TestCase(100000000, ((Byte)(100)), ((Byte)(0)))]
		[TestCase(100000000, ((Byte)(100)), ((Byte)(1)))]
		[TestCase(100000000, ((Byte)(100)), ((Byte)(100)))]
		[TestCase(-100000000, ((Byte)(0)), ((Byte)(0)))]
		[TestCase(-100000000, ((Byte)(0)), ((Byte)(1)))]
		[TestCase(-100000000, ((Byte)(0)), ((Byte)(100)))]
		[TestCase(-100000000, ((Byte)(1)), ((Byte)(0)))]
		[TestCase(-100000000, ((Byte)(1)), ((Byte)(1)))]
		[TestCase(-100000000, ((Byte)(1)), ((Byte)(100)))]
		[TestCase(-100000000, ((Byte)(100)), ((Byte)(0)))]
		[TestCase(-100000000, ((Byte)(100)), ((Byte)(1)))]
		[TestCase(-100000000, ((Byte)(100)), ((Byte)(100)))]
		public void TestClampInt32Byte(Int32 value, Byte minInclusive, Byte maxInclusive)
        {
            BigInteger expected = 0, actual = 0;
            bool expectedException = false, actualException = false;

            try
            {
                expected = Clamp(value, minInclusive, maxInclusive);
            }
            catch (ArgumentException)
            {
                expectedException = true;
            }

            try
            {
                actual = MathTrifles.Clamp(value, minInclusive, maxInclusive);
            }
            catch (ArgumentException)
            {
                actualException = true;
            }

            Assert.That(actualException, Is.EqualTo(expectedException));

            if (!expectedException)
            {
                Assert.That(actual, Is.EqualTo(expected));
            }
        }


		[TestCase(0, ((Int16)(0)), ((Int16)(0)))]
		[TestCase(0, ((Int16)(0)), ((Int16)(1)))]
		[TestCase(0, ((Int16)(0)), ((Int16)(-1)))]
		[TestCase(0, ((Int16)(0)), ((Int16)(100)))]
		[TestCase(0, ((Int16)(0)), ((Int16)(-100)))]
		[TestCase(0, ((Int16)(0)), ((Int16)(10000)))]
		[TestCase(0, ((Int16)(0)), ((Int16)(-10000)))]
		[TestCase(0, ((Int16)(1)), ((Int16)(0)))]
		[TestCase(0, ((Int16)(1)), ((Int16)(1)))]
		[TestCase(0, ((Int16)(1)), ((Int16)(-1)))]
		[TestCase(0, ((Int16)(1)), ((Int16)(100)))]
		[TestCase(0, ((Int16)(1)), ((Int16)(-100)))]
		[TestCase(0, ((Int16)(1)), ((Int16)(10000)))]
		[TestCase(0, ((Int16)(1)), ((Int16)(-10000)))]
		[TestCase(0, ((Int16)(-1)), ((Int16)(0)))]
		[TestCase(0, ((Int16)(-1)), ((Int16)(1)))]
		[TestCase(0, ((Int16)(-1)), ((Int16)(-1)))]
		[TestCase(0, ((Int16)(-1)), ((Int16)(100)))]
		[TestCase(0, ((Int16)(-1)), ((Int16)(-100)))]
		[TestCase(0, ((Int16)(-1)), ((Int16)(10000)))]
		[TestCase(0, ((Int16)(-1)), ((Int16)(-10000)))]
		[TestCase(0, ((Int16)(100)), ((Int16)(0)))]
		[TestCase(0, ((Int16)(100)), ((Int16)(1)))]
		[TestCase(0, ((Int16)(100)), ((Int16)(-1)))]
		[TestCase(0, ((Int16)(100)), ((Int16)(100)))]
		[TestCase(0, ((Int16)(100)), ((Int16)(-100)))]
		[TestCase(0, ((Int16)(100)), ((Int16)(10000)))]
		[TestCase(0, ((Int16)(100)), ((Int16)(-10000)))]
		[TestCase(0, ((Int16)(-100)), ((Int16)(0)))]
		[TestCase(0, ((Int16)(-100)), ((Int16)(1)))]
		[TestCase(0, ((Int16)(-100)), ((Int16)(-1)))]
		[TestCase(0, ((Int16)(-100)), ((Int16)(100)))]
		[TestCase(0, ((Int16)(-100)), ((Int16)(-100)))]
		[TestCase(0, ((Int16)(-100)), ((Int16)(10000)))]
		[TestCase(0, ((Int16)(-100)), ((Int16)(-10000)))]
		[TestCase(0, ((Int16)(10000)), ((Int16)(0)))]
		[TestCase(0, ((Int16)(10000)), ((Int16)(1)))]
		[TestCase(0, ((Int16)(10000)), ((Int16)(-1)))]
		[TestCase(0, ((Int16)(10000)), ((Int16)(100)))]
		[TestCase(0, ((Int16)(10000)), ((Int16)(-100)))]
		[TestCase(0, ((Int16)(10000)), ((Int16)(10000)))]
		[TestCase(0, ((Int16)(10000)), ((Int16)(-10000)))]
		[TestCase(0, ((Int16)(-10000)), ((Int16)(0)))]
		[TestCase(0, ((Int16)(-10000)), ((Int16)(1)))]
		[TestCase(0, ((Int16)(-10000)), ((Int16)(-1)))]
		[TestCase(0, ((Int16)(-10000)), ((Int16)(100)))]
		[TestCase(0, ((Int16)(-10000)), ((Int16)(-100)))]
		[TestCase(0, ((Int16)(-10000)), ((Int16)(10000)))]
		[TestCase(0, ((Int16)(-10000)), ((Int16)(-10000)))]
		[TestCase(1, ((Int16)(0)), ((Int16)(0)))]
		[TestCase(1, ((Int16)(0)), ((Int16)(1)))]
		[TestCase(1, ((Int16)(0)), ((Int16)(-1)))]
		[TestCase(1, ((Int16)(0)), ((Int16)(100)))]
		[TestCase(1, ((Int16)(0)), ((Int16)(-100)))]
		[TestCase(1, ((Int16)(0)), ((Int16)(10000)))]
		[TestCase(1, ((Int16)(0)), ((Int16)(-10000)))]
		[TestCase(1, ((Int16)(1)), ((Int16)(0)))]
		[TestCase(1, ((Int16)(1)), ((Int16)(1)))]
		[TestCase(1, ((Int16)(1)), ((Int16)(-1)))]
		[TestCase(1, ((Int16)(1)), ((Int16)(100)))]
		[TestCase(1, ((Int16)(1)), ((Int16)(-100)))]
		[TestCase(1, ((Int16)(1)), ((Int16)(10000)))]
		[TestCase(1, ((Int16)(1)), ((Int16)(-10000)))]
		[TestCase(1, ((Int16)(-1)), ((Int16)(0)))]
		[TestCase(1, ((Int16)(-1)), ((Int16)(1)))]
		[TestCase(1, ((Int16)(-1)), ((Int16)(-1)))]
		[TestCase(1, ((Int16)(-1)), ((Int16)(100)))]
		[TestCase(1, ((Int16)(-1)), ((Int16)(-100)))]
		[TestCase(1, ((Int16)(-1)), ((Int16)(10000)))]
		[TestCase(1, ((Int16)(-1)), ((Int16)(-10000)))]
		[TestCase(1, ((Int16)(100)), ((Int16)(0)))]
		[TestCase(1, ((Int16)(100)), ((Int16)(1)))]
		[TestCase(1, ((Int16)(100)), ((Int16)(-1)))]
		[TestCase(1, ((Int16)(100)), ((Int16)(100)))]
		[TestCase(1, ((Int16)(100)), ((Int16)(-100)))]
		[TestCase(1, ((Int16)(100)), ((Int16)(10000)))]
		[TestCase(1, ((Int16)(100)), ((Int16)(-10000)))]
		[TestCase(1, ((Int16)(-100)), ((Int16)(0)))]
		[TestCase(1, ((Int16)(-100)), ((Int16)(1)))]
		[TestCase(1, ((Int16)(-100)), ((Int16)(-1)))]
		[TestCase(1, ((Int16)(-100)), ((Int16)(100)))]
		[TestCase(1, ((Int16)(-100)), ((Int16)(-100)))]
		[TestCase(1, ((Int16)(-100)), ((Int16)(10000)))]
		[TestCase(1, ((Int16)(-100)), ((Int16)(-10000)))]
		[TestCase(1, ((Int16)(10000)), ((Int16)(0)))]
		[TestCase(1, ((Int16)(10000)), ((Int16)(1)))]
		[TestCase(1, ((Int16)(10000)), ((Int16)(-1)))]
		[TestCase(1, ((Int16)(10000)), ((Int16)(100)))]
		[TestCase(1, ((Int16)(10000)), ((Int16)(-100)))]
		[TestCase(1, ((Int16)(10000)), ((Int16)(10000)))]
		[TestCase(1, ((Int16)(10000)), ((Int16)(-10000)))]
		[TestCase(1, ((Int16)(-10000)), ((Int16)(0)))]
		[TestCase(1, ((Int16)(-10000)), ((Int16)(1)))]
		[TestCase(1, ((Int16)(-10000)), ((Int16)(-1)))]
		[TestCase(1, ((Int16)(-10000)), ((Int16)(100)))]
		[TestCase(1, ((Int16)(-10000)), ((Int16)(-100)))]
		[TestCase(1, ((Int16)(-10000)), ((Int16)(10000)))]
		[TestCase(1, ((Int16)(-10000)), ((Int16)(-10000)))]
		[TestCase(-1, ((Int16)(0)), ((Int16)(0)))]
		[TestCase(-1, ((Int16)(0)), ((Int16)(1)))]
		[TestCase(-1, ((Int16)(0)), ((Int16)(-1)))]
		[TestCase(-1, ((Int16)(0)), ((Int16)(100)))]
		[TestCase(-1, ((Int16)(0)), ((Int16)(-100)))]
		[TestCase(-1, ((Int16)(0)), ((Int16)(10000)))]
		[TestCase(-1, ((Int16)(0)), ((Int16)(-10000)))]
		[TestCase(-1, ((Int16)(1)), ((Int16)(0)))]
		[TestCase(-1, ((Int16)(1)), ((Int16)(1)))]
		[TestCase(-1, ((Int16)(1)), ((Int16)(-1)))]
		[TestCase(-1, ((Int16)(1)), ((Int16)(100)))]
		[TestCase(-1, ((Int16)(1)), ((Int16)(-100)))]
		[TestCase(-1, ((Int16)(1)), ((Int16)(10000)))]
		[TestCase(-1, ((Int16)(1)), ((Int16)(-10000)))]
		[TestCase(-1, ((Int16)(-1)), ((Int16)(0)))]
		[TestCase(-1, ((Int16)(-1)), ((Int16)(1)))]
		[TestCase(-1, ((Int16)(-1)), ((Int16)(-1)))]
		[TestCase(-1, ((Int16)(-1)), ((Int16)(100)))]
		[TestCase(-1, ((Int16)(-1)), ((Int16)(-100)))]
		[TestCase(-1, ((Int16)(-1)), ((Int16)(10000)))]
		[TestCase(-1, ((Int16)(-1)), ((Int16)(-10000)))]
		[TestCase(-1, ((Int16)(100)), ((Int16)(0)))]
		[TestCase(-1, ((Int16)(100)), ((Int16)(1)))]
		[TestCase(-1, ((Int16)(100)), ((Int16)(-1)))]
		[TestCase(-1, ((Int16)(100)), ((Int16)(100)))]
		[TestCase(-1, ((Int16)(100)), ((Int16)(-100)))]
		[TestCase(-1, ((Int16)(100)), ((Int16)(10000)))]
		[TestCase(-1, ((Int16)(100)), ((Int16)(-10000)))]
		[TestCase(-1, ((Int16)(-100)), ((Int16)(0)))]
		[TestCase(-1, ((Int16)(-100)), ((Int16)(1)))]
		[TestCase(-1, ((Int16)(-100)), ((Int16)(-1)))]
		[TestCase(-1, ((Int16)(-100)), ((Int16)(100)))]
		[TestCase(-1, ((Int16)(-100)), ((Int16)(-100)))]
		[TestCase(-1, ((Int16)(-100)), ((Int16)(10000)))]
		[TestCase(-1, ((Int16)(-100)), ((Int16)(-10000)))]
		[TestCase(-1, ((Int16)(10000)), ((Int16)(0)))]
		[TestCase(-1, ((Int16)(10000)), ((Int16)(1)))]
		[TestCase(-1, ((Int16)(10000)), ((Int16)(-1)))]
		[TestCase(-1, ((Int16)(10000)), ((Int16)(100)))]
		[TestCase(-1, ((Int16)(10000)), ((Int16)(-100)))]
		[TestCase(-1, ((Int16)(10000)), ((Int16)(10000)))]
		[TestCase(-1, ((Int16)(10000)), ((Int16)(-10000)))]
		[TestCase(-1, ((Int16)(-10000)), ((Int16)(0)))]
		[TestCase(-1, ((Int16)(-10000)), ((Int16)(1)))]
		[TestCase(-1, ((Int16)(-10000)), ((Int16)(-1)))]
		[TestCase(-1, ((Int16)(-10000)), ((Int16)(100)))]
		[TestCase(-1, ((Int16)(-10000)), ((Int16)(-100)))]
		[TestCase(-1, ((Int16)(-10000)), ((Int16)(10000)))]
		[TestCase(-1, ((Int16)(-10000)), ((Int16)(-10000)))]
		[TestCase(100, ((Int16)(0)), ((Int16)(0)))]
		[TestCase(100, ((Int16)(0)), ((Int16)(1)))]
		[TestCase(100, ((Int16)(0)), ((Int16)(-1)))]
		[TestCase(100, ((Int16)(0)), ((Int16)(100)))]
		[TestCase(100, ((Int16)(0)), ((Int16)(-100)))]
		[TestCase(100, ((Int16)(0)), ((Int16)(10000)))]
		[TestCase(100, ((Int16)(0)), ((Int16)(-10000)))]
		[TestCase(100, ((Int16)(1)), ((Int16)(0)))]
		[TestCase(100, ((Int16)(1)), ((Int16)(1)))]
		[TestCase(100, ((Int16)(1)), ((Int16)(-1)))]
		[TestCase(100, ((Int16)(1)), ((Int16)(100)))]
		[TestCase(100, ((Int16)(1)), ((Int16)(-100)))]
		[TestCase(100, ((Int16)(1)), ((Int16)(10000)))]
		[TestCase(100, ((Int16)(1)), ((Int16)(-10000)))]
		[TestCase(100, ((Int16)(-1)), ((Int16)(0)))]
		[TestCase(100, ((Int16)(-1)), ((Int16)(1)))]
		[TestCase(100, ((Int16)(-1)), ((Int16)(-1)))]
		[TestCase(100, ((Int16)(-1)), ((Int16)(100)))]
		[TestCase(100, ((Int16)(-1)), ((Int16)(-100)))]
		[TestCase(100, ((Int16)(-1)), ((Int16)(10000)))]
		[TestCase(100, ((Int16)(-1)), ((Int16)(-10000)))]
		[TestCase(100, ((Int16)(100)), ((Int16)(0)))]
		[TestCase(100, ((Int16)(100)), ((Int16)(1)))]
		[TestCase(100, ((Int16)(100)), ((Int16)(-1)))]
		[TestCase(100, ((Int16)(100)), ((Int16)(100)))]
		[TestCase(100, ((Int16)(100)), ((Int16)(-100)))]
		[TestCase(100, ((Int16)(100)), ((Int16)(10000)))]
		[TestCase(100, ((Int16)(100)), ((Int16)(-10000)))]
		[TestCase(100, ((Int16)(-100)), ((Int16)(0)))]
		[TestCase(100, ((Int16)(-100)), ((Int16)(1)))]
		[TestCase(100, ((Int16)(-100)), ((Int16)(-1)))]
		[TestCase(100, ((Int16)(-100)), ((Int16)(100)))]
		[TestCase(100, ((Int16)(-100)), ((Int16)(-100)))]
		[TestCase(100, ((Int16)(-100)), ((Int16)(10000)))]
		[TestCase(100, ((Int16)(-100)), ((Int16)(-10000)))]
		[TestCase(100, ((Int16)(10000)), ((Int16)(0)))]
		[TestCase(100, ((Int16)(10000)), ((Int16)(1)))]
		[TestCase(100, ((Int16)(10000)), ((Int16)(-1)))]
		[TestCase(100, ((Int16)(10000)), ((Int16)(100)))]
		[TestCase(100, ((Int16)(10000)), ((Int16)(-100)))]
		[TestCase(100, ((Int16)(10000)), ((Int16)(10000)))]
		[TestCase(100, ((Int16)(10000)), ((Int16)(-10000)))]
		[TestCase(100, ((Int16)(-10000)), ((Int16)(0)))]
		[TestCase(100, ((Int16)(-10000)), ((Int16)(1)))]
		[TestCase(100, ((Int16)(-10000)), ((Int16)(-1)))]
		[TestCase(100, ((Int16)(-10000)), ((Int16)(100)))]
		[TestCase(100, ((Int16)(-10000)), ((Int16)(-100)))]
		[TestCase(100, ((Int16)(-10000)), ((Int16)(10000)))]
		[TestCase(100, ((Int16)(-10000)), ((Int16)(-10000)))]
		[TestCase(-100, ((Int16)(0)), ((Int16)(0)))]
		[TestCase(-100, ((Int16)(0)), ((Int16)(1)))]
		[TestCase(-100, ((Int16)(0)), ((Int16)(-1)))]
		[TestCase(-100, ((Int16)(0)), ((Int16)(100)))]
		[TestCase(-100, ((Int16)(0)), ((Int16)(-100)))]
		[TestCase(-100, ((Int16)(0)), ((Int16)(10000)))]
		[TestCase(-100, ((Int16)(0)), ((Int16)(-10000)))]
		[TestCase(-100, ((Int16)(1)), ((Int16)(0)))]
		[TestCase(-100, ((Int16)(1)), ((Int16)(1)))]
		[TestCase(-100, ((Int16)(1)), ((Int16)(-1)))]
		[TestCase(-100, ((Int16)(1)), ((Int16)(100)))]
		[TestCase(-100, ((Int16)(1)), ((Int16)(-100)))]
		[TestCase(-100, ((Int16)(1)), ((Int16)(10000)))]
		[TestCase(-100, ((Int16)(1)), ((Int16)(-10000)))]
		[TestCase(-100, ((Int16)(-1)), ((Int16)(0)))]
		[TestCase(-100, ((Int16)(-1)), ((Int16)(1)))]
		[TestCase(-100, ((Int16)(-1)), ((Int16)(-1)))]
		[TestCase(-100, ((Int16)(-1)), ((Int16)(100)))]
		[TestCase(-100, ((Int16)(-1)), ((Int16)(-100)))]
		[TestCase(-100, ((Int16)(-1)), ((Int16)(10000)))]
		[TestCase(-100, ((Int16)(-1)), ((Int16)(-10000)))]
		[TestCase(-100, ((Int16)(100)), ((Int16)(0)))]
		[TestCase(-100, ((Int16)(100)), ((Int16)(1)))]
		[TestCase(-100, ((Int16)(100)), ((Int16)(-1)))]
		[TestCase(-100, ((Int16)(100)), ((Int16)(100)))]
		[TestCase(-100, ((Int16)(100)), ((Int16)(-100)))]
		[TestCase(-100, ((Int16)(100)), ((Int16)(10000)))]
		[TestCase(-100, ((Int16)(100)), ((Int16)(-10000)))]
		[TestCase(-100, ((Int16)(-100)), ((Int16)(0)))]
		[TestCase(-100, ((Int16)(-100)), ((Int16)(1)))]
		[TestCase(-100, ((Int16)(-100)), ((Int16)(-1)))]
		[TestCase(-100, ((Int16)(-100)), ((Int16)(100)))]
		[TestCase(-100, ((Int16)(-100)), ((Int16)(-100)))]
		[TestCase(-100, ((Int16)(-100)), ((Int16)(10000)))]
		[TestCase(-100, ((Int16)(-100)), ((Int16)(-10000)))]
		[TestCase(-100, ((Int16)(10000)), ((Int16)(0)))]
		[TestCase(-100, ((Int16)(10000)), ((Int16)(1)))]
		[TestCase(-100, ((Int16)(10000)), ((Int16)(-1)))]
		[TestCase(-100, ((Int16)(10000)), ((Int16)(100)))]
		[TestCase(-100, ((Int16)(10000)), ((Int16)(-100)))]
		[TestCase(-100, ((Int16)(10000)), ((Int16)(10000)))]
		[TestCase(-100, ((Int16)(10000)), ((Int16)(-10000)))]
		[TestCase(-100, ((Int16)(-10000)), ((Int16)(0)))]
		[TestCase(-100, ((Int16)(-10000)), ((Int16)(1)))]
		[TestCase(-100, ((Int16)(-10000)), ((Int16)(-1)))]
		[TestCase(-100, ((Int16)(-10000)), ((Int16)(100)))]
		[TestCase(-100, ((Int16)(-10000)), ((Int16)(-100)))]
		[TestCase(-100, ((Int16)(-10000)), ((Int16)(10000)))]
		[TestCase(-100, ((Int16)(-10000)), ((Int16)(-10000)))]
		[TestCase(10000, ((Int16)(0)), ((Int16)(0)))]
		[TestCase(10000, ((Int16)(0)), ((Int16)(1)))]
		[TestCase(10000, ((Int16)(0)), ((Int16)(-1)))]
		[TestCase(10000, ((Int16)(0)), ((Int16)(100)))]
		[TestCase(10000, ((Int16)(0)), ((Int16)(-100)))]
		[TestCase(10000, ((Int16)(0)), ((Int16)(10000)))]
		[TestCase(10000, ((Int16)(0)), ((Int16)(-10000)))]
		[TestCase(10000, ((Int16)(1)), ((Int16)(0)))]
		[TestCase(10000, ((Int16)(1)), ((Int16)(1)))]
		[TestCase(10000, ((Int16)(1)), ((Int16)(-1)))]
		[TestCase(10000, ((Int16)(1)), ((Int16)(100)))]
		[TestCase(10000, ((Int16)(1)), ((Int16)(-100)))]
		[TestCase(10000, ((Int16)(1)), ((Int16)(10000)))]
		[TestCase(10000, ((Int16)(1)), ((Int16)(-10000)))]
		[TestCase(10000, ((Int16)(-1)), ((Int16)(0)))]
		[TestCase(10000, ((Int16)(-1)), ((Int16)(1)))]
		[TestCase(10000, ((Int16)(-1)), ((Int16)(-1)))]
		[TestCase(10000, ((Int16)(-1)), ((Int16)(100)))]
		[TestCase(10000, ((Int16)(-1)), ((Int16)(-100)))]
		[TestCase(10000, ((Int16)(-1)), ((Int16)(10000)))]
		[TestCase(10000, ((Int16)(-1)), ((Int16)(-10000)))]
		[TestCase(10000, ((Int16)(100)), ((Int16)(0)))]
		[TestCase(10000, ((Int16)(100)), ((Int16)(1)))]
		[TestCase(10000, ((Int16)(100)), ((Int16)(-1)))]
		[TestCase(10000, ((Int16)(100)), ((Int16)(100)))]
		[TestCase(10000, ((Int16)(100)), ((Int16)(-100)))]
		[TestCase(10000, ((Int16)(100)), ((Int16)(10000)))]
		[TestCase(10000, ((Int16)(100)), ((Int16)(-10000)))]
		[TestCase(10000, ((Int16)(-100)), ((Int16)(0)))]
		[TestCase(10000, ((Int16)(-100)), ((Int16)(1)))]
		[TestCase(10000, ((Int16)(-100)), ((Int16)(-1)))]
		[TestCase(10000, ((Int16)(-100)), ((Int16)(100)))]
		[TestCase(10000, ((Int16)(-100)), ((Int16)(-100)))]
		[TestCase(10000, ((Int16)(-100)), ((Int16)(10000)))]
		[TestCase(10000, ((Int16)(-100)), ((Int16)(-10000)))]
		[TestCase(10000, ((Int16)(10000)), ((Int16)(0)))]
		[TestCase(10000, ((Int16)(10000)), ((Int16)(1)))]
		[TestCase(10000, ((Int16)(10000)), ((Int16)(-1)))]
		[TestCase(10000, ((Int16)(10000)), ((Int16)(100)))]
		[TestCase(10000, ((Int16)(10000)), ((Int16)(-100)))]
		[TestCase(10000, ((Int16)(10000)), ((Int16)(10000)))]
		[TestCase(10000, ((Int16)(10000)), ((Int16)(-10000)))]
		[TestCase(10000, ((Int16)(-10000)), ((Int16)(0)))]
		[TestCase(10000, ((Int16)(-10000)), ((Int16)(1)))]
		[TestCase(10000, ((Int16)(-10000)), ((Int16)(-1)))]
		[TestCase(10000, ((Int16)(-10000)), ((Int16)(100)))]
		[TestCase(10000, ((Int16)(-10000)), ((Int16)(-100)))]
		[TestCase(10000, ((Int16)(-10000)), ((Int16)(10000)))]
		[TestCase(10000, ((Int16)(-10000)), ((Int16)(-10000)))]
		[TestCase(-10000, ((Int16)(0)), ((Int16)(0)))]
		[TestCase(-10000, ((Int16)(0)), ((Int16)(1)))]
		[TestCase(-10000, ((Int16)(0)), ((Int16)(-1)))]
		[TestCase(-10000, ((Int16)(0)), ((Int16)(100)))]
		[TestCase(-10000, ((Int16)(0)), ((Int16)(-100)))]
		[TestCase(-10000, ((Int16)(0)), ((Int16)(10000)))]
		[TestCase(-10000, ((Int16)(0)), ((Int16)(-10000)))]
		[TestCase(-10000, ((Int16)(1)), ((Int16)(0)))]
		[TestCase(-10000, ((Int16)(1)), ((Int16)(1)))]
		[TestCase(-10000, ((Int16)(1)), ((Int16)(-1)))]
		[TestCase(-10000, ((Int16)(1)), ((Int16)(100)))]
		[TestCase(-10000, ((Int16)(1)), ((Int16)(-100)))]
		[TestCase(-10000, ((Int16)(1)), ((Int16)(10000)))]
		[TestCase(-10000, ((Int16)(1)), ((Int16)(-10000)))]
		[TestCase(-10000, ((Int16)(-1)), ((Int16)(0)))]
		[TestCase(-10000, ((Int16)(-1)), ((Int16)(1)))]
		[TestCase(-10000, ((Int16)(-1)), ((Int16)(-1)))]
		[TestCase(-10000, ((Int16)(-1)), ((Int16)(100)))]
		[TestCase(-10000, ((Int16)(-1)), ((Int16)(-100)))]
		[TestCase(-10000, ((Int16)(-1)), ((Int16)(10000)))]
		[TestCase(-10000, ((Int16)(-1)), ((Int16)(-10000)))]
		[TestCase(-10000, ((Int16)(100)), ((Int16)(0)))]
		[TestCase(-10000, ((Int16)(100)), ((Int16)(1)))]
		[TestCase(-10000, ((Int16)(100)), ((Int16)(-1)))]
		[TestCase(-10000, ((Int16)(100)), ((Int16)(100)))]
		[TestCase(-10000, ((Int16)(100)), ((Int16)(-100)))]
		[TestCase(-10000, ((Int16)(100)), ((Int16)(10000)))]
		[TestCase(-10000, ((Int16)(100)), ((Int16)(-10000)))]
		[TestCase(-10000, ((Int16)(-100)), ((Int16)(0)))]
		[TestCase(-10000, ((Int16)(-100)), ((Int16)(1)))]
		[TestCase(-10000, ((Int16)(-100)), ((Int16)(-1)))]
		[TestCase(-10000, ((Int16)(-100)), ((Int16)(100)))]
		[TestCase(-10000, ((Int16)(-100)), ((Int16)(-100)))]
		[TestCase(-10000, ((Int16)(-100)), ((Int16)(10000)))]
		[TestCase(-10000, ((Int16)(-100)), ((Int16)(-10000)))]
		[TestCase(-10000, ((Int16)(10000)), ((Int16)(0)))]
		[TestCase(-10000, ((Int16)(10000)), ((Int16)(1)))]
		[TestCase(-10000, ((Int16)(10000)), ((Int16)(-1)))]
		[TestCase(-10000, ((Int16)(10000)), ((Int16)(100)))]
		[TestCase(-10000, ((Int16)(10000)), ((Int16)(-100)))]
		[TestCase(-10000, ((Int16)(10000)), ((Int16)(10000)))]
		[TestCase(-10000, ((Int16)(10000)), ((Int16)(-10000)))]
		[TestCase(-10000, ((Int16)(-10000)), ((Int16)(0)))]
		[TestCase(-10000, ((Int16)(-10000)), ((Int16)(1)))]
		[TestCase(-10000, ((Int16)(-10000)), ((Int16)(-1)))]
		[TestCase(-10000, ((Int16)(-10000)), ((Int16)(100)))]
		[TestCase(-10000, ((Int16)(-10000)), ((Int16)(-100)))]
		[TestCase(-10000, ((Int16)(-10000)), ((Int16)(10000)))]
		[TestCase(-10000, ((Int16)(-10000)), ((Int16)(-10000)))]
		[TestCase(100000000, ((Int16)(0)), ((Int16)(0)))]
		[TestCase(100000000, ((Int16)(0)), ((Int16)(1)))]
		[TestCase(100000000, ((Int16)(0)), ((Int16)(-1)))]
		[TestCase(100000000, ((Int16)(0)), ((Int16)(100)))]
		[TestCase(100000000, ((Int16)(0)), ((Int16)(-100)))]
		[TestCase(100000000, ((Int16)(0)), ((Int16)(10000)))]
		[TestCase(100000000, ((Int16)(0)), ((Int16)(-10000)))]
		[TestCase(100000000, ((Int16)(1)), ((Int16)(0)))]
		[TestCase(100000000, ((Int16)(1)), ((Int16)(1)))]
		[TestCase(100000000, ((Int16)(1)), ((Int16)(-1)))]
		[TestCase(100000000, ((Int16)(1)), ((Int16)(100)))]
		[TestCase(100000000, ((Int16)(1)), ((Int16)(-100)))]
		[TestCase(100000000, ((Int16)(1)), ((Int16)(10000)))]
		[TestCase(100000000, ((Int16)(1)), ((Int16)(-10000)))]
		[TestCase(100000000, ((Int16)(-1)), ((Int16)(0)))]
		[TestCase(100000000, ((Int16)(-1)), ((Int16)(1)))]
		[TestCase(100000000, ((Int16)(-1)), ((Int16)(-1)))]
		[TestCase(100000000, ((Int16)(-1)), ((Int16)(100)))]
		[TestCase(100000000, ((Int16)(-1)), ((Int16)(-100)))]
		[TestCase(100000000, ((Int16)(-1)), ((Int16)(10000)))]
		[TestCase(100000000, ((Int16)(-1)), ((Int16)(-10000)))]
		[TestCase(100000000, ((Int16)(100)), ((Int16)(0)))]
		[TestCase(100000000, ((Int16)(100)), ((Int16)(1)))]
		[TestCase(100000000, ((Int16)(100)), ((Int16)(-1)))]
		[TestCase(100000000, ((Int16)(100)), ((Int16)(100)))]
		[TestCase(100000000, ((Int16)(100)), ((Int16)(-100)))]
		[TestCase(100000000, ((Int16)(100)), ((Int16)(10000)))]
		[TestCase(100000000, ((Int16)(100)), ((Int16)(-10000)))]
		[TestCase(100000000, ((Int16)(-100)), ((Int16)(0)))]
		[TestCase(100000000, ((Int16)(-100)), ((Int16)(1)))]
		[TestCase(100000000, ((Int16)(-100)), ((Int16)(-1)))]
		[TestCase(100000000, ((Int16)(-100)), ((Int16)(100)))]
		[TestCase(100000000, ((Int16)(-100)), ((Int16)(-100)))]
		[TestCase(100000000, ((Int16)(-100)), ((Int16)(10000)))]
		[TestCase(100000000, ((Int16)(-100)), ((Int16)(-10000)))]
		[TestCase(100000000, ((Int16)(10000)), ((Int16)(0)))]
		[TestCase(100000000, ((Int16)(10000)), ((Int16)(1)))]
		[TestCase(100000000, ((Int16)(10000)), ((Int16)(-1)))]
		[TestCase(100000000, ((Int16)(10000)), ((Int16)(100)))]
		[TestCase(100000000, ((Int16)(10000)), ((Int16)(-100)))]
		[TestCase(100000000, ((Int16)(10000)), ((Int16)(10000)))]
		[TestCase(100000000, ((Int16)(10000)), ((Int16)(-10000)))]
		[TestCase(100000000, ((Int16)(-10000)), ((Int16)(0)))]
		[TestCase(100000000, ((Int16)(-10000)), ((Int16)(1)))]
		[TestCase(100000000, ((Int16)(-10000)), ((Int16)(-1)))]
		[TestCase(100000000, ((Int16)(-10000)), ((Int16)(100)))]
		[TestCase(100000000, ((Int16)(-10000)), ((Int16)(-100)))]
		[TestCase(100000000, ((Int16)(-10000)), ((Int16)(10000)))]
		[TestCase(100000000, ((Int16)(-10000)), ((Int16)(-10000)))]
		[TestCase(-100000000, ((Int16)(0)), ((Int16)(0)))]
		[TestCase(-100000000, ((Int16)(0)), ((Int16)(1)))]
		[TestCase(-100000000, ((Int16)(0)), ((Int16)(-1)))]
		[TestCase(-100000000, ((Int16)(0)), ((Int16)(100)))]
		[TestCase(-100000000, ((Int16)(0)), ((Int16)(-100)))]
		[TestCase(-100000000, ((Int16)(0)), ((Int16)(10000)))]
		[TestCase(-100000000, ((Int16)(0)), ((Int16)(-10000)))]
		[TestCase(-100000000, ((Int16)(1)), ((Int16)(0)))]
		[TestCase(-100000000, ((Int16)(1)), ((Int16)(1)))]
		[TestCase(-100000000, ((Int16)(1)), ((Int16)(-1)))]
		[TestCase(-100000000, ((Int16)(1)), ((Int16)(100)))]
		[TestCase(-100000000, ((Int16)(1)), ((Int16)(-100)))]
		[TestCase(-100000000, ((Int16)(1)), ((Int16)(10000)))]
		[TestCase(-100000000, ((Int16)(1)), ((Int16)(-10000)))]
		[TestCase(-100000000, ((Int16)(-1)), ((Int16)(0)))]
		[TestCase(-100000000, ((Int16)(-1)), ((Int16)(1)))]
		[TestCase(-100000000, ((Int16)(-1)), ((Int16)(-1)))]
		[TestCase(-100000000, ((Int16)(-1)), ((Int16)(100)))]
		[TestCase(-100000000, ((Int16)(-1)), ((Int16)(-100)))]
		[TestCase(-100000000, ((Int16)(-1)), ((Int16)(10000)))]
		[TestCase(-100000000, ((Int16)(-1)), ((Int16)(-10000)))]
		[TestCase(-100000000, ((Int16)(100)), ((Int16)(0)))]
		[TestCase(-100000000, ((Int16)(100)), ((Int16)(1)))]
		[TestCase(-100000000, ((Int16)(100)), ((Int16)(-1)))]
		[TestCase(-100000000, ((Int16)(100)), ((Int16)(100)))]
		[TestCase(-100000000, ((Int16)(100)), ((Int16)(-100)))]
		[TestCase(-100000000, ((Int16)(100)), ((Int16)(10000)))]
		[TestCase(-100000000, ((Int16)(100)), ((Int16)(-10000)))]
		[TestCase(-100000000, ((Int16)(-100)), ((Int16)(0)))]
		[TestCase(-100000000, ((Int16)(-100)), ((Int16)(1)))]
		[TestCase(-100000000, ((Int16)(-100)), ((Int16)(-1)))]
		[TestCase(-100000000, ((Int16)(-100)), ((Int16)(100)))]
		[TestCase(-100000000, ((Int16)(-100)), ((Int16)(-100)))]
		[TestCase(-100000000, ((Int16)(-100)), ((Int16)(10000)))]
		[TestCase(-100000000, ((Int16)(-100)), ((Int16)(-10000)))]
		[TestCase(-100000000, ((Int16)(10000)), ((Int16)(0)))]
		[TestCase(-100000000, ((Int16)(10000)), ((Int16)(1)))]
		[TestCase(-100000000, ((Int16)(10000)), ((Int16)(-1)))]
		[TestCase(-100000000, ((Int16)(10000)), ((Int16)(100)))]
		[TestCase(-100000000, ((Int16)(10000)), ((Int16)(-100)))]
		[TestCase(-100000000, ((Int16)(10000)), ((Int16)(10000)))]
		[TestCase(-100000000, ((Int16)(10000)), ((Int16)(-10000)))]
		[TestCase(-100000000, ((Int16)(-10000)), ((Int16)(0)))]
		[TestCase(-100000000, ((Int16)(-10000)), ((Int16)(1)))]
		[TestCase(-100000000, ((Int16)(-10000)), ((Int16)(-1)))]
		[TestCase(-100000000, ((Int16)(-10000)), ((Int16)(100)))]
		[TestCase(-100000000, ((Int16)(-10000)), ((Int16)(-100)))]
		[TestCase(-100000000, ((Int16)(-10000)), ((Int16)(10000)))]
		[TestCase(-100000000, ((Int16)(-10000)), ((Int16)(-10000)))]
		public void TestClampInt32Int16(Int32 value, Int16 minInclusive, Int16 maxInclusive)
        {
            BigInteger expected = 0, actual = 0;
            bool expectedException = false, actualException = false;

            try
            {
                expected = Clamp(value, minInclusive, maxInclusive);
            }
            catch (ArgumentException)
            {
                expectedException = true;
            }

            try
            {
                actual = MathTrifles.Clamp(value, minInclusive, maxInclusive);
            }
            catch (ArgumentException)
            {
                actualException = true;
            }

            Assert.That(actualException, Is.EqualTo(expectedException));

            if (!expectedException)
            {
                Assert.That(actual, Is.EqualTo(expected));
            }
        }


		[TestCase(0, ((UInt16)(0)), ((UInt16)(0)))]
		[TestCase(0, ((UInt16)(0)), ((UInt16)(1)))]
		[TestCase(0, ((UInt16)(0)), ((UInt16)(100)))]
		[TestCase(0, ((UInt16)(0)), ((UInt16)(10000)))]
		[TestCase(0, ((UInt16)(1)), ((UInt16)(0)))]
		[TestCase(0, ((UInt16)(1)), ((UInt16)(1)))]
		[TestCase(0, ((UInt16)(1)), ((UInt16)(100)))]
		[TestCase(0, ((UInt16)(1)), ((UInt16)(10000)))]
		[TestCase(0, ((UInt16)(100)), ((UInt16)(0)))]
		[TestCase(0, ((UInt16)(100)), ((UInt16)(1)))]
		[TestCase(0, ((UInt16)(100)), ((UInt16)(100)))]
		[TestCase(0, ((UInt16)(100)), ((UInt16)(10000)))]
		[TestCase(0, ((UInt16)(10000)), ((UInt16)(0)))]
		[TestCase(0, ((UInt16)(10000)), ((UInt16)(1)))]
		[TestCase(0, ((UInt16)(10000)), ((UInt16)(100)))]
		[TestCase(0, ((UInt16)(10000)), ((UInt16)(10000)))]
		[TestCase(1, ((UInt16)(0)), ((UInt16)(0)))]
		[TestCase(1, ((UInt16)(0)), ((UInt16)(1)))]
		[TestCase(1, ((UInt16)(0)), ((UInt16)(100)))]
		[TestCase(1, ((UInt16)(0)), ((UInt16)(10000)))]
		[TestCase(1, ((UInt16)(1)), ((UInt16)(0)))]
		[TestCase(1, ((UInt16)(1)), ((UInt16)(1)))]
		[TestCase(1, ((UInt16)(1)), ((UInt16)(100)))]
		[TestCase(1, ((UInt16)(1)), ((UInt16)(10000)))]
		[TestCase(1, ((UInt16)(100)), ((UInt16)(0)))]
		[TestCase(1, ((UInt16)(100)), ((UInt16)(1)))]
		[TestCase(1, ((UInt16)(100)), ((UInt16)(100)))]
		[TestCase(1, ((UInt16)(100)), ((UInt16)(10000)))]
		[TestCase(1, ((UInt16)(10000)), ((UInt16)(0)))]
		[TestCase(1, ((UInt16)(10000)), ((UInt16)(1)))]
		[TestCase(1, ((UInt16)(10000)), ((UInt16)(100)))]
		[TestCase(1, ((UInt16)(10000)), ((UInt16)(10000)))]
		[TestCase(-1, ((UInt16)(0)), ((UInt16)(0)))]
		[TestCase(-1, ((UInt16)(0)), ((UInt16)(1)))]
		[TestCase(-1, ((UInt16)(0)), ((UInt16)(100)))]
		[TestCase(-1, ((UInt16)(0)), ((UInt16)(10000)))]
		[TestCase(-1, ((UInt16)(1)), ((UInt16)(0)))]
		[TestCase(-1, ((UInt16)(1)), ((UInt16)(1)))]
		[TestCase(-1, ((UInt16)(1)), ((UInt16)(100)))]
		[TestCase(-1, ((UInt16)(1)), ((UInt16)(10000)))]
		[TestCase(-1, ((UInt16)(100)), ((UInt16)(0)))]
		[TestCase(-1, ((UInt16)(100)), ((UInt16)(1)))]
		[TestCase(-1, ((UInt16)(100)), ((UInt16)(100)))]
		[TestCase(-1, ((UInt16)(100)), ((UInt16)(10000)))]
		[TestCase(-1, ((UInt16)(10000)), ((UInt16)(0)))]
		[TestCase(-1, ((UInt16)(10000)), ((UInt16)(1)))]
		[TestCase(-1, ((UInt16)(10000)), ((UInt16)(100)))]
		[TestCase(-1, ((UInt16)(10000)), ((UInt16)(10000)))]
		[TestCase(100, ((UInt16)(0)), ((UInt16)(0)))]
		[TestCase(100, ((UInt16)(0)), ((UInt16)(1)))]
		[TestCase(100, ((UInt16)(0)), ((UInt16)(100)))]
		[TestCase(100, ((UInt16)(0)), ((UInt16)(10000)))]
		[TestCase(100, ((UInt16)(1)), ((UInt16)(0)))]
		[TestCase(100, ((UInt16)(1)), ((UInt16)(1)))]
		[TestCase(100, ((UInt16)(1)), ((UInt16)(100)))]
		[TestCase(100, ((UInt16)(1)), ((UInt16)(10000)))]
		[TestCase(100, ((UInt16)(100)), ((UInt16)(0)))]
		[TestCase(100, ((UInt16)(100)), ((UInt16)(1)))]
		[TestCase(100, ((UInt16)(100)), ((UInt16)(100)))]
		[TestCase(100, ((UInt16)(100)), ((UInt16)(10000)))]
		[TestCase(100, ((UInt16)(10000)), ((UInt16)(0)))]
		[TestCase(100, ((UInt16)(10000)), ((UInt16)(1)))]
		[TestCase(100, ((UInt16)(10000)), ((UInt16)(100)))]
		[TestCase(100, ((UInt16)(10000)), ((UInt16)(10000)))]
		[TestCase(-100, ((UInt16)(0)), ((UInt16)(0)))]
		[TestCase(-100, ((UInt16)(0)), ((UInt16)(1)))]
		[TestCase(-100, ((UInt16)(0)), ((UInt16)(100)))]
		[TestCase(-100, ((UInt16)(0)), ((UInt16)(10000)))]
		[TestCase(-100, ((UInt16)(1)), ((UInt16)(0)))]
		[TestCase(-100, ((UInt16)(1)), ((UInt16)(1)))]
		[TestCase(-100, ((UInt16)(1)), ((UInt16)(100)))]
		[TestCase(-100, ((UInt16)(1)), ((UInt16)(10000)))]
		[TestCase(-100, ((UInt16)(100)), ((UInt16)(0)))]
		[TestCase(-100, ((UInt16)(100)), ((UInt16)(1)))]
		[TestCase(-100, ((UInt16)(100)), ((UInt16)(100)))]
		[TestCase(-100, ((UInt16)(100)), ((UInt16)(10000)))]
		[TestCase(-100, ((UInt16)(10000)), ((UInt16)(0)))]
		[TestCase(-100, ((UInt16)(10000)), ((UInt16)(1)))]
		[TestCase(-100, ((UInt16)(10000)), ((UInt16)(100)))]
		[TestCase(-100, ((UInt16)(10000)), ((UInt16)(10000)))]
		[TestCase(10000, ((UInt16)(0)), ((UInt16)(0)))]
		[TestCase(10000, ((UInt16)(0)), ((UInt16)(1)))]
		[TestCase(10000, ((UInt16)(0)), ((UInt16)(100)))]
		[TestCase(10000, ((UInt16)(0)), ((UInt16)(10000)))]
		[TestCase(10000, ((UInt16)(1)), ((UInt16)(0)))]
		[TestCase(10000, ((UInt16)(1)), ((UInt16)(1)))]
		[TestCase(10000, ((UInt16)(1)), ((UInt16)(100)))]
		[TestCase(10000, ((UInt16)(1)), ((UInt16)(10000)))]
		[TestCase(10000, ((UInt16)(100)), ((UInt16)(0)))]
		[TestCase(10000, ((UInt16)(100)), ((UInt16)(1)))]
		[TestCase(10000, ((UInt16)(100)), ((UInt16)(100)))]
		[TestCase(10000, ((UInt16)(100)), ((UInt16)(10000)))]
		[TestCase(10000, ((UInt16)(10000)), ((UInt16)(0)))]
		[TestCase(10000, ((UInt16)(10000)), ((UInt16)(1)))]
		[TestCase(10000, ((UInt16)(10000)), ((UInt16)(100)))]
		[TestCase(10000, ((UInt16)(10000)), ((UInt16)(10000)))]
		[TestCase(-10000, ((UInt16)(0)), ((UInt16)(0)))]
		[TestCase(-10000, ((UInt16)(0)), ((UInt16)(1)))]
		[TestCase(-10000, ((UInt16)(0)), ((UInt16)(100)))]
		[TestCase(-10000, ((UInt16)(0)), ((UInt16)(10000)))]
		[TestCase(-10000, ((UInt16)(1)), ((UInt16)(0)))]
		[TestCase(-10000, ((UInt16)(1)), ((UInt16)(1)))]
		[TestCase(-10000, ((UInt16)(1)), ((UInt16)(100)))]
		[TestCase(-10000, ((UInt16)(1)), ((UInt16)(10000)))]
		[TestCase(-10000, ((UInt16)(100)), ((UInt16)(0)))]
		[TestCase(-10000, ((UInt16)(100)), ((UInt16)(1)))]
		[TestCase(-10000, ((UInt16)(100)), ((UInt16)(100)))]
		[TestCase(-10000, ((UInt16)(100)), ((UInt16)(10000)))]
		[TestCase(-10000, ((UInt16)(10000)), ((UInt16)(0)))]
		[TestCase(-10000, ((UInt16)(10000)), ((UInt16)(1)))]
		[TestCase(-10000, ((UInt16)(10000)), ((UInt16)(100)))]
		[TestCase(-10000, ((UInt16)(10000)), ((UInt16)(10000)))]
		[TestCase(100000000, ((UInt16)(0)), ((UInt16)(0)))]
		[TestCase(100000000, ((UInt16)(0)), ((UInt16)(1)))]
		[TestCase(100000000, ((UInt16)(0)), ((UInt16)(100)))]
		[TestCase(100000000, ((UInt16)(0)), ((UInt16)(10000)))]
		[TestCase(100000000, ((UInt16)(1)), ((UInt16)(0)))]
		[TestCase(100000000, ((UInt16)(1)), ((UInt16)(1)))]
		[TestCase(100000000, ((UInt16)(1)), ((UInt16)(100)))]
		[TestCase(100000000, ((UInt16)(1)), ((UInt16)(10000)))]
		[TestCase(100000000, ((UInt16)(100)), ((UInt16)(0)))]
		[TestCase(100000000, ((UInt16)(100)), ((UInt16)(1)))]
		[TestCase(100000000, ((UInt16)(100)), ((UInt16)(100)))]
		[TestCase(100000000, ((UInt16)(100)), ((UInt16)(10000)))]
		[TestCase(100000000, ((UInt16)(10000)), ((UInt16)(0)))]
		[TestCase(100000000, ((UInt16)(10000)), ((UInt16)(1)))]
		[TestCase(100000000, ((UInt16)(10000)), ((UInt16)(100)))]
		[TestCase(100000000, ((UInt16)(10000)), ((UInt16)(10000)))]
		[TestCase(-100000000, ((UInt16)(0)), ((UInt16)(0)))]
		[TestCase(-100000000, ((UInt16)(0)), ((UInt16)(1)))]
		[TestCase(-100000000, ((UInt16)(0)), ((UInt16)(100)))]
		[TestCase(-100000000, ((UInt16)(0)), ((UInt16)(10000)))]
		[TestCase(-100000000, ((UInt16)(1)), ((UInt16)(0)))]
		[TestCase(-100000000, ((UInt16)(1)), ((UInt16)(1)))]
		[TestCase(-100000000, ((UInt16)(1)), ((UInt16)(100)))]
		[TestCase(-100000000, ((UInt16)(1)), ((UInt16)(10000)))]
		[TestCase(-100000000, ((UInt16)(100)), ((UInt16)(0)))]
		[TestCase(-100000000, ((UInt16)(100)), ((UInt16)(1)))]
		[TestCase(-100000000, ((UInt16)(100)), ((UInt16)(100)))]
		[TestCase(-100000000, ((UInt16)(100)), ((UInt16)(10000)))]
		[TestCase(-100000000, ((UInt16)(10000)), ((UInt16)(0)))]
		[TestCase(-100000000, ((UInt16)(10000)), ((UInt16)(1)))]
		[TestCase(-100000000, ((UInt16)(10000)), ((UInt16)(100)))]
		[TestCase(-100000000, ((UInt16)(10000)), ((UInt16)(10000)))]
		public void TestClampInt32UInt16(Int32 value, UInt16 minInclusive, UInt16 maxInclusive)
        {
            BigInteger expected = 0, actual = 0;
            bool expectedException = false, actualException = false;

            try
            {
                expected = Clamp(value, minInclusive, maxInclusive);
            }
            catch (ArgumentException)
            {
                expectedException = true;
            }

            try
            {
                actual = MathTrifles.Clamp(value, minInclusive, maxInclusive);
            }
            catch (ArgumentException)
            {
                actualException = true;
            }

            Assert.That(actualException, Is.EqualTo(expectedException));

            if (!expectedException)
            {
                Assert.That(actual, Is.EqualTo(expected));
            }
        }


		[TestCase(0, 0, 0)]
		[TestCase(0, 0, 1)]
		[TestCase(0, 0, -1)]
		[TestCase(0, 0, 100)]
		[TestCase(0, 0, -100)]
		[TestCase(0, 0, 10000)]
		[TestCase(0, 0, -10000)]
		[TestCase(0, 0, 100000000)]
		[TestCase(0, 0, -100000000)]
		[TestCase(0, 1, 0)]
		[TestCase(0, 1, 1)]
		[TestCase(0, 1, -1)]
		[TestCase(0, 1, 100)]
		[TestCase(0, 1, -100)]
		[TestCase(0, 1, 10000)]
		[TestCase(0, 1, -10000)]
		[TestCase(0, 1, 100000000)]
		[TestCase(0, 1, -100000000)]
		[TestCase(0, -1, 0)]
		[TestCase(0, -1, 1)]
		[TestCase(0, -1, -1)]
		[TestCase(0, -1, 100)]
		[TestCase(0, -1, -100)]
		[TestCase(0, -1, 10000)]
		[TestCase(0, -1, -10000)]
		[TestCase(0, -1, 100000000)]
		[TestCase(0, -1, -100000000)]
		[TestCase(0, 100, 0)]
		[TestCase(0, 100, 1)]
		[TestCase(0, 100, -1)]
		[TestCase(0, 100, 100)]
		[TestCase(0, 100, -100)]
		[TestCase(0, 100, 10000)]
		[TestCase(0, 100, -10000)]
		[TestCase(0, 100, 100000000)]
		[TestCase(0, 100, -100000000)]
		[TestCase(0, -100, 0)]
		[TestCase(0, -100, 1)]
		[TestCase(0, -100, -1)]
		[TestCase(0, -100, 100)]
		[TestCase(0, -100, -100)]
		[TestCase(0, -100, 10000)]
		[TestCase(0, -100, -10000)]
		[TestCase(0, -100, 100000000)]
		[TestCase(0, -100, -100000000)]
		[TestCase(0, 10000, 0)]
		[TestCase(0, 10000, 1)]
		[TestCase(0, 10000, -1)]
		[TestCase(0, 10000, 100)]
		[TestCase(0, 10000, -100)]
		[TestCase(0, 10000, 10000)]
		[TestCase(0, 10000, -10000)]
		[TestCase(0, 10000, 100000000)]
		[TestCase(0, 10000, -100000000)]
		[TestCase(0, -10000, 0)]
		[TestCase(0, -10000, 1)]
		[TestCase(0, -10000, -1)]
		[TestCase(0, -10000, 100)]
		[TestCase(0, -10000, -100)]
		[TestCase(0, -10000, 10000)]
		[TestCase(0, -10000, -10000)]
		[TestCase(0, -10000, 100000000)]
		[TestCase(0, -10000, -100000000)]
		[TestCase(0, 100000000, 0)]
		[TestCase(0, 100000000, 1)]
		[TestCase(0, 100000000, -1)]
		[TestCase(0, 100000000, 100)]
		[TestCase(0, 100000000, -100)]
		[TestCase(0, 100000000, 10000)]
		[TestCase(0, 100000000, -10000)]
		[TestCase(0, 100000000, 100000000)]
		[TestCase(0, 100000000, -100000000)]
		[TestCase(0, -100000000, 0)]
		[TestCase(0, -100000000, 1)]
		[TestCase(0, -100000000, -1)]
		[TestCase(0, -100000000, 100)]
		[TestCase(0, -100000000, -100)]
		[TestCase(0, -100000000, 10000)]
		[TestCase(0, -100000000, -10000)]
		[TestCase(0, -100000000, 100000000)]
		[TestCase(0, -100000000, -100000000)]
		[TestCase(1, 0, 0)]
		[TestCase(1, 0, 1)]
		[TestCase(1, 0, -1)]
		[TestCase(1, 0, 100)]
		[TestCase(1, 0, -100)]
		[TestCase(1, 0, 10000)]
		[TestCase(1, 0, -10000)]
		[TestCase(1, 0, 100000000)]
		[TestCase(1, 0, -100000000)]
		[TestCase(1, 1, 0)]
		[TestCase(1, 1, 1)]
		[TestCase(1, 1, -1)]
		[TestCase(1, 1, 100)]
		[TestCase(1, 1, -100)]
		[TestCase(1, 1, 10000)]
		[TestCase(1, 1, -10000)]
		[TestCase(1, 1, 100000000)]
		[TestCase(1, 1, -100000000)]
		[TestCase(1, -1, 0)]
		[TestCase(1, -1, 1)]
		[TestCase(1, -1, -1)]
		[TestCase(1, -1, 100)]
		[TestCase(1, -1, -100)]
		[TestCase(1, -1, 10000)]
		[TestCase(1, -1, -10000)]
		[TestCase(1, -1, 100000000)]
		[TestCase(1, -1, -100000000)]
		[TestCase(1, 100, 0)]
		[TestCase(1, 100, 1)]
		[TestCase(1, 100, -1)]
		[TestCase(1, 100, 100)]
		[TestCase(1, 100, -100)]
		[TestCase(1, 100, 10000)]
		[TestCase(1, 100, -10000)]
		[TestCase(1, 100, 100000000)]
		[TestCase(1, 100, -100000000)]
		[TestCase(1, -100, 0)]
		[TestCase(1, -100, 1)]
		[TestCase(1, -100, -1)]
		[TestCase(1, -100, 100)]
		[TestCase(1, -100, -100)]
		[TestCase(1, -100, 10000)]
		[TestCase(1, -100, -10000)]
		[TestCase(1, -100, 100000000)]
		[TestCase(1, -100, -100000000)]
		[TestCase(1, 10000, 0)]
		[TestCase(1, 10000, 1)]
		[TestCase(1, 10000, -1)]
		[TestCase(1, 10000, 100)]
		[TestCase(1, 10000, -100)]
		[TestCase(1, 10000, 10000)]
		[TestCase(1, 10000, -10000)]
		[TestCase(1, 10000, 100000000)]
		[TestCase(1, 10000, -100000000)]
		[TestCase(1, -10000, 0)]
		[TestCase(1, -10000, 1)]
		[TestCase(1, -10000, -1)]
		[TestCase(1, -10000, 100)]
		[TestCase(1, -10000, -100)]
		[TestCase(1, -10000, 10000)]
		[TestCase(1, -10000, -10000)]
		[TestCase(1, -10000, 100000000)]
		[TestCase(1, -10000, -100000000)]
		[TestCase(1, 100000000, 0)]
		[TestCase(1, 100000000, 1)]
		[TestCase(1, 100000000, -1)]
		[TestCase(1, 100000000, 100)]
		[TestCase(1, 100000000, -100)]
		[TestCase(1, 100000000, 10000)]
		[TestCase(1, 100000000, -10000)]
		[TestCase(1, 100000000, 100000000)]
		[TestCase(1, 100000000, -100000000)]
		[TestCase(1, -100000000, 0)]
		[TestCase(1, -100000000, 1)]
		[TestCase(1, -100000000, -1)]
		[TestCase(1, -100000000, 100)]
		[TestCase(1, -100000000, -100)]
		[TestCase(1, -100000000, 10000)]
		[TestCase(1, -100000000, -10000)]
		[TestCase(1, -100000000, 100000000)]
		[TestCase(1, -100000000, -100000000)]
		[TestCase(-1, 0, 0)]
		[TestCase(-1, 0, 1)]
		[TestCase(-1, 0, -1)]
		[TestCase(-1, 0, 100)]
		[TestCase(-1, 0, -100)]
		[TestCase(-1, 0, 10000)]
		[TestCase(-1, 0, -10000)]
		[TestCase(-1, 0, 100000000)]
		[TestCase(-1, 0, -100000000)]
		[TestCase(-1, 1, 0)]
		[TestCase(-1, 1, 1)]
		[TestCase(-1, 1, -1)]
		[TestCase(-1, 1, 100)]
		[TestCase(-1, 1, -100)]
		[TestCase(-1, 1, 10000)]
		[TestCase(-1, 1, -10000)]
		[TestCase(-1, 1, 100000000)]
		[TestCase(-1, 1, -100000000)]
		[TestCase(-1, -1, 0)]
		[TestCase(-1, -1, 1)]
		[TestCase(-1, -1, -1)]
		[TestCase(-1, -1, 100)]
		[TestCase(-1, -1, -100)]
		[TestCase(-1, -1, 10000)]
		[TestCase(-1, -1, -10000)]
		[TestCase(-1, -1, 100000000)]
		[TestCase(-1, -1, -100000000)]
		[TestCase(-1, 100, 0)]
		[TestCase(-1, 100, 1)]
		[TestCase(-1, 100, -1)]
		[TestCase(-1, 100, 100)]
		[TestCase(-1, 100, -100)]
		[TestCase(-1, 100, 10000)]
		[TestCase(-1, 100, -10000)]
		[TestCase(-1, 100, 100000000)]
		[TestCase(-1, 100, -100000000)]
		[TestCase(-1, -100, 0)]
		[TestCase(-1, -100, 1)]
		[TestCase(-1, -100, -1)]
		[TestCase(-1, -100, 100)]
		[TestCase(-1, -100, -100)]
		[TestCase(-1, -100, 10000)]
		[TestCase(-1, -100, -10000)]
		[TestCase(-1, -100, 100000000)]
		[TestCase(-1, -100, -100000000)]
		[TestCase(-1, 10000, 0)]
		[TestCase(-1, 10000, 1)]
		[TestCase(-1, 10000, -1)]
		[TestCase(-1, 10000, 100)]
		[TestCase(-1, 10000, -100)]
		[TestCase(-1, 10000, 10000)]
		[TestCase(-1, 10000, -10000)]
		[TestCase(-1, 10000, 100000000)]
		[TestCase(-1, 10000, -100000000)]
		[TestCase(-1, -10000, 0)]
		[TestCase(-1, -10000, 1)]
		[TestCase(-1, -10000, -1)]
		[TestCase(-1, -10000, 100)]
		[TestCase(-1, -10000, -100)]
		[TestCase(-1, -10000, 10000)]
		[TestCase(-1, -10000, -10000)]
		[TestCase(-1, -10000, 100000000)]
		[TestCase(-1, -10000, -100000000)]
		[TestCase(-1, 100000000, 0)]
		[TestCase(-1, 100000000, 1)]
		[TestCase(-1, 100000000, -1)]
		[TestCase(-1, 100000000, 100)]
		[TestCase(-1, 100000000, -100)]
		[TestCase(-1, 100000000, 10000)]
		[TestCase(-1, 100000000, -10000)]
		[TestCase(-1, 100000000, 100000000)]
		[TestCase(-1, 100000000, -100000000)]
		[TestCase(-1, -100000000, 0)]
		[TestCase(-1, -100000000, 1)]
		[TestCase(-1, -100000000, -1)]
		[TestCase(-1, -100000000, 100)]
		[TestCase(-1, -100000000, -100)]
		[TestCase(-1, -100000000, 10000)]
		[TestCase(-1, -100000000, -10000)]
		[TestCase(-1, -100000000, 100000000)]
		[TestCase(-1, -100000000, -100000000)]
		[TestCase(100, 0, 0)]
		[TestCase(100, 0, 1)]
		[TestCase(100, 0, -1)]
		[TestCase(100, 0, 100)]
		[TestCase(100, 0, -100)]
		[TestCase(100, 0, 10000)]
		[TestCase(100, 0, -10000)]
		[TestCase(100, 0, 100000000)]
		[TestCase(100, 0, -100000000)]
		[TestCase(100, 1, 0)]
		[TestCase(100, 1, 1)]
		[TestCase(100, 1, -1)]
		[TestCase(100, 1, 100)]
		[TestCase(100, 1, -100)]
		[TestCase(100, 1, 10000)]
		[TestCase(100, 1, -10000)]
		[TestCase(100, 1, 100000000)]
		[TestCase(100, 1, -100000000)]
		[TestCase(100, -1, 0)]
		[TestCase(100, -1, 1)]
		[TestCase(100, -1, -1)]
		[TestCase(100, -1, 100)]
		[TestCase(100, -1, -100)]
		[TestCase(100, -1, 10000)]
		[TestCase(100, -1, -10000)]
		[TestCase(100, -1, 100000000)]
		[TestCase(100, -1, -100000000)]
		[TestCase(100, 100, 0)]
		[TestCase(100, 100, 1)]
		[TestCase(100, 100, -1)]
		[TestCase(100, 100, 100)]
		[TestCase(100, 100, -100)]
		[TestCase(100, 100, 10000)]
		[TestCase(100, 100, -10000)]
		[TestCase(100, 100, 100000000)]
		[TestCase(100, 100, -100000000)]
		[TestCase(100, -100, 0)]
		[TestCase(100, -100, 1)]
		[TestCase(100, -100, -1)]
		[TestCase(100, -100, 100)]
		[TestCase(100, -100, -100)]
		[TestCase(100, -100, 10000)]
		[TestCase(100, -100, -10000)]
		[TestCase(100, -100, 100000000)]
		[TestCase(100, -100, -100000000)]
		[TestCase(100, 10000, 0)]
		[TestCase(100, 10000, 1)]
		[TestCase(100, 10000, -1)]
		[TestCase(100, 10000, 100)]
		[TestCase(100, 10000, -100)]
		[TestCase(100, 10000, 10000)]
		[TestCase(100, 10000, -10000)]
		[TestCase(100, 10000, 100000000)]
		[TestCase(100, 10000, -100000000)]
		[TestCase(100, -10000, 0)]
		[TestCase(100, -10000, 1)]
		[TestCase(100, -10000, -1)]
		[TestCase(100, -10000, 100)]
		[TestCase(100, -10000, -100)]
		[TestCase(100, -10000, 10000)]
		[TestCase(100, -10000, -10000)]
		[TestCase(100, -10000, 100000000)]
		[TestCase(100, -10000, -100000000)]
		[TestCase(100, 100000000, 0)]
		[TestCase(100, 100000000, 1)]
		[TestCase(100, 100000000, -1)]
		[TestCase(100, 100000000, 100)]
		[TestCase(100, 100000000, -100)]
		[TestCase(100, 100000000, 10000)]
		[TestCase(100, 100000000, -10000)]
		[TestCase(100, 100000000, 100000000)]
		[TestCase(100, 100000000, -100000000)]
		[TestCase(100, -100000000, 0)]
		[TestCase(100, -100000000, 1)]
		[TestCase(100, -100000000, -1)]
		[TestCase(100, -100000000, 100)]
		[TestCase(100, -100000000, -100)]
		[TestCase(100, -100000000, 10000)]
		[TestCase(100, -100000000, -10000)]
		[TestCase(100, -100000000, 100000000)]
		[TestCase(100, -100000000, -100000000)]
		[TestCase(-100, 0, 0)]
		[TestCase(-100, 0, 1)]
		[TestCase(-100, 0, -1)]
		[TestCase(-100, 0, 100)]
		[TestCase(-100, 0, -100)]
		[TestCase(-100, 0, 10000)]
		[TestCase(-100, 0, -10000)]
		[TestCase(-100, 0, 100000000)]
		[TestCase(-100, 0, -100000000)]
		[TestCase(-100, 1, 0)]
		[TestCase(-100, 1, 1)]
		[TestCase(-100, 1, -1)]
		[TestCase(-100, 1, 100)]
		[TestCase(-100, 1, -100)]
		[TestCase(-100, 1, 10000)]
		[TestCase(-100, 1, -10000)]
		[TestCase(-100, 1, 100000000)]
		[TestCase(-100, 1, -100000000)]
		[TestCase(-100, -1, 0)]
		[TestCase(-100, -1, 1)]
		[TestCase(-100, -1, -1)]
		[TestCase(-100, -1, 100)]
		[TestCase(-100, -1, -100)]
		[TestCase(-100, -1, 10000)]
		[TestCase(-100, -1, -10000)]
		[TestCase(-100, -1, 100000000)]
		[TestCase(-100, -1, -100000000)]
		[TestCase(-100, 100, 0)]
		[TestCase(-100, 100, 1)]
		[TestCase(-100, 100, -1)]
		[TestCase(-100, 100, 100)]
		[TestCase(-100, 100, -100)]
		[TestCase(-100, 100, 10000)]
		[TestCase(-100, 100, -10000)]
		[TestCase(-100, 100, 100000000)]
		[TestCase(-100, 100, -100000000)]
		[TestCase(-100, -100, 0)]
		[TestCase(-100, -100, 1)]
		[TestCase(-100, -100, -1)]
		[TestCase(-100, -100, 100)]
		[TestCase(-100, -100, -100)]
		[TestCase(-100, -100, 10000)]
		[TestCase(-100, -100, -10000)]
		[TestCase(-100, -100, 100000000)]
		[TestCase(-100, -100, -100000000)]
		[TestCase(-100, 10000, 0)]
		[TestCase(-100, 10000, 1)]
		[TestCase(-100, 10000, -1)]
		[TestCase(-100, 10000, 100)]
		[TestCase(-100, 10000, -100)]
		[TestCase(-100, 10000, 10000)]
		[TestCase(-100, 10000, -10000)]
		[TestCase(-100, 10000, 100000000)]
		[TestCase(-100, 10000, -100000000)]
		[TestCase(-100, -10000, 0)]
		[TestCase(-100, -10000, 1)]
		[TestCase(-100, -10000, -1)]
		[TestCase(-100, -10000, 100)]
		[TestCase(-100, -10000, -100)]
		[TestCase(-100, -10000, 10000)]
		[TestCase(-100, -10000, -10000)]
		[TestCase(-100, -10000, 100000000)]
		[TestCase(-100, -10000, -100000000)]
		[TestCase(-100, 100000000, 0)]
		[TestCase(-100, 100000000, 1)]
		[TestCase(-100, 100000000, -1)]
		[TestCase(-100, 100000000, 100)]
		[TestCase(-100, 100000000, -100)]
		[TestCase(-100, 100000000, 10000)]
		[TestCase(-100, 100000000, -10000)]
		[TestCase(-100, 100000000, 100000000)]
		[TestCase(-100, 100000000, -100000000)]
		[TestCase(-100, -100000000, 0)]
		[TestCase(-100, -100000000, 1)]
		[TestCase(-100, -100000000, -1)]
		[TestCase(-100, -100000000, 100)]
		[TestCase(-100, -100000000, -100)]
		[TestCase(-100, -100000000, 10000)]
		[TestCase(-100, -100000000, -10000)]
		[TestCase(-100, -100000000, 100000000)]
		[TestCase(-100, -100000000, -100000000)]
		[TestCase(10000, 0, 0)]
		[TestCase(10000, 0, 1)]
		[TestCase(10000, 0, -1)]
		[TestCase(10000, 0, 100)]
		[TestCase(10000, 0, -100)]
		[TestCase(10000, 0, 10000)]
		[TestCase(10000, 0, -10000)]
		[TestCase(10000, 0, 100000000)]
		[TestCase(10000, 0, -100000000)]
		[TestCase(10000, 1, 0)]
		[TestCase(10000, 1, 1)]
		[TestCase(10000, 1, -1)]
		[TestCase(10000, 1, 100)]
		[TestCase(10000, 1, -100)]
		[TestCase(10000, 1, 10000)]
		[TestCase(10000, 1, -10000)]
		[TestCase(10000, 1, 100000000)]
		[TestCase(10000, 1, -100000000)]
		[TestCase(10000, -1, 0)]
		[TestCase(10000, -1, 1)]
		[TestCase(10000, -1, -1)]
		[TestCase(10000, -1, 100)]
		[TestCase(10000, -1, -100)]
		[TestCase(10000, -1, 10000)]
		[TestCase(10000, -1, -10000)]
		[TestCase(10000, -1, 100000000)]
		[TestCase(10000, -1, -100000000)]
		[TestCase(10000, 100, 0)]
		[TestCase(10000, 100, 1)]
		[TestCase(10000, 100, -1)]
		[TestCase(10000, 100, 100)]
		[TestCase(10000, 100, -100)]
		[TestCase(10000, 100, 10000)]
		[TestCase(10000, 100, -10000)]
		[TestCase(10000, 100, 100000000)]
		[TestCase(10000, 100, -100000000)]
		[TestCase(10000, -100, 0)]
		[TestCase(10000, -100, 1)]
		[TestCase(10000, -100, -1)]
		[TestCase(10000, -100, 100)]
		[TestCase(10000, -100, -100)]
		[TestCase(10000, -100, 10000)]
		[TestCase(10000, -100, -10000)]
		[TestCase(10000, -100, 100000000)]
		[TestCase(10000, -100, -100000000)]
		[TestCase(10000, 10000, 0)]
		[TestCase(10000, 10000, 1)]
		[TestCase(10000, 10000, -1)]
		[TestCase(10000, 10000, 100)]
		[TestCase(10000, 10000, -100)]
		[TestCase(10000, 10000, 10000)]
		[TestCase(10000, 10000, -10000)]
		[TestCase(10000, 10000, 100000000)]
		[TestCase(10000, 10000, -100000000)]
		[TestCase(10000, -10000, 0)]
		[TestCase(10000, -10000, 1)]
		[TestCase(10000, -10000, -1)]
		[TestCase(10000, -10000, 100)]
		[TestCase(10000, -10000, -100)]
		[TestCase(10000, -10000, 10000)]
		[TestCase(10000, -10000, -10000)]
		[TestCase(10000, -10000, 100000000)]
		[TestCase(10000, -10000, -100000000)]
		[TestCase(10000, 100000000, 0)]
		[TestCase(10000, 100000000, 1)]
		[TestCase(10000, 100000000, -1)]
		[TestCase(10000, 100000000, 100)]
		[TestCase(10000, 100000000, -100)]
		[TestCase(10000, 100000000, 10000)]
		[TestCase(10000, 100000000, -10000)]
		[TestCase(10000, 100000000, 100000000)]
		[TestCase(10000, 100000000, -100000000)]
		[TestCase(10000, -100000000, 0)]
		[TestCase(10000, -100000000, 1)]
		[TestCase(10000, -100000000, -1)]
		[TestCase(10000, -100000000, 100)]
		[TestCase(10000, -100000000, -100)]
		[TestCase(10000, -100000000, 10000)]
		[TestCase(10000, -100000000, -10000)]
		[TestCase(10000, -100000000, 100000000)]
		[TestCase(10000, -100000000, -100000000)]
		[TestCase(-10000, 0, 0)]
		[TestCase(-10000, 0, 1)]
		[TestCase(-10000, 0, -1)]
		[TestCase(-10000, 0, 100)]
		[TestCase(-10000, 0, -100)]
		[TestCase(-10000, 0, 10000)]
		[TestCase(-10000, 0, -10000)]
		[TestCase(-10000, 0, 100000000)]
		[TestCase(-10000, 0, -100000000)]
		[TestCase(-10000, 1, 0)]
		[TestCase(-10000, 1, 1)]
		[TestCase(-10000, 1, -1)]
		[TestCase(-10000, 1, 100)]
		[TestCase(-10000, 1, -100)]
		[TestCase(-10000, 1, 10000)]
		[TestCase(-10000, 1, -10000)]
		[TestCase(-10000, 1, 100000000)]
		[TestCase(-10000, 1, -100000000)]
		[TestCase(-10000, -1, 0)]
		[TestCase(-10000, -1, 1)]
		[TestCase(-10000, -1, -1)]
		[TestCase(-10000, -1, 100)]
		[TestCase(-10000, -1, -100)]
		[TestCase(-10000, -1, 10000)]
		[TestCase(-10000, -1, -10000)]
		[TestCase(-10000, -1, 100000000)]
		[TestCase(-10000, -1, -100000000)]
		[TestCase(-10000, 100, 0)]
		[TestCase(-10000, 100, 1)]
		[TestCase(-10000, 100, -1)]
		[TestCase(-10000, 100, 100)]
		[TestCase(-10000, 100, -100)]
		[TestCase(-10000, 100, 10000)]
		[TestCase(-10000, 100, -10000)]
		[TestCase(-10000, 100, 100000000)]
		[TestCase(-10000, 100, -100000000)]
		[TestCase(-10000, -100, 0)]
		[TestCase(-10000, -100, 1)]
		[TestCase(-10000, -100, -1)]
		[TestCase(-10000, -100, 100)]
		[TestCase(-10000, -100, -100)]
		[TestCase(-10000, -100, 10000)]
		[TestCase(-10000, -100, -10000)]
		[TestCase(-10000, -100, 100000000)]
		[TestCase(-10000, -100, -100000000)]
		[TestCase(-10000, 10000, 0)]
		[TestCase(-10000, 10000, 1)]
		[TestCase(-10000, 10000, -1)]
		[TestCase(-10000, 10000, 100)]
		[TestCase(-10000, 10000, -100)]
		[TestCase(-10000, 10000, 10000)]
		[TestCase(-10000, 10000, -10000)]
		[TestCase(-10000, 10000, 100000000)]
		[TestCase(-10000, 10000, -100000000)]
		[TestCase(-10000, -10000, 0)]
		[TestCase(-10000, -10000, 1)]
		[TestCase(-10000, -10000, -1)]
		[TestCase(-10000, -10000, 100)]
		[TestCase(-10000, -10000, -100)]
		[TestCase(-10000, -10000, 10000)]
		[TestCase(-10000, -10000, -10000)]
		[TestCase(-10000, -10000, 100000000)]
		[TestCase(-10000, -10000, -100000000)]
		[TestCase(-10000, 100000000, 0)]
		[TestCase(-10000, 100000000, 1)]
		[TestCase(-10000, 100000000, -1)]
		[TestCase(-10000, 100000000, 100)]
		[TestCase(-10000, 100000000, -100)]
		[TestCase(-10000, 100000000, 10000)]
		[TestCase(-10000, 100000000, -10000)]
		[TestCase(-10000, 100000000, 100000000)]
		[TestCase(-10000, 100000000, -100000000)]
		[TestCase(-10000, -100000000, 0)]
		[TestCase(-10000, -100000000, 1)]
		[TestCase(-10000, -100000000, -1)]
		[TestCase(-10000, -100000000, 100)]
		[TestCase(-10000, -100000000, -100)]
		[TestCase(-10000, -100000000, 10000)]
		[TestCase(-10000, -100000000, -10000)]
		[TestCase(-10000, -100000000, 100000000)]
		[TestCase(-10000, -100000000, -100000000)]
		[TestCase(100000000, 0, 0)]
		[TestCase(100000000, 0, 1)]
		[TestCase(100000000, 0, -1)]
		[TestCase(100000000, 0, 100)]
		[TestCase(100000000, 0, -100)]
		[TestCase(100000000, 0, 10000)]
		[TestCase(100000000, 0, -10000)]
		[TestCase(100000000, 0, 100000000)]
		[TestCase(100000000, 0, -100000000)]
		[TestCase(100000000, 1, 0)]
		[TestCase(100000000, 1, 1)]
		[TestCase(100000000, 1, -1)]
		[TestCase(100000000, 1, 100)]
		[TestCase(100000000, 1, -100)]
		[TestCase(100000000, 1, 10000)]
		[TestCase(100000000, 1, -10000)]
		[TestCase(100000000, 1, 100000000)]
		[TestCase(100000000, 1, -100000000)]
		[TestCase(100000000, -1, 0)]
		[TestCase(100000000, -1, 1)]
		[TestCase(100000000, -1, -1)]
		[TestCase(100000000, -1, 100)]
		[TestCase(100000000, -1, -100)]
		[TestCase(100000000, -1, 10000)]
		[TestCase(100000000, -1, -10000)]
		[TestCase(100000000, -1, 100000000)]
		[TestCase(100000000, -1, -100000000)]
		[TestCase(100000000, 100, 0)]
		[TestCase(100000000, 100, 1)]
		[TestCase(100000000, 100, -1)]
		[TestCase(100000000, 100, 100)]
		[TestCase(100000000, 100, -100)]
		[TestCase(100000000, 100, 10000)]
		[TestCase(100000000, 100, -10000)]
		[TestCase(100000000, 100, 100000000)]
		[TestCase(100000000, 100, -100000000)]
		[TestCase(100000000, -100, 0)]
		[TestCase(100000000, -100, 1)]
		[TestCase(100000000, -100, -1)]
		[TestCase(100000000, -100, 100)]
		[TestCase(100000000, -100, -100)]
		[TestCase(100000000, -100, 10000)]
		[TestCase(100000000, -100, -10000)]
		[TestCase(100000000, -100, 100000000)]
		[TestCase(100000000, -100, -100000000)]
		[TestCase(100000000, 10000, 0)]
		[TestCase(100000000, 10000, 1)]
		[TestCase(100000000, 10000, -1)]
		[TestCase(100000000, 10000, 100)]
		[TestCase(100000000, 10000, -100)]
		[TestCase(100000000, 10000, 10000)]
		[TestCase(100000000, 10000, -10000)]
		[TestCase(100000000, 10000, 100000000)]
		[TestCase(100000000, 10000, -100000000)]
		[TestCase(100000000, -10000, 0)]
		[TestCase(100000000, -10000, 1)]
		[TestCase(100000000, -10000, -1)]
		[TestCase(100000000, -10000, 100)]
		[TestCase(100000000, -10000, -100)]
		[TestCase(100000000, -10000, 10000)]
		[TestCase(100000000, -10000, -10000)]
		[TestCase(100000000, -10000, 100000000)]
		[TestCase(100000000, -10000, -100000000)]
		[TestCase(100000000, 100000000, 0)]
		[TestCase(100000000, 100000000, 1)]
		[TestCase(100000000, 100000000, -1)]
		[TestCase(100000000, 100000000, 100)]
		[TestCase(100000000, 100000000, -100)]
		[TestCase(100000000, 100000000, 10000)]
		[TestCase(100000000, 100000000, -10000)]
		[TestCase(100000000, 100000000, 100000000)]
		[TestCase(100000000, 100000000, -100000000)]
		[TestCase(100000000, -100000000, 0)]
		[TestCase(100000000, -100000000, 1)]
		[TestCase(100000000, -100000000, -1)]
		[TestCase(100000000, -100000000, 100)]
		[TestCase(100000000, -100000000, -100)]
		[TestCase(100000000, -100000000, 10000)]
		[TestCase(100000000, -100000000, -10000)]
		[TestCase(100000000, -100000000, 100000000)]
		[TestCase(100000000, -100000000, -100000000)]
		[TestCase(-100000000, 0, 0)]
		[TestCase(-100000000, 0, 1)]
		[TestCase(-100000000, 0, -1)]
		[TestCase(-100000000, 0, 100)]
		[TestCase(-100000000, 0, -100)]
		[TestCase(-100000000, 0, 10000)]
		[TestCase(-100000000, 0, -10000)]
		[TestCase(-100000000, 0, 100000000)]
		[TestCase(-100000000, 0, -100000000)]
		[TestCase(-100000000, 1, 0)]
		[TestCase(-100000000, 1, 1)]
		[TestCase(-100000000, 1, -1)]
		[TestCase(-100000000, 1, 100)]
		[TestCase(-100000000, 1, -100)]
		[TestCase(-100000000, 1, 10000)]
		[TestCase(-100000000, 1, -10000)]
		[TestCase(-100000000, 1, 100000000)]
		[TestCase(-100000000, 1, -100000000)]
		[TestCase(-100000000, -1, 0)]
		[TestCase(-100000000, -1, 1)]
		[TestCase(-100000000, -1, -1)]
		[TestCase(-100000000, -1, 100)]
		[TestCase(-100000000, -1, -100)]
		[TestCase(-100000000, -1, 10000)]
		[TestCase(-100000000, -1, -10000)]
		[TestCase(-100000000, -1, 100000000)]
		[TestCase(-100000000, -1, -100000000)]
		[TestCase(-100000000, 100, 0)]
		[TestCase(-100000000, 100, 1)]
		[TestCase(-100000000, 100, -1)]
		[TestCase(-100000000, 100, 100)]
		[TestCase(-100000000, 100, -100)]
		[TestCase(-100000000, 100, 10000)]
		[TestCase(-100000000, 100, -10000)]
		[TestCase(-100000000, 100, 100000000)]
		[TestCase(-100000000, 100, -100000000)]
		[TestCase(-100000000, -100, 0)]
		[TestCase(-100000000, -100, 1)]
		[TestCase(-100000000, -100, -1)]
		[TestCase(-100000000, -100, 100)]
		[TestCase(-100000000, -100, -100)]
		[TestCase(-100000000, -100, 10000)]
		[TestCase(-100000000, -100, -10000)]
		[TestCase(-100000000, -100, 100000000)]
		[TestCase(-100000000, -100, -100000000)]
		[TestCase(-100000000, 10000, 0)]
		[TestCase(-100000000, 10000, 1)]
		[TestCase(-100000000, 10000, -1)]
		[TestCase(-100000000, 10000, 100)]
		[TestCase(-100000000, 10000, -100)]
		[TestCase(-100000000, 10000, 10000)]
		[TestCase(-100000000, 10000, -10000)]
		[TestCase(-100000000, 10000, 100000000)]
		[TestCase(-100000000, 10000, -100000000)]
		[TestCase(-100000000, -10000, 0)]
		[TestCase(-100000000, -10000, 1)]
		[TestCase(-100000000, -10000, -1)]
		[TestCase(-100000000, -10000, 100)]
		[TestCase(-100000000, -10000, -100)]
		[TestCase(-100000000, -10000, 10000)]
		[TestCase(-100000000, -10000, -10000)]
		[TestCase(-100000000, -10000, 100000000)]
		[TestCase(-100000000, -10000, -100000000)]
		[TestCase(-100000000, 100000000, 0)]
		[TestCase(-100000000, 100000000, 1)]
		[TestCase(-100000000, 100000000, -1)]
		[TestCase(-100000000, 100000000, 100)]
		[TestCase(-100000000, 100000000, -100)]
		[TestCase(-100000000, 100000000, 10000)]
		[TestCase(-100000000, 100000000, -10000)]
		[TestCase(-100000000, 100000000, 100000000)]
		[TestCase(-100000000, 100000000, -100000000)]
		[TestCase(-100000000, -100000000, 0)]
		[TestCase(-100000000, -100000000, 1)]
		[TestCase(-100000000, -100000000, -1)]
		[TestCase(-100000000, -100000000, 100)]
		[TestCase(-100000000, -100000000, -100)]
		[TestCase(-100000000, -100000000, 10000)]
		[TestCase(-100000000, -100000000, -10000)]
		[TestCase(-100000000, -100000000, 100000000)]
		[TestCase(-100000000, -100000000, -100000000)]
		public void TestClampInt32Int32(Int32 value, Int32 minInclusive, Int32 maxInclusive)
        {
            BigInteger expected = 0, actual = 0;
            bool expectedException = false, actualException = false;

            try
            {
                expected = Clamp(value, minInclusive, maxInclusive);
            }
            catch (ArgumentException)
            {
                expectedException = true;
            }

            try
            {
                actual = MathTrifles.Clamp(value, minInclusive, maxInclusive);
            }
            catch (ArgumentException)
            {
                actualException = true;
            }

            Assert.That(actualException, Is.EqualTo(expectedException));

            if (!expectedException)
            {
                Assert.That(actual, Is.EqualTo(expected));
            }
        }


		[TestCase(0L, ((SByte)(0)), ((SByte)(0)))]
		[TestCase(0L, ((SByte)(0)), ((SByte)(1)))]
		[TestCase(0L, ((SByte)(0)), ((SByte)(-1)))]
		[TestCase(0L, ((SByte)(0)), ((SByte)(100)))]
		[TestCase(0L, ((SByte)(0)), ((SByte)(-100)))]
		[TestCase(0L, ((SByte)(1)), ((SByte)(0)))]
		[TestCase(0L, ((SByte)(1)), ((SByte)(1)))]
		[TestCase(0L, ((SByte)(1)), ((SByte)(-1)))]
		[TestCase(0L, ((SByte)(1)), ((SByte)(100)))]
		[TestCase(0L, ((SByte)(1)), ((SByte)(-100)))]
		[TestCase(0L, ((SByte)(-1)), ((SByte)(0)))]
		[TestCase(0L, ((SByte)(-1)), ((SByte)(1)))]
		[TestCase(0L, ((SByte)(-1)), ((SByte)(-1)))]
		[TestCase(0L, ((SByte)(-1)), ((SByte)(100)))]
		[TestCase(0L, ((SByte)(-1)), ((SByte)(-100)))]
		[TestCase(0L, ((SByte)(100)), ((SByte)(0)))]
		[TestCase(0L, ((SByte)(100)), ((SByte)(1)))]
		[TestCase(0L, ((SByte)(100)), ((SByte)(-1)))]
		[TestCase(0L, ((SByte)(100)), ((SByte)(100)))]
		[TestCase(0L, ((SByte)(100)), ((SByte)(-100)))]
		[TestCase(0L, ((SByte)(-100)), ((SByte)(0)))]
		[TestCase(0L, ((SByte)(-100)), ((SByte)(1)))]
		[TestCase(0L, ((SByte)(-100)), ((SByte)(-1)))]
		[TestCase(0L, ((SByte)(-100)), ((SByte)(100)))]
		[TestCase(0L, ((SByte)(-100)), ((SByte)(-100)))]
		[TestCase(1L, ((SByte)(0)), ((SByte)(0)))]
		[TestCase(1L, ((SByte)(0)), ((SByte)(1)))]
		[TestCase(1L, ((SByte)(0)), ((SByte)(-1)))]
		[TestCase(1L, ((SByte)(0)), ((SByte)(100)))]
		[TestCase(1L, ((SByte)(0)), ((SByte)(-100)))]
		[TestCase(1L, ((SByte)(1)), ((SByte)(0)))]
		[TestCase(1L, ((SByte)(1)), ((SByte)(1)))]
		[TestCase(1L, ((SByte)(1)), ((SByte)(-1)))]
		[TestCase(1L, ((SByte)(1)), ((SByte)(100)))]
		[TestCase(1L, ((SByte)(1)), ((SByte)(-100)))]
		[TestCase(1L, ((SByte)(-1)), ((SByte)(0)))]
		[TestCase(1L, ((SByte)(-1)), ((SByte)(1)))]
		[TestCase(1L, ((SByte)(-1)), ((SByte)(-1)))]
		[TestCase(1L, ((SByte)(-1)), ((SByte)(100)))]
		[TestCase(1L, ((SByte)(-1)), ((SByte)(-100)))]
		[TestCase(1L, ((SByte)(100)), ((SByte)(0)))]
		[TestCase(1L, ((SByte)(100)), ((SByte)(1)))]
		[TestCase(1L, ((SByte)(100)), ((SByte)(-1)))]
		[TestCase(1L, ((SByte)(100)), ((SByte)(100)))]
		[TestCase(1L, ((SByte)(100)), ((SByte)(-100)))]
		[TestCase(1L, ((SByte)(-100)), ((SByte)(0)))]
		[TestCase(1L, ((SByte)(-100)), ((SByte)(1)))]
		[TestCase(1L, ((SByte)(-100)), ((SByte)(-1)))]
		[TestCase(1L, ((SByte)(-100)), ((SByte)(100)))]
		[TestCase(1L, ((SByte)(-100)), ((SByte)(-100)))]
		[TestCase(-1L, ((SByte)(0)), ((SByte)(0)))]
		[TestCase(-1L, ((SByte)(0)), ((SByte)(1)))]
		[TestCase(-1L, ((SByte)(0)), ((SByte)(-1)))]
		[TestCase(-1L, ((SByte)(0)), ((SByte)(100)))]
		[TestCase(-1L, ((SByte)(0)), ((SByte)(-100)))]
		[TestCase(-1L, ((SByte)(1)), ((SByte)(0)))]
		[TestCase(-1L, ((SByte)(1)), ((SByte)(1)))]
		[TestCase(-1L, ((SByte)(1)), ((SByte)(-1)))]
		[TestCase(-1L, ((SByte)(1)), ((SByte)(100)))]
		[TestCase(-1L, ((SByte)(1)), ((SByte)(-100)))]
		[TestCase(-1L, ((SByte)(-1)), ((SByte)(0)))]
		[TestCase(-1L, ((SByte)(-1)), ((SByte)(1)))]
		[TestCase(-1L, ((SByte)(-1)), ((SByte)(-1)))]
		[TestCase(-1L, ((SByte)(-1)), ((SByte)(100)))]
		[TestCase(-1L, ((SByte)(-1)), ((SByte)(-100)))]
		[TestCase(-1L, ((SByte)(100)), ((SByte)(0)))]
		[TestCase(-1L, ((SByte)(100)), ((SByte)(1)))]
		[TestCase(-1L, ((SByte)(100)), ((SByte)(-1)))]
		[TestCase(-1L, ((SByte)(100)), ((SByte)(100)))]
		[TestCase(-1L, ((SByte)(100)), ((SByte)(-100)))]
		[TestCase(-1L, ((SByte)(-100)), ((SByte)(0)))]
		[TestCase(-1L, ((SByte)(-100)), ((SByte)(1)))]
		[TestCase(-1L, ((SByte)(-100)), ((SByte)(-1)))]
		[TestCase(-1L, ((SByte)(-100)), ((SByte)(100)))]
		[TestCase(-1L, ((SByte)(-100)), ((SByte)(-100)))]
		[TestCase(100L, ((SByte)(0)), ((SByte)(0)))]
		[TestCase(100L, ((SByte)(0)), ((SByte)(1)))]
		[TestCase(100L, ((SByte)(0)), ((SByte)(-1)))]
		[TestCase(100L, ((SByte)(0)), ((SByte)(100)))]
		[TestCase(100L, ((SByte)(0)), ((SByte)(-100)))]
		[TestCase(100L, ((SByte)(1)), ((SByte)(0)))]
		[TestCase(100L, ((SByte)(1)), ((SByte)(1)))]
		[TestCase(100L, ((SByte)(1)), ((SByte)(-1)))]
		[TestCase(100L, ((SByte)(1)), ((SByte)(100)))]
		[TestCase(100L, ((SByte)(1)), ((SByte)(-100)))]
		[TestCase(100L, ((SByte)(-1)), ((SByte)(0)))]
		[TestCase(100L, ((SByte)(-1)), ((SByte)(1)))]
		[TestCase(100L, ((SByte)(-1)), ((SByte)(-1)))]
		[TestCase(100L, ((SByte)(-1)), ((SByte)(100)))]
		[TestCase(100L, ((SByte)(-1)), ((SByte)(-100)))]
		[TestCase(100L, ((SByte)(100)), ((SByte)(0)))]
		[TestCase(100L, ((SByte)(100)), ((SByte)(1)))]
		[TestCase(100L, ((SByte)(100)), ((SByte)(-1)))]
		[TestCase(100L, ((SByte)(100)), ((SByte)(100)))]
		[TestCase(100L, ((SByte)(100)), ((SByte)(-100)))]
		[TestCase(100L, ((SByte)(-100)), ((SByte)(0)))]
		[TestCase(100L, ((SByte)(-100)), ((SByte)(1)))]
		[TestCase(100L, ((SByte)(-100)), ((SByte)(-1)))]
		[TestCase(100L, ((SByte)(-100)), ((SByte)(100)))]
		[TestCase(100L, ((SByte)(-100)), ((SByte)(-100)))]
		[TestCase(-100L, ((SByte)(0)), ((SByte)(0)))]
		[TestCase(-100L, ((SByte)(0)), ((SByte)(1)))]
		[TestCase(-100L, ((SByte)(0)), ((SByte)(-1)))]
		[TestCase(-100L, ((SByte)(0)), ((SByte)(100)))]
		[TestCase(-100L, ((SByte)(0)), ((SByte)(-100)))]
		[TestCase(-100L, ((SByte)(1)), ((SByte)(0)))]
		[TestCase(-100L, ((SByte)(1)), ((SByte)(1)))]
		[TestCase(-100L, ((SByte)(1)), ((SByte)(-1)))]
		[TestCase(-100L, ((SByte)(1)), ((SByte)(100)))]
		[TestCase(-100L, ((SByte)(1)), ((SByte)(-100)))]
		[TestCase(-100L, ((SByte)(-1)), ((SByte)(0)))]
		[TestCase(-100L, ((SByte)(-1)), ((SByte)(1)))]
		[TestCase(-100L, ((SByte)(-1)), ((SByte)(-1)))]
		[TestCase(-100L, ((SByte)(-1)), ((SByte)(100)))]
		[TestCase(-100L, ((SByte)(-1)), ((SByte)(-100)))]
		[TestCase(-100L, ((SByte)(100)), ((SByte)(0)))]
		[TestCase(-100L, ((SByte)(100)), ((SByte)(1)))]
		[TestCase(-100L, ((SByte)(100)), ((SByte)(-1)))]
		[TestCase(-100L, ((SByte)(100)), ((SByte)(100)))]
		[TestCase(-100L, ((SByte)(100)), ((SByte)(-100)))]
		[TestCase(-100L, ((SByte)(-100)), ((SByte)(0)))]
		[TestCase(-100L, ((SByte)(-100)), ((SByte)(1)))]
		[TestCase(-100L, ((SByte)(-100)), ((SByte)(-1)))]
		[TestCase(-100L, ((SByte)(-100)), ((SByte)(100)))]
		[TestCase(-100L, ((SByte)(-100)), ((SByte)(-100)))]
		[TestCase(10000L, ((SByte)(0)), ((SByte)(0)))]
		[TestCase(10000L, ((SByte)(0)), ((SByte)(1)))]
		[TestCase(10000L, ((SByte)(0)), ((SByte)(-1)))]
		[TestCase(10000L, ((SByte)(0)), ((SByte)(100)))]
		[TestCase(10000L, ((SByte)(0)), ((SByte)(-100)))]
		[TestCase(10000L, ((SByte)(1)), ((SByte)(0)))]
		[TestCase(10000L, ((SByte)(1)), ((SByte)(1)))]
		[TestCase(10000L, ((SByte)(1)), ((SByte)(-1)))]
		[TestCase(10000L, ((SByte)(1)), ((SByte)(100)))]
		[TestCase(10000L, ((SByte)(1)), ((SByte)(-100)))]
		[TestCase(10000L, ((SByte)(-1)), ((SByte)(0)))]
		[TestCase(10000L, ((SByte)(-1)), ((SByte)(1)))]
		[TestCase(10000L, ((SByte)(-1)), ((SByte)(-1)))]
		[TestCase(10000L, ((SByte)(-1)), ((SByte)(100)))]
		[TestCase(10000L, ((SByte)(-1)), ((SByte)(-100)))]
		[TestCase(10000L, ((SByte)(100)), ((SByte)(0)))]
		[TestCase(10000L, ((SByte)(100)), ((SByte)(1)))]
		[TestCase(10000L, ((SByte)(100)), ((SByte)(-1)))]
		[TestCase(10000L, ((SByte)(100)), ((SByte)(100)))]
		[TestCase(10000L, ((SByte)(100)), ((SByte)(-100)))]
		[TestCase(10000L, ((SByte)(-100)), ((SByte)(0)))]
		[TestCase(10000L, ((SByte)(-100)), ((SByte)(1)))]
		[TestCase(10000L, ((SByte)(-100)), ((SByte)(-1)))]
		[TestCase(10000L, ((SByte)(-100)), ((SByte)(100)))]
		[TestCase(10000L, ((SByte)(-100)), ((SByte)(-100)))]
		[TestCase(-10000L, ((SByte)(0)), ((SByte)(0)))]
		[TestCase(-10000L, ((SByte)(0)), ((SByte)(1)))]
		[TestCase(-10000L, ((SByte)(0)), ((SByte)(-1)))]
		[TestCase(-10000L, ((SByte)(0)), ((SByte)(100)))]
		[TestCase(-10000L, ((SByte)(0)), ((SByte)(-100)))]
		[TestCase(-10000L, ((SByte)(1)), ((SByte)(0)))]
		[TestCase(-10000L, ((SByte)(1)), ((SByte)(1)))]
		[TestCase(-10000L, ((SByte)(1)), ((SByte)(-1)))]
		[TestCase(-10000L, ((SByte)(1)), ((SByte)(100)))]
		[TestCase(-10000L, ((SByte)(1)), ((SByte)(-100)))]
		[TestCase(-10000L, ((SByte)(-1)), ((SByte)(0)))]
		[TestCase(-10000L, ((SByte)(-1)), ((SByte)(1)))]
		[TestCase(-10000L, ((SByte)(-1)), ((SByte)(-1)))]
		[TestCase(-10000L, ((SByte)(-1)), ((SByte)(100)))]
		[TestCase(-10000L, ((SByte)(-1)), ((SByte)(-100)))]
		[TestCase(-10000L, ((SByte)(100)), ((SByte)(0)))]
		[TestCase(-10000L, ((SByte)(100)), ((SByte)(1)))]
		[TestCase(-10000L, ((SByte)(100)), ((SByte)(-1)))]
		[TestCase(-10000L, ((SByte)(100)), ((SByte)(100)))]
		[TestCase(-10000L, ((SByte)(100)), ((SByte)(-100)))]
		[TestCase(-10000L, ((SByte)(-100)), ((SByte)(0)))]
		[TestCase(-10000L, ((SByte)(-100)), ((SByte)(1)))]
		[TestCase(-10000L, ((SByte)(-100)), ((SByte)(-1)))]
		[TestCase(-10000L, ((SByte)(-100)), ((SByte)(100)))]
		[TestCase(-10000L, ((SByte)(-100)), ((SByte)(-100)))]
		[TestCase(100000000L, ((SByte)(0)), ((SByte)(0)))]
		[TestCase(100000000L, ((SByte)(0)), ((SByte)(1)))]
		[TestCase(100000000L, ((SByte)(0)), ((SByte)(-1)))]
		[TestCase(100000000L, ((SByte)(0)), ((SByte)(100)))]
		[TestCase(100000000L, ((SByte)(0)), ((SByte)(-100)))]
		[TestCase(100000000L, ((SByte)(1)), ((SByte)(0)))]
		[TestCase(100000000L, ((SByte)(1)), ((SByte)(1)))]
		[TestCase(100000000L, ((SByte)(1)), ((SByte)(-1)))]
		[TestCase(100000000L, ((SByte)(1)), ((SByte)(100)))]
		[TestCase(100000000L, ((SByte)(1)), ((SByte)(-100)))]
		[TestCase(100000000L, ((SByte)(-1)), ((SByte)(0)))]
		[TestCase(100000000L, ((SByte)(-1)), ((SByte)(1)))]
		[TestCase(100000000L, ((SByte)(-1)), ((SByte)(-1)))]
		[TestCase(100000000L, ((SByte)(-1)), ((SByte)(100)))]
		[TestCase(100000000L, ((SByte)(-1)), ((SByte)(-100)))]
		[TestCase(100000000L, ((SByte)(100)), ((SByte)(0)))]
		[TestCase(100000000L, ((SByte)(100)), ((SByte)(1)))]
		[TestCase(100000000L, ((SByte)(100)), ((SByte)(-1)))]
		[TestCase(100000000L, ((SByte)(100)), ((SByte)(100)))]
		[TestCase(100000000L, ((SByte)(100)), ((SByte)(-100)))]
		[TestCase(100000000L, ((SByte)(-100)), ((SByte)(0)))]
		[TestCase(100000000L, ((SByte)(-100)), ((SByte)(1)))]
		[TestCase(100000000L, ((SByte)(-100)), ((SByte)(-1)))]
		[TestCase(100000000L, ((SByte)(-100)), ((SByte)(100)))]
		[TestCase(100000000L, ((SByte)(-100)), ((SByte)(-100)))]
		[TestCase(-100000000L, ((SByte)(0)), ((SByte)(0)))]
		[TestCase(-100000000L, ((SByte)(0)), ((SByte)(1)))]
		[TestCase(-100000000L, ((SByte)(0)), ((SByte)(-1)))]
		[TestCase(-100000000L, ((SByte)(0)), ((SByte)(100)))]
		[TestCase(-100000000L, ((SByte)(0)), ((SByte)(-100)))]
		[TestCase(-100000000L, ((SByte)(1)), ((SByte)(0)))]
		[TestCase(-100000000L, ((SByte)(1)), ((SByte)(1)))]
		[TestCase(-100000000L, ((SByte)(1)), ((SByte)(-1)))]
		[TestCase(-100000000L, ((SByte)(1)), ((SByte)(100)))]
		[TestCase(-100000000L, ((SByte)(1)), ((SByte)(-100)))]
		[TestCase(-100000000L, ((SByte)(-1)), ((SByte)(0)))]
		[TestCase(-100000000L, ((SByte)(-1)), ((SByte)(1)))]
		[TestCase(-100000000L, ((SByte)(-1)), ((SByte)(-1)))]
		[TestCase(-100000000L, ((SByte)(-1)), ((SByte)(100)))]
		[TestCase(-100000000L, ((SByte)(-1)), ((SByte)(-100)))]
		[TestCase(-100000000L, ((SByte)(100)), ((SByte)(0)))]
		[TestCase(-100000000L, ((SByte)(100)), ((SByte)(1)))]
		[TestCase(-100000000L, ((SByte)(100)), ((SByte)(-1)))]
		[TestCase(-100000000L, ((SByte)(100)), ((SByte)(100)))]
		[TestCase(-100000000L, ((SByte)(100)), ((SByte)(-100)))]
		[TestCase(-100000000L, ((SByte)(-100)), ((SByte)(0)))]
		[TestCase(-100000000L, ((SByte)(-100)), ((SByte)(1)))]
		[TestCase(-100000000L, ((SByte)(-100)), ((SByte)(-1)))]
		[TestCase(-100000000L, ((SByte)(-100)), ((SByte)(100)))]
		[TestCase(-100000000L, ((SByte)(-100)), ((SByte)(-100)))]
		[TestCase(10000000000000000L, ((SByte)(0)), ((SByte)(0)))]
		[TestCase(10000000000000000L, ((SByte)(0)), ((SByte)(1)))]
		[TestCase(10000000000000000L, ((SByte)(0)), ((SByte)(-1)))]
		[TestCase(10000000000000000L, ((SByte)(0)), ((SByte)(100)))]
		[TestCase(10000000000000000L, ((SByte)(0)), ((SByte)(-100)))]
		[TestCase(10000000000000000L, ((SByte)(1)), ((SByte)(0)))]
		[TestCase(10000000000000000L, ((SByte)(1)), ((SByte)(1)))]
		[TestCase(10000000000000000L, ((SByte)(1)), ((SByte)(-1)))]
		[TestCase(10000000000000000L, ((SByte)(1)), ((SByte)(100)))]
		[TestCase(10000000000000000L, ((SByte)(1)), ((SByte)(-100)))]
		[TestCase(10000000000000000L, ((SByte)(-1)), ((SByte)(0)))]
		[TestCase(10000000000000000L, ((SByte)(-1)), ((SByte)(1)))]
		[TestCase(10000000000000000L, ((SByte)(-1)), ((SByte)(-1)))]
		[TestCase(10000000000000000L, ((SByte)(-1)), ((SByte)(100)))]
		[TestCase(10000000000000000L, ((SByte)(-1)), ((SByte)(-100)))]
		[TestCase(10000000000000000L, ((SByte)(100)), ((SByte)(0)))]
		[TestCase(10000000000000000L, ((SByte)(100)), ((SByte)(1)))]
		[TestCase(10000000000000000L, ((SByte)(100)), ((SByte)(-1)))]
		[TestCase(10000000000000000L, ((SByte)(100)), ((SByte)(100)))]
		[TestCase(10000000000000000L, ((SByte)(100)), ((SByte)(-100)))]
		[TestCase(10000000000000000L, ((SByte)(-100)), ((SByte)(0)))]
		[TestCase(10000000000000000L, ((SByte)(-100)), ((SByte)(1)))]
		[TestCase(10000000000000000L, ((SByte)(-100)), ((SByte)(-1)))]
		[TestCase(10000000000000000L, ((SByte)(-100)), ((SByte)(100)))]
		[TestCase(10000000000000000L, ((SByte)(-100)), ((SByte)(-100)))]
		[TestCase(-10000000000000000L, ((SByte)(0)), ((SByte)(0)))]
		[TestCase(-10000000000000000L, ((SByte)(0)), ((SByte)(1)))]
		[TestCase(-10000000000000000L, ((SByte)(0)), ((SByte)(-1)))]
		[TestCase(-10000000000000000L, ((SByte)(0)), ((SByte)(100)))]
		[TestCase(-10000000000000000L, ((SByte)(0)), ((SByte)(-100)))]
		[TestCase(-10000000000000000L, ((SByte)(1)), ((SByte)(0)))]
		[TestCase(-10000000000000000L, ((SByte)(1)), ((SByte)(1)))]
		[TestCase(-10000000000000000L, ((SByte)(1)), ((SByte)(-1)))]
		[TestCase(-10000000000000000L, ((SByte)(1)), ((SByte)(100)))]
		[TestCase(-10000000000000000L, ((SByte)(1)), ((SByte)(-100)))]
		[TestCase(-10000000000000000L, ((SByte)(-1)), ((SByte)(0)))]
		[TestCase(-10000000000000000L, ((SByte)(-1)), ((SByte)(1)))]
		[TestCase(-10000000000000000L, ((SByte)(-1)), ((SByte)(-1)))]
		[TestCase(-10000000000000000L, ((SByte)(-1)), ((SByte)(100)))]
		[TestCase(-10000000000000000L, ((SByte)(-1)), ((SByte)(-100)))]
		[TestCase(-10000000000000000L, ((SByte)(100)), ((SByte)(0)))]
		[TestCase(-10000000000000000L, ((SByte)(100)), ((SByte)(1)))]
		[TestCase(-10000000000000000L, ((SByte)(100)), ((SByte)(-1)))]
		[TestCase(-10000000000000000L, ((SByte)(100)), ((SByte)(100)))]
		[TestCase(-10000000000000000L, ((SByte)(100)), ((SByte)(-100)))]
		[TestCase(-10000000000000000L, ((SByte)(-100)), ((SByte)(0)))]
		[TestCase(-10000000000000000L, ((SByte)(-100)), ((SByte)(1)))]
		[TestCase(-10000000000000000L, ((SByte)(-100)), ((SByte)(-1)))]
		[TestCase(-10000000000000000L, ((SByte)(-100)), ((SByte)(100)))]
		[TestCase(-10000000000000000L, ((SByte)(-100)), ((SByte)(-100)))]
		public void TestClampInt64SByte(Int64 value, SByte minInclusive, SByte maxInclusive)
        {
            BigInteger expected = 0, actual = 0;
            bool expectedException = false, actualException = false;

            try
            {
                expected = Clamp(value, minInclusive, maxInclusive);
            }
            catch (ArgumentException)
            {
                expectedException = true;
            }

            try
            {
                actual = MathTrifles.Clamp(value, minInclusive, maxInclusive);
            }
            catch (ArgumentException)
            {
                actualException = true;
            }

            Assert.That(actualException, Is.EqualTo(expectedException));

            if (!expectedException)
            {
                Assert.That(actual, Is.EqualTo(expected));
            }
        }


		[TestCase(0L, ((Byte)(0)), ((Byte)(0)))]
		[TestCase(0L, ((Byte)(0)), ((Byte)(1)))]
		[TestCase(0L, ((Byte)(0)), ((Byte)(100)))]
		[TestCase(0L, ((Byte)(1)), ((Byte)(0)))]
		[TestCase(0L, ((Byte)(1)), ((Byte)(1)))]
		[TestCase(0L, ((Byte)(1)), ((Byte)(100)))]
		[TestCase(0L, ((Byte)(100)), ((Byte)(0)))]
		[TestCase(0L, ((Byte)(100)), ((Byte)(1)))]
		[TestCase(0L, ((Byte)(100)), ((Byte)(100)))]
		[TestCase(1L, ((Byte)(0)), ((Byte)(0)))]
		[TestCase(1L, ((Byte)(0)), ((Byte)(1)))]
		[TestCase(1L, ((Byte)(0)), ((Byte)(100)))]
		[TestCase(1L, ((Byte)(1)), ((Byte)(0)))]
		[TestCase(1L, ((Byte)(1)), ((Byte)(1)))]
		[TestCase(1L, ((Byte)(1)), ((Byte)(100)))]
		[TestCase(1L, ((Byte)(100)), ((Byte)(0)))]
		[TestCase(1L, ((Byte)(100)), ((Byte)(1)))]
		[TestCase(1L, ((Byte)(100)), ((Byte)(100)))]
		[TestCase(-1L, ((Byte)(0)), ((Byte)(0)))]
		[TestCase(-1L, ((Byte)(0)), ((Byte)(1)))]
		[TestCase(-1L, ((Byte)(0)), ((Byte)(100)))]
		[TestCase(-1L, ((Byte)(1)), ((Byte)(0)))]
		[TestCase(-1L, ((Byte)(1)), ((Byte)(1)))]
		[TestCase(-1L, ((Byte)(1)), ((Byte)(100)))]
		[TestCase(-1L, ((Byte)(100)), ((Byte)(0)))]
		[TestCase(-1L, ((Byte)(100)), ((Byte)(1)))]
		[TestCase(-1L, ((Byte)(100)), ((Byte)(100)))]
		[TestCase(100L, ((Byte)(0)), ((Byte)(0)))]
		[TestCase(100L, ((Byte)(0)), ((Byte)(1)))]
		[TestCase(100L, ((Byte)(0)), ((Byte)(100)))]
		[TestCase(100L, ((Byte)(1)), ((Byte)(0)))]
		[TestCase(100L, ((Byte)(1)), ((Byte)(1)))]
		[TestCase(100L, ((Byte)(1)), ((Byte)(100)))]
		[TestCase(100L, ((Byte)(100)), ((Byte)(0)))]
		[TestCase(100L, ((Byte)(100)), ((Byte)(1)))]
		[TestCase(100L, ((Byte)(100)), ((Byte)(100)))]
		[TestCase(-100L, ((Byte)(0)), ((Byte)(0)))]
		[TestCase(-100L, ((Byte)(0)), ((Byte)(1)))]
		[TestCase(-100L, ((Byte)(0)), ((Byte)(100)))]
		[TestCase(-100L, ((Byte)(1)), ((Byte)(0)))]
		[TestCase(-100L, ((Byte)(1)), ((Byte)(1)))]
		[TestCase(-100L, ((Byte)(1)), ((Byte)(100)))]
		[TestCase(-100L, ((Byte)(100)), ((Byte)(0)))]
		[TestCase(-100L, ((Byte)(100)), ((Byte)(1)))]
		[TestCase(-100L, ((Byte)(100)), ((Byte)(100)))]
		[TestCase(10000L, ((Byte)(0)), ((Byte)(0)))]
		[TestCase(10000L, ((Byte)(0)), ((Byte)(1)))]
		[TestCase(10000L, ((Byte)(0)), ((Byte)(100)))]
		[TestCase(10000L, ((Byte)(1)), ((Byte)(0)))]
		[TestCase(10000L, ((Byte)(1)), ((Byte)(1)))]
		[TestCase(10000L, ((Byte)(1)), ((Byte)(100)))]
		[TestCase(10000L, ((Byte)(100)), ((Byte)(0)))]
		[TestCase(10000L, ((Byte)(100)), ((Byte)(1)))]
		[TestCase(10000L, ((Byte)(100)), ((Byte)(100)))]
		[TestCase(-10000L, ((Byte)(0)), ((Byte)(0)))]
		[TestCase(-10000L, ((Byte)(0)), ((Byte)(1)))]
		[TestCase(-10000L, ((Byte)(0)), ((Byte)(100)))]
		[TestCase(-10000L, ((Byte)(1)), ((Byte)(0)))]
		[TestCase(-10000L, ((Byte)(1)), ((Byte)(1)))]
		[TestCase(-10000L, ((Byte)(1)), ((Byte)(100)))]
		[TestCase(-10000L, ((Byte)(100)), ((Byte)(0)))]
		[TestCase(-10000L, ((Byte)(100)), ((Byte)(1)))]
		[TestCase(-10000L, ((Byte)(100)), ((Byte)(100)))]
		[TestCase(100000000L, ((Byte)(0)), ((Byte)(0)))]
		[TestCase(100000000L, ((Byte)(0)), ((Byte)(1)))]
		[TestCase(100000000L, ((Byte)(0)), ((Byte)(100)))]
		[TestCase(100000000L, ((Byte)(1)), ((Byte)(0)))]
		[TestCase(100000000L, ((Byte)(1)), ((Byte)(1)))]
		[TestCase(100000000L, ((Byte)(1)), ((Byte)(100)))]
		[TestCase(100000000L, ((Byte)(100)), ((Byte)(0)))]
		[TestCase(100000000L, ((Byte)(100)), ((Byte)(1)))]
		[TestCase(100000000L, ((Byte)(100)), ((Byte)(100)))]
		[TestCase(-100000000L, ((Byte)(0)), ((Byte)(0)))]
		[TestCase(-100000000L, ((Byte)(0)), ((Byte)(1)))]
		[TestCase(-100000000L, ((Byte)(0)), ((Byte)(100)))]
		[TestCase(-100000000L, ((Byte)(1)), ((Byte)(0)))]
		[TestCase(-100000000L, ((Byte)(1)), ((Byte)(1)))]
		[TestCase(-100000000L, ((Byte)(1)), ((Byte)(100)))]
		[TestCase(-100000000L, ((Byte)(100)), ((Byte)(0)))]
		[TestCase(-100000000L, ((Byte)(100)), ((Byte)(1)))]
		[TestCase(-100000000L, ((Byte)(100)), ((Byte)(100)))]
		[TestCase(10000000000000000L, ((Byte)(0)), ((Byte)(0)))]
		[TestCase(10000000000000000L, ((Byte)(0)), ((Byte)(1)))]
		[TestCase(10000000000000000L, ((Byte)(0)), ((Byte)(100)))]
		[TestCase(10000000000000000L, ((Byte)(1)), ((Byte)(0)))]
		[TestCase(10000000000000000L, ((Byte)(1)), ((Byte)(1)))]
		[TestCase(10000000000000000L, ((Byte)(1)), ((Byte)(100)))]
		[TestCase(10000000000000000L, ((Byte)(100)), ((Byte)(0)))]
		[TestCase(10000000000000000L, ((Byte)(100)), ((Byte)(1)))]
		[TestCase(10000000000000000L, ((Byte)(100)), ((Byte)(100)))]
		[TestCase(-10000000000000000L, ((Byte)(0)), ((Byte)(0)))]
		[TestCase(-10000000000000000L, ((Byte)(0)), ((Byte)(1)))]
		[TestCase(-10000000000000000L, ((Byte)(0)), ((Byte)(100)))]
		[TestCase(-10000000000000000L, ((Byte)(1)), ((Byte)(0)))]
		[TestCase(-10000000000000000L, ((Byte)(1)), ((Byte)(1)))]
		[TestCase(-10000000000000000L, ((Byte)(1)), ((Byte)(100)))]
		[TestCase(-10000000000000000L, ((Byte)(100)), ((Byte)(0)))]
		[TestCase(-10000000000000000L, ((Byte)(100)), ((Byte)(1)))]
		[TestCase(-10000000000000000L, ((Byte)(100)), ((Byte)(100)))]
		public void TestClampInt64Byte(Int64 value, Byte minInclusive, Byte maxInclusive)
        {
            BigInteger expected = 0, actual = 0;
            bool expectedException = false, actualException = false;

            try
            {
                expected = Clamp(value, minInclusive, maxInclusive);
            }
            catch (ArgumentException)
            {
                expectedException = true;
            }

            try
            {
                actual = MathTrifles.Clamp(value, minInclusive, maxInclusive);
            }
            catch (ArgumentException)
            {
                actualException = true;
            }

            Assert.That(actualException, Is.EqualTo(expectedException));

            if (!expectedException)
            {
                Assert.That(actual, Is.EqualTo(expected));
            }
        }


		[TestCase(0L, ((Int16)(0)), ((Int16)(0)))]
		[TestCase(0L, ((Int16)(0)), ((Int16)(1)))]
		[TestCase(0L, ((Int16)(0)), ((Int16)(-1)))]
		[TestCase(0L, ((Int16)(0)), ((Int16)(100)))]
		[TestCase(0L, ((Int16)(0)), ((Int16)(-100)))]
		[TestCase(0L, ((Int16)(0)), ((Int16)(10000)))]
		[TestCase(0L, ((Int16)(0)), ((Int16)(-10000)))]
		[TestCase(0L, ((Int16)(1)), ((Int16)(0)))]
		[TestCase(0L, ((Int16)(1)), ((Int16)(1)))]
		[TestCase(0L, ((Int16)(1)), ((Int16)(-1)))]
		[TestCase(0L, ((Int16)(1)), ((Int16)(100)))]
		[TestCase(0L, ((Int16)(1)), ((Int16)(-100)))]
		[TestCase(0L, ((Int16)(1)), ((Int16)(10000)))]
		[TestCase(0L, ((Int16)(1)), ((Int16)(-10000)))]
		[TestCase(0L, ((Int16)(-1)), ((Int16)(0)))]
		[TestCase(0L, ((Int16)(-1)), ((Int16)(1)))]
		[TestCase(0L, ((Int16)(-1)), ((Int16)(-1)))]
		[TestCase(0L, ((Int16)(-1)), ((Int16)(100)))]
		[TestCase(0L, ((Int16)(-1)), ((Int16)(-100)))]
		[TestCase(0L, ((Int16)(-1)), ((Int16)(10000)))]
		[TestCase(0L, ((Int16)(-1)), ((Int16)(-10000)))]
		[TestCase(0L, ((Int16)(100)), ((Int16)(0)))]
		[TestCase(0L, ((Int16)(100)), ((Int16)(1)))]
		[TestCase(0L, ((Int16)(100)), ((Int16)(-1)))]
		[TestCase(0L, ((Int16)(100)), ((Int16)(100)))]
		[TestCase(0L, ((Int16)(100)), ((Int16)(-100)))]
		[TestCase(0L, ((Int16)(100)), ((Int16)(10000)))]
		[TestCase(0L, ((Int16)(100)), ((Int16)(-10000)))]
		[TestCase(0L, ((Int16)(-100)), ((Int16)(0)))]
		[TestCase(0L, ((Int16)(-100)), ((Int16)(1)))]
		[TestCase(0L, ((Int16)(-100)), ((Int16)(-1)))]
		[TestCase(0L, ((Int16)(-100)), ((Int16)(100)))]
		[TestCase(0L, ((Int16)(-100)), ((Int16)(-100)))]
		[TestCase(0L, ((Int16)(-100)), ((Int16)(10000)))]
		[TestCase(0L, ((Int16)(-100)), ((Int16)(-10000)))]
		[TestCase(0L, ((Int16)(10000)), ((Int16)(0)))]
		[TestCase(0L, ((Int16)(10000)), ((Int16)(1)))]
		[TestCase(0L, ((Int16)(10000)), ((Int16)(-1)))]
		[TestCase(0L, ((Int16)(10000)), ((Int16)(100)))]
		[TestCase(0L, ((Int16)(10000)), ((Int16)(-100)))]
		[TestCase(0L, ((Int16)(10000)), ((Int16)(10000)))]
		[TestCase(0L, ((Int16)(10000)), ((Int16)(-10000)))]
		[TestCase(0L, ((Int16)(-10000)), ((Int16)(0)))]
		[TestCase(0L, ((Int16)(-10000)), ((Int16)(1)))]
		[TestCase(0L, ((Int16)(-10000)), ((Int16)(-1)))]
		[TestCase(0L, ((Int16)(-10000)), ((Int16)(100)))]
		[TestCase(0L, ((Int16)(-10000)), ((Int16)(-100)))]
		[TestCase(0L, ((Int16)(-10000)), ((Int16)(10000)))]
		[TestCase(0L, ((Int16)(-10000)), ((Int16)(-10000)))]
		[TestCase(1L, ((Int16)(0)), ((Int16)(0)))]
		[TestCase(1L, ((Int16)(0)), ((Int16)(1)))]
		[TestCase(1L, ((Int16)(0)), ((Int16)(-1)))]
		[TestCase(1L, ((Int16)(0)), ((Int16)(100)))]
		[TestCase(1L, ((Int16)(0)), ((Int16)(-100)))]
		[TestCase(1L, ((Int16)(0)), ((Int16)(10000)))]
		[TestCase(1L, ((Int16)(0)), ((Int16)(-10000)))]
		[TestCase(1L, ((Int16)(1)), ((Int16)(0)))]
		[TestCase(1L, ((Int16)(1)), ((Int16)(1)))]
		[TestCase(1L, ((Int16)(1)), ((Int16)(-1)))]
		[TestCase(1L, ((Int16)(1)), ((Int16)(100)))]
		[TestCase(1L, ((Int16)(1)), ((Int16)(-100)))]
		[TestCase(1L, ((Int16)(1)), ((Int16)(10000)))]
		[TestCase(1L, ((Int16)(1)), ((Int16)(-10000)))]
		[TestCase(1L, ((Int16)(-1)), ((Int16)(0)))]
		[TestCase(1L, ((Int16)(-1)), ((Int16)(1)))]
		[TestCase(1L, ((Int16)(-1)), ((Int16)(-1)))]
		[TestCase(1L, ((Int16)(-1)), ((Int16)(100)))]
		[TestCase(1L, ((Int16)(-1)), ((Int16)(-100)))]
		[TestCase(1L, ((Int16)(-1)), ((Int16)(10000)))]
		[TestCase(1L, ((Int16)(-1)), ((Int16)(-10000)))]
		[TestCase(1L, ((Int16)(100)), ((Int16)(0)))]
		[TestCase(1L, ((Int16)(100)), ((Int16)(1)))]
		[TestCase(1L, ((Int16)(100)), ((Int16)(-1)))]
		[TestCase(1L, ((Int16)(100)), ((Int16)(100)))]
		[TestCase(1L, ((Int16)(100)), ((Int16)(-100)))]
		[TestCase(1L, ((Int16)(100)), ((Int16)(10000)))]
		[TestCase(1L, ((Int16)(100)), ((Int16)(-10000)))]
		[TestCase(1L, ((Int16)(-100)), ((Int16)(0)))]
		[TestCase(1L, ((Int16)(-100)), ((Int16)(1)))]
		[TestCase(1L, ((Int16)(-100)), ((Int16)(-1)))]
		[TestCase(1L, ((Int16)(-100)), ((Int16)(100)))]
		[TestCase(1L, ((Int16)(-100)), ((Int16)(-100)))]
		[TestCase(1L, ((Int16)(-100)), ((Int16)(10000)))]
		[TestCase(1L, ((Int16)(-100)), ((Int16)(-10000)))]
		[TestCase(1L, ((Int16)(10000)), ((Int16)(0)))]
		[TestCase(1L, ((Int16)(10000)), ((Int16)(1)))]
		[TestCase(1L, ((Int16)(10000)), ((Int16)(-1)))]
		[TestCase(1L, ((Int16)(10000)), ((Int16)(100)))]
		[TestCase(1L, ((Int16)(10000)), ((Int16)(-100)))]
		[TestCase(1L, ((Int16)(10000)), ((Int16)(10000)))]
		[TestCase(1L, ((Int16)(10000)), ((Int16)(-10000)))]
		[TestCase(1L, ((Int16)(-10000)), ((Int16)(0)))]
		[TestCase(1L, ((Int16)(-10000)), ((Int16)(1)))]
		[TestCase(1L, ((Int16)(-10000)), ((Int16)(-1)))]
		[TestCase(1L, ((Int16)(-10000)), ((Int16)(100)))]
		[TestCase(1L, ((Int16)(-10000)), ((Int16)(-100)))]
		[TestCase(1L, ((Int16)(-10000)), ((Int16)(10000)))]
		[TestCase(1L, ((Int16)(-10000)), ((Int16)(-10000)))]
		[TestCase(-1L, ((Int16)(0)), ((Int16)(0)))]
		[TestCase(-1L, ((Int16)(0)), ((Int16)(1)))]
		[TestCase(-1L, ((Int16)(0)), ((Int16)(-1)))]
		[TestCase(-1L, ((Int16)(0)), ((Int16)(100)))]
		[TestCase(-1L, ((Int16)(0)), ((Int16)(-100)))]
		[TestCase(-1L, ((Int16)(0)), ((Int16)(10000)))]
		[TestCase(-1L, ((Int16)(0)), ((Int16)(-10000)))]
		[TestCase(-1L, ((Int16)(1)), ((Int16)(0)))]
		[TestCase(-1L, ((Int16)(1)), ((Int16)(1)))]
		[TestCase(-1L, ((Int16)(1)), ((Int16)(-1)))]
		[TestCase(-1L, ((Int16)(1)), ((Int16)(100)))]
		[TestCase(-1L, ((Int16)(1)), ((Int16)(-100)))]
		[TestCase(-1L, ((Int16)(1)), ((Int16)(10000)))]
		[TestCase(-1L, ((Int16)(1)), ((Int16)(-10000)))]
		[TestCase(-1L, ((Int16)(-1)), ((Int16)(0)))]
		[TestCase(-1L, ((Int16)(-1)), ((Int16)(1)))]
		[TestCase(-1L, ((Int16)(-1)), ((Int16)(-1)))]
		[TestCase(-1L, ((Int16)(-1)), ((Int16)(100)))]
		[TestCase(-1L, ((Int16)(-1)), ((Int16)(-100)))]
		[TestCase(-1L, ((Int16)(-1)), ((Int16)(10000)))]
		[TestCase(-1L, ((Int16)(-1)), ((Int16)(-10000)))]
		[TestCase(-1L, ((Int16)(100)), ((Int16)(0)))]
		[TestCase(-1L, ((Int16)(100)), ((Int16)(1)))]
		[TestCase(-1L, ((Int16)(100)), ((Int16)(-1)))]
		[TestCase(-1L, ((Int16)(100)), ((Int16)(100)))]
		[TestCase(-1L, ((Int16)(100)), ((Int16)(-100)))]
		[TestCase(-1L, ((Int16)(100)), ((Int16)(10000)))]
		[TestCase(-1L, ((Int16)(100)), ((Int16)(-10000)))]
		[TestCase(-1L, ((Int16)(-100)), ((Int16)(0)))]
		[TestCase(-1L, ((Int16)(-100)), ((Int16)(1)))]
		[TestCase(-1L, ((Int16)(-100)), ((Int16)(-1)))]
		[TestCase(-1L, ((Int16)(-100)), ((Int16)(100)))]
		[TestCase(-1L, ((Int16)(-100)), ((Int16)(-100)))]
		[TestCase(-1L, ((Int16)(-100)), ((Int16)(10000)))]
		[TestCase(-1L, ((Int16)(-100)), ((Int16)(-10000)))]
		[TestCase(-1L, ((Int16)(10000)), ((Int16)(0)))]
		[TestCase(-1L, ((Int16)(10000)), ((Int16)(1)))]
		[TestCase(-1L, ((Int16)(10000)), ((Int16)(-1)))]
		[TestCase(-1L, ((Int16)(10000)), ((Int16)(100)))]
		[TestCase(-1L, ((Int16)(10000)), ((Int16)(-100)))]
		[TestCase(-1L, ((Int16)(10000)), ((Int16)(10000)))]
		[TestCase(-1L, ((Int16)(10000)), ((Int16)(-10000)))]
		[TestCase(-1L, ((Int16)(-10000)), ((Int16)(0)))]
		[TestCase(-1L, ((Int16)(-10000)), ((Int16)(1)))]
		[TestCase(-1L, ((Int16)(-10000)), ((Int16)(-1)))]
		[TestCase(-1L, ((Int16)(-10000)), ((Int16)(100)))]
		[TestCase(-1L, ((Int16)(-10000)), ((Int16)(-100)))]
		[TestCase(-1L, ((Int16)(-10000)), ((Int16)(10000)))]
		[TestCase(-1L, ((Int16)(-10000)), ((Int16)(-10000)))]
		[TestCase(100L, ((Int16)(0)), ((Int16)(0)))]
		[TestCase(100L, ((Int16)(0)), ((Int16)(1)))]
		[TestCase(100L, ((Int16)(0)), ((Int16)(-1)))]
		[TestCase(100L, ((Int16)(0)), ((Int16)(100)))]
		[TestCase(100L, ((Int16)(0)), ((Int16)(-100)))]
		[TestCase(100L, ((Int16)(0)), ((Int16)(10000)))]
		[TestCase(100L, ((Int16)(0)), ((Int16)(-10000)))]
		[TestCase(100L, ((Int16)(1)), ((Int16)(0)))]
		[TestCase(100L, ((Int16)(1)), ((Int16)(1)))]
		[TestCase(100L, ((Int16)(1)), ((Int16)(-1)))]
		[TestCase(100L, ((Int16)(1)), ((Int16)(100)))]
		[TestCase(100L, ((Int16)(1)), ((Int16)(-100)))]
		[TestCase(100L, ((Int16)(1)), ((Int16)(10000)))]
		[TestCase(100L, ((Int16)(1)), ((Int16)(-10000)))]
		[TestCase(100L, ((Int16)(-1)), ((Int16)(0)))]
		[TestCase(100L, ((Int16)(-1)), ((Int16)(1)))]
		[TestCase(100L, ((Int16)(-1)), ((Int16)(-1)))]
		[TestCase(100L, ((Int16)(-1)), ((Int16)(100)))]
		[TestCase(100L, ((Int16)(-1)), ((Int16)(-100)))]
		[TestCase(100L, ((Int16)(-1)), ((Int16)(10000)))]
		[TestCase(100L, ((Int16)(-1)), ((Int16)(-10000)))]
		[TestCase(100L, ((Int16)(100)), ((Int16)(0)))]
		[TestCase(100L, ((Int16)(100)), ((Int16)(1)))]
		[TestCase(100L, ((Int16)(100)), ((Int16)(-1)))]
		[TestCase(100L, ((Int16)(100)), ((Int16)(100)))]
		[TestCase(100L, ((Int16)(100)), ((Int16)(-100)))]
		[TestCase(100L, ((Int16)(100)), ((Int16)(10000)))]
		[TestCase(100L, ((Int16)(100)), ((Int16)(-10000)))]
		[TestCase(100L, ((Int16)(-100)), ((Int16)(0)))]
		[TestCase(100L, ((Int16)(-100)), ((Int16)(1)))]
		[TestCase(100L, ((Int16)(-100)), ((Int16)(-1)))]
		[TestCase(100L, ((Int16)(-100)), ((Int16)(100)))]
		[TestCase(100L, ((Int16)(-100)), ((Int16)(-100)))]
		[TestCase(100L, ((Int16)(-100)), ((Int16)(10000)))]
		[TestCase(100L, ((Int16)(-100)), ((Int16)(-10000)))]
		[TestCase(100L, ((Int16)(10000)), ((Int16)(0)))]
		[TestCase(100L, ((Int16)(10000)), ((Int16)(1)))]
		[TestCase(100L, ((Int16)(10000)), ((Int16)(-1)))]
		[TestCase(100L, ((Int16)(10000)), ((Int16)(100)))]
		[TestCase(100L, ((Int16)(10000)), ((Int16)(-100)))]
		[TestCase(100L, ((Int16)(10000)), ((Int16)(10000)))]
		[TestCase(100L, ((Int16)(10000)), ((Int16)(-10000)))]
		[TestCase(100L, ((Int16)(-10000)), ((Int16)(0)))]
		[TestCase(100L, ((Int16)(-10000)), ((Int16)(1)))]
		[TestCase(100L, ((Int16)(-10000)), ((Int16)(-1)))]
		[TestCase(100L, ((Int16)(-10000)), ((Int16)(100)))]
		[TestCase(100L, ((Int16)(-10000)), ((Int16)(-100)))]
		[TestCase(100L, ((Int16)(-10000)), ((Int16)(10000)))]
		[TestCase(100L, ((Int16)(-10000)), ((Int16)(-10000)))]
		[TestCase(-100L, ((Int16)(0)), ((Int16)(0)))]
		[TestCase(-100L, ((Int16)(0)), ((Int16)(1)))]
		[TestCase(-100L, ((Int16)(0)), ((Int16)(-1)))]
		[TestCase(-100L, ((Int16)(0)), ((Int16)(100)))]
		[TestCase(-100L, ((Int16)(0)), ((Int16)(-100)))]
		[TestCase(-100L, ((Int16)(0)), ((Int16)(10000)))]
		[TestCase(-100L, ((Int16)(0)), ((Int16)(-10000)))]
		[TestCase(-100L, ((Int16)(1)), ((Int16)(0)))]
		[TestCase(-100L, ((Int16)(1)), ((Int16)(1)))]
		[TestCase(-100L, ((Int16)(1)), ((Int16)(-1)))]
		[TestCase(-100L, ((Int16)(1)), ((Int16)(100)))]
		[TestCase(-100L, ((Int16)(1)), ((Int16)(-100)))]
		[TestCase(-100L, ((Int16)(1)), ((Int16)(10000)))]
		[TestCase(-100L, ((Int16)(1)), ((Int16)(-10000)))]
		[TestCase(-100L, ((Int16)(-1)), ((Int16)(0)))]
		[TestCase(-100L, ((Int16)(-1)), ((Int16)(1)))]
		[TestCase(-100L, ((Int16)(-1)), ((Int16)(-1)))]
		[TestCase(-100L, ((Int16)(-1)), ((Int16)(100)))]
		[TestCase(-100L, ((Int16)(-1)), ((Int16)(-100)))]
		[TestCase(-100L, ((Int16)(-1)), ((Int16)(10000)))]
		[TestCase(-100L, ((Int16)(-1)), ((Int16)(-10000)))]
		[TestCase(-100L, ((Int16)(100)), ((Int16)(0)))]
		[TestCase(-100L, ((Int16)(100)), ((Int16)(1)))]
		[TestCase(-100L, ((Int16)(100)), ((Int16)(-1)))]
		[TestCase(-100L, ((Int16)(100)), ((Int16)(100)))]
		[TestCase(-100L, ((Int16)(100)), ((Int16)(-100)))]
		[TestCase(-100L, ((Int16)(100)), ((Int16)(10000)))]
		[TestCase(-100L, ((Int16)(100)), ((Int16)(-10000)))]
		[TestCase(-100L, ((Int16)(-100)), ((Int16)(0)))]
		[TestCase(-100L, ((Int16)(-100)), ((Int16)(1)))]
		[TestCase(-100L, ((Int16)(-100)), ((Int16)(-1)))]
		[TestCase(-100L, ((Int16)(-100)), ((Int16)(100)))]
		[TestCase(-100L, ((Int16)(-100)), ((Int16)(-100)))]
		[TestCase(-100L, ((Int16)(-100)), ((Int16)(10000)))]
		[TestCase(-100L, ((Int16)(-100)), ((Int16)(-10000)))]
		[TestCase(-100L, ((Int16)(10000)), ((Int16)(0)))]
		[TestCase(-100L, ((Int16)(10000)), ((Int16)(1)))]
		[TestCase(-100L, ((Int16)(10000)), ((Int16)(-1)))]
		[TestCase(-100L, ((Int16)(10000)), ((Int16)(100)))]
		[TestCase(-100L, ((Int16)(10000)), ((Int16)(-100)))]
		[TestCase(-100L, ((Int16)(10000)), ((Int16)(10000)))]
		[TestCase(-100L, ((Int16)(10000)), ((Int16)(-10000)))]
		[TestCase(-100L, ((Int16)(-10000)), ((Int16)(0)))]
		[TestCase(-100L, ((Int16)(-10000)), ((Int16)(1)))]
		[TestCase(-100L, ((Int16)(-10000)), ((Int16)(-1)))]
		[TestCase(-100L, ((Int16)(-10000)), ((Int16)(100)))]
		[TestCase(-100L, ((Int16)(-10000)), ((Int16)(-100)))]
		[TestCase(-100L, ((Int16)(-10000)), ((Int16)(10000)))]
		[TestCase(-100L, ((Int16)(-10000)), ((Int16)(-10000)))]
		[TestCase(10000L, ((Int16)(0)), ((Int16)(0)))]
		[TestCase(10000L, ((Int16)(0)), ((Int16)(1)))]
		[TestCase(10000L, ((Int16)(0)), ((Int16)(-1)))]
		[TestCase(10000L, ((Int16)(0)), ((Int16)(100)))]
		[TestCase(10000L, ((Int16)(0)), ((Int16)(-100)))]
		[TestCase(10000L, ((Int16)(0)), ((Int16)(10000)))]
		[TestCase(10000L, ((Int16)(0)), ((Int16)(-10000)))]
		[TestCase(10000L, ((Int16)(1)), ((Int16)(0)))]
		[TestCase(10000L, ((Int16)(1)), ((Int16)(1)))]
		[TestCase(10000L, ((Int16)(1)), ((Int16)(-1)))]
		[TestCase(10000L, ((Int16)(1)), ((Int16)(100)))]
		[TestCase(10000L, ((Int16)(1)), ((Int16)(-100)))]
		[TestCase(10000L, ((Int16)(1)), ((Int16)(10000)))]
		[TestCase(10000L, ((Int16)(1)), ((Int16)(-10000)))]
		[TestCase(10000L, ((Int16)(-1)), ((Int16)(0)))]
		[TestCase(10000L, ((Int16)(-1)), ((Int16)(1)))]
		[TestCase(10000L, ((Int16)(-1)), ((Int16)(-1)))]
		[TestCase(10000L, ((Int16)(-1)), ((Int16)(100)))]
		[TestCase(10000L, ((Int16)(-1)), ((Int16)(-100)))]
		[TestCase(10000L, ((Int16)(-1)), ((Int16)(10000)))]
		[TestCase(10000L, ((Int16)(-1)), ((Int16)(-10000)))]
		[TestCase(10000L, ((Int16)(100)), ((Int16)(0)))]
		[TestCase(10000L, ((Int16)(100)), ((Int16)(1)))]
		[TestCase(10000L, ((Int16)(100)), ((Int16)(-1)))]
		[TestCase(10000L, ((Int16)(100)), ((Int16)(100)))]
		[TestCase(10000L, ((Int16)(100)), ((Int16)(-100)))]
		[TestCase(10000L, ((Int16)(100)), ((Int16)(10000)))]
		[TestCase(10000L, ((Int16)(100)), ((Int16)(-10000)))]
		[TestCase(10000L, ((Int16)(-100)), ((Int16)(0)))]
		[TestCase(10000L, ((Int16)(-100)), ((Int16)(1)))]
		[TestCase(10000L, ((Int16)(-100)), ((Int16)(-1)))]
		[TestCase(10000L, ((Int16)(-100)), ((Int16)(100)))]
		[TestCase(10000L, ((Int16)(-100)), ((Int16)(-100)))]
		[TestCase(10000L, ((Int16)(-100)), ((Int16)(10000)))]
		[TestCase(10000L, ((Int16)(-100)), ((Int16)(-10000)))]
		[TestCase(10000L, ((Int16)(10000)), ((Int16)(0)))]
		[TestCase(10000L, ((Int16)(10000)), ((Int16)(1)))]
		[TestCase(10000L, ((Int16)(10000)), ((Int16)(-1)))]
		[TestCase(10000L, ((Int16)(10000)), ((Int16)(100)))]
		[TestCase(10000L, ((Int16)(10000)), ((Int16)(-100)))]
		[TestCase(10000L, ((Int16)(10000)), ((Int16)(10000)))]
		[TestCase(10000L, ((Int16)(10000)), ((Int16)(-10000)))]
		[TestCase(10000L, ((Int16)(-10000)), ((Int16)(0)))]
		[TestCase(10000L, ((Int16)(-10000)), ((Int16)(1)))]
		[TestCase(10000L, ((Int16)(-10000)), ((Int16)(-1)))]
		[TestCase(10000L, ((Int16)(-10000)), ((Int16)(100)))]
		[TestCase(10000L, ((Int16)(-10000)), ((Int16)(-100)))]
		[TestCase(10000L, ((Int16)(-10000)), ((Int16)(10000)))]
		[TestCase(10000L, ((Int16)(-10000)), ((Int16)(-10000)))]
		[TestCase(-10000L, ((Int16)(0)), ((Int16)(0)))]
		[TestCase(-10000L, ((Int16)(0)), ((Int16)(1)))]
		[TestCase(-10000L, ((Int16)(0)), ((Int16)(-1)))]
		[TestCase(-10000L, ((Int16)(0)), ((Int16)(100)))]
		[TestCase(-10000L, ((Int16)(0)), ((Int16)(-100)))]
		[TestCase(-10000L, ((Int16)(0)), ((Int16)(10000)))]
		[TestCase(-10000L, ((Int16)(0)), ((Int16)(-10000)))]
		[TestCase(-10000L, ((Int16)(1)), ((Int16)(0)))]
		[TestCase(-10000L, ((Int16)(1)), ((Int16)(1)))]
		[TestCase(-10000L, ((Int16)(1)), ((Int16)(-1)))]
		[TestCase(-10000L, ((Int16)(1)), ((Int16)(100)))]
		[TestCase(-10000L, ((Int16)(1)), ((Int16)(-100)))]
		[TestCase(-10000L, ((Int16)(1)), ((Int16)(10000)))]
		[TestCase(-10000L, ((Int16)(1)), ((Int16)(-10000)))]
		[TestCase(-10000L, ((Int16)(-1)), ((Int16)(0)))]
		[TestCase(-10000L, ((Int16)(-1)), ((Int16)(1)))]
		[TestCase(-10000L, ((Int16)(-1)), ((Int16)(-1)))]
		[TestCase(-10000L, ((Int16)(-1)), ((Int16)(100)))]
		[TestCase(-10000L, ((Int16)(-1)), ((Int16)(-100)))]
		[TestCase(-10000L, ((Int16)(-1)), ((Int16)(10000)))]
		[TestCase(-10000L, ((Int16)(-1)), ((Int16)(-10000)))]
		[TestCase(-10000L, ((Int16)(100)), ((Int16)(0)))]
		[TestCase(-10000L, ((Int16)(100)), ((Int16)(1)))]
		[TestCase(-10000L, ((Int16)(100)), ((Int16)(-1)))]
		[TestCase(-10000L, ((Int16)(100)), ((Int16)(100)))]
		[TestCase(-10000L, ((Int16)(100)), ((Int16)(-100)))]
		[TestCase(-10000L, ((Int16)(100)), ((Int16)(10000)))]
		[TestCase(-10000L, ((Int16)(100)), ((Int16)(-10000)))]
		[TestCase(-10000L, ((Int16)(-100)), ((Int16)(0)))]
		[TestCase(-10000L, ((Int16)(-100)), ((Int16)(1)))]
		[TestCase(-10000L, ((Int16)(-100)), ((Int16)(-1)))]
		[TestCase(-10000L, ((Int16)(-100)), ((Int16)(100)))]
		[TestCase(-10000L, ((Int16)(-100)), ((Int16)(-100)))]
		[TestCase(-10000L, ((Int16)(-100)), ((Int16)(10000)))]
		[TestCase(-10000L, ((Int16)(-100)), ((Int16)(-10000)))]
		[TestCase(-10000L, ((Int16)(10000)), ((Int16)(0)))]
		[TestCase(-10000L, ((Int16)(10000)), ((Int16)(1)))]
		[TestCase(-10000L, ((Int16)(10000)), ((Int16)(-1)))]
		[TestCase(-10000L, ((Int16)(10000)), ((Int16)(100)))]
		[TestCase(-10000L, ((Int16)(10000)), ((Int16)(-100)))]
		[TestCase(-10000L, ((Int16)(10000)), ((Int16)(10000)))]
		[TestCase(-10000L, ((Int16)(10000)), ((Int16)(-10000)))]
		[TestCase(-10000L, ((Int16)(-10000)), ((Int16)(0)))]
		[TestCase(-10000L, ((Int16)(-10000)), ((Int16)(1)))]
		[TestCase(-10000L, ((Int16)(-10000)), ((Int16)(-1)))]
		[TestCase(-10000L, ((Int16)(-10000)), ((Int16)(100)))]
		[TestCase(-10000L, ((Int16)(-10000)), ((Int16)(-100)))]
		[TestCase(-10000L, ((Int16)(-10000)), ((Int16)(10000)))]
		[TestCase(-10000L, ((Int16)(-10000)), ((Int16)(-10000)))]
		[TestCase(100000000L, ((Int16)(0)), ((Int16)(0)))]
		[TestCase(100000000L, ((Int16)(0)), ((Int16)(1)))]
		[TestCase(100000000L, ((Int16)(0)), ((Int16)(-1)))]
		[TestCase(100000000L, ((Int16)(0)), ((Int16)(100)))]
		[TestCase(100000000L, ((Int16)(0)), ((Int16)(-100)))]
		[TestCase(100000000L, ((Int16)(0)), ((Int16)(10000)))]
		[TestCase(100000000L, ((Int16)(0)), ((Int16)(-10000)))]
		[TestCase(100000000L, ((Int16)(1)), ((Int16)(0)))]
		[TestCase(100000000L, ((Int16)(1)), ((Int16)(1)))]
		[TestCase(100000000L, ((Int16)(1)), ((Int16)(-1)))]
		[TestCase(100000000L, ((Int16)(1)), ((Int16)(100)))]
		[TestCase(100000000L, ((Int16)(1)), ((Int16)(-100)))]
		[TestCase(100000000L, ((Int16)(1)), ((Int16)(10000)))]
		[TestCase(100000000L, ((Int16)(1)), ((Int16)(-10000)))]
		[TestCase(100000000L, ((Int16)(-1)), ((Int16)(0)))]
		[TestCase(100000000L, ((Int16)(-1)), ((Int16)(1)))]
		[TestCase(100000000L, ((Int16)(-1)), ((Int16)(-1)))]
		[TestCase(100000000L, ((Int16)(-1)), ((Int16)(100)))]
		[TestCase(100000000L, ((Int16)(-1)), ((Int16)(-100)))]
		[TestCase(100000000L, ((Int16)(-1)), ((Int16)(10000)))]
		[TestCase(100000000L, ((Int16)(-1)), ((Int16)(-10000)))]
		[TestCase(100000000L, ((Int16)(100)), ((Int16)(0)))]
		[TestCase(100000000L, ((Int16)(100)), ((Int16)(1)))]
		[TestCase(100000000L, ((Int16)(100)), ((Int16)(-1)))]
		[TestCase(100000000L, ((Int16)(100)), ((Int16)(100)))]
		[TestCase(100000000L, ((Int16)(100)), ((Int16)(-100)))]
		[TestCase(100000000L, ((Int16)(100)), ((Int16)(10000)))]
		[TestCase(100000000L, ((Int16)(100)), ((Int16)(-10000)))]
		[TestCase(100000000L, ((Int16)(-100)), ((Int16)(0)))]
		[TestCase(100000000L, ((Int16)(-100)), ((Int16)(1)))]
		[TestCase(100000000L, ((Int16)(-100)), ((Int16)(-1)))]
		[TestCase(100000000L, ((Int16)(-100)), ((Int16)(100)))]
		[TestCase(100000000L, ((Int16)(-100)), ((Int16)(-100)))]
		[TestCase(100000000L, ((Int16)(-100)), ((Int16)(10000)))]
		[TestCase(100000000L, ((Int16)(-100)), ((Int16)(-10000)))]
		[TestCase(100000000L, ((Int16)(10000)), ((Int16)(0)))]
		[TestCase(100000000L, ((Int16)(10000)), ((Int16)(1)))]
		[TestCase(100000000L, ((Int16)(10000)), ((Int16)(-1)))]
		[TestCase(100000000L, ((Int16)(10000)), ((Int16)(100)))]
		[TestCase(100000000L, ((Int16)(10000)), ((Int16)(-100)))]
		[TestCase(100000000L, ((Int16)(10000)), ((Int16)(10000)))]
		[TestCase(100000000L, ((Int16)(10000)), ((Int16)(-10000)))]
		[TestCase(100000000L, ((Int16)(-10000)), ((Int16)(0)))]
		[TestCase(100000000L, ((Int16)(-10000)), ((Int16)(1)))]
		[TestCase(100000000L, ((Int16)(-10000)), ((Int16)(-1)))]
		[TestCase(100000000L, ((Int16)(-10000)), ((Int16)(100)))]
		[TestCase(100000000L, ((Int16)(-10000)), ((Int16)(-100)))]
		[TestCase(100000000L, ((Int16)(-10000)), ((Int16)(10000)))]
		[TestCase(100000000L, ((Int16)(-10000)), ((Int16)(-10000)))]
		[TestCase(-100000000L, ((Int16)(0)), ((Int16)(0)))]
		[TestCase(-100000000L, ((Int16)(0)), ((Int16)(1)))]
		[TestCase(-100000000L, ((Int16)(0)), ((Int16)(-1)))]
		[TestCase(-100000000L, ((Int16)(0)), ((Int16)(100)))]
		[TestCase(-100000000L, ((Int16)(0)), ((Int16)(-100)))]
		[TestCase(-100000000L, ((Int16)(0)), ((Int16)(10000)))]
		[TestCase(-100000000L, ((Int16)(0)), ((Int16)(-10000)))]
		[TestCase(-100000000L, ((Int16)(1)), ((Int16)(0)))]
		[TestCase(-100000000L, ((Int16)(1)), ((Int16)(1)))]
		[TestCase(-100000000L, ((Int16)(1)), ((Int16)(-1)))]
		[TestCase(-100000000L, ((Int16)(1)), ((Int16)(100)))]
		[TestCase(-100000000L, ((Int16)(1)), ((Int16)(-100)))]
		[TestCase(-100000000L, ((Int16)(1)), ((Int16)(10000)))]
		[TestCase(-100000000L, ((Int16)(1)), ((Int16)(-10000)))]
		[TestCase(-100000000L, ((Int16)(-1)), ((Int16)(0)))]
		[TestCase(-100000000L, ((Int16)(-1)), ((Int16)(1)))]
		[TestCase(-100000000L, ((Int16)(-1)), ((Int16)(-1)))]
		[TestCase(-100000000L, ((Int16)(-1)), ((Int16)(100)))]
		[TestCase(-100000000L, ((Int16)(-1)), ((Int16)(-100)))]
		[TestCase(-100000000L, ((Int16)(-1)), ((Int16)(10000)))]
		[TestCase(-100000000L, ((Int16)(-1)), ((Int16)(-10000)))]
		[TestCase(-100000000L, ((Int16)(100)), ((Int16)(0)))]
		[TestCase(-100000000L, ((Int16)(100)), ((Int16)(1)))]
		[TestCase(-100000000L, ((Int16)(100)), ((Int16)(-1)))]
		[TestCase(-100000000L, ((Int16)(100)), ((Int16)(100)))]
		[TestCase(-100000000L, ((Int16)(100)), ((Int16)(-100)))]
		[TestCase(-100000000L, ((Int16)(100)), ((Int16)(10000)))]
		[TestCase(-100000000L, ((Int16)(100)), ((Int16)(-10000)))]
		[TestCase(-100000000L, ((Int16)(-100)), ((Int16)(0)))]
		[TestCase(-100000000L, ((Int16)(-100)), ((Int16)(1)))]
		[TestCase(-100000000L, ((Int16)(-100)), ((Int16)(-1)))]
		[TestCase(-100000000L, ((Int16)(-100)), ((Int16)(100)))]
		[TestCase(-100000000L, ((Int16)(-100)), ((Int16)(-100)))]
		[TestCase(-100000000L, ((Int16)(-100)), ((Int16)(10000)))]
		[TestCase(-100000000L, ((Int16)(-100)), ((Int16)(-10000)))]
		[TestCase(-100000000L, ((Int16)(10000)), ((Int16)(0)))]
		[TestCase(-100000000L, ((Int16)(10000)), ((Int16)(1)))]
		[TestCase(-100000000L, ((Int16)(10000)), ((Int16)(-1)))]
		[TestCase(-100000000L, ((Int16)(10000)), ((Int16)(100)))]
		[TestCase(-100000000L, ((Int16)(10000)), ((Int16)(-100)))]
		[TestCase(-100000000L, ((Int16)(10000)), ((Int16)(10000)))]
		[TestCase(-100000000L, ((Int16)(10000)), ((Int16)(-10000)))]
		[TestCase(-100000000L, ((Int16)(-10000)), ((Int16)(0)))]
		[TestCase(-100000000L, ((Int16)(-10000)), ((Int16)(1)))]
		[TestCase(-100000000L, ((Int16)(-10000)), ((Int16)(-1)))]
		[TestCase(-100000000L, ((Int16)(-10000)), ((Int16)(100)))]
		[TestCase(-100000000L, ((Int16)(-10000)), ((Int16)(-100)))]
		[TestCase(-100000000L, ((Int16)(-10000)), ((Int16)(10000)))]
		[TestCase(-100000000L, ((Int16)(-10000)), ((Int16)(-10000)))]
		[TestCase(10000000000000000L, ((Int16)(0)), ((Int16)(0)))]
		[TestCase(10000000000000000L, ((Int16)(0)), ((Int16)(1)))]
		[TestCase(10000000000000000L, ((Int16)(0)), ((Int16)(-1)))]
		[TestCase(10000000000000000L, ((Int16)(0)), ((Int16)(100)))]
		[TestCase(10000000000000000L, ((Int16)(0)), ((Int16)(-100)))]
		[TestCase(10000000000000000L, ((Int16)(0)), ((Int16)(10000)))]
		[TestCase(10000000000000000L, ((Int16)(0)), ((Int16)(-10000)))]
		[TestCase(10000000000000000L, ((Int16)(1)), ((Int16)(0)))]
		[TestCase(10000000000000000L, ((Int16)(1)), ((Int16)(1)))]
		[TestCase(10000000000000000L, ((Int16)(1)), ((Int16)(-1)))]
		[TestCase(10000000000000000L, ((Int16)(1)), ((Int16)(100)))]
		[TestCase(10000000000000000L, ((Int16)(1)), ((Int16)(-100)))]
		[TestCase(10000000000000000L, ((Int16)(1)), ((Int16)(10000)))]
		[TestCase(10000000000000000L, ((Int16)(1)), ((Int16)(-10000)))]
		[TestCase(10000000000000000L, ((Int16)(-1)), ((Int16)(0)))]
		[TestCase(10000000000000000L, ((Int16)(-1)), ((Int16)(1)))]
		[TestCase(10000000000000000L, ((Int16)(-1)), ((Int16)(-1)))]
		[TestCase(10000000000000000L, ((Int16)(-1)), ((Int16)(100)))]
		[TestCase(10000000000000000L, ((Int16)(-1)), ((Int16)(-100)))]
		[TestCase(10000000000000000L, ((Int16)(-1)), ((Int16)(10000)))]
		[TestCase(10000000000000000L, ((Int16)(-1)), ((Int16)(-10000)))]
		[TestCase(10000000000000000L, ((Int16)(100)), ((Int16)(0)))]
		[TestCase(10000000000000000L, ((Int16)(100)), ((Int16)(1)))]
		[TestCase(10000000000000000L, ((Int16)(100)), ((Int16)(-1)))]
		[TestCase(10000000000000000L, ((Int16)(100)), ((Int16)(100)))]
		[TestCase(10000000000000000L, ((Int16)(100)), ((Int16)(-100)))]
		[TestCase(10000000000000000L, ((Int16)(100)), ((Int16)(10000)))]
		[TestCase(10000000000000000L, ((Int16)(100)), ((Int16)(-10000)))]
		[TestCase(10000000000000000L, ((Int16)(-100)), ((Int16)(0)))]
		[TestCase(10000000000000000L, ((Int16)(-100)), ((Int16)(1)))]
		[TestCase(10000000000000000L, ((Int16)(-100)), ((Int16)(-1)))]
		[TestCase(10000000000000000L, ((Int16)(-100)), ((Int16)(100)))]
		[TestCase(10000000000000000L, ((Int16)(-100)), ((Int16)(-100)))]
		[TestCase(10000000000000000L, ((Int16)(-100)), ((Int16)(10000)))]
		[TestCase(10000000000000000L, ((Int16)(-100)), ((Int16)(-10000)))]
		[TestCase(10000000000000000L, ((Int16)(10000)), ((Int16)(0)))]
		[TestCase(10000000000000000L, ((Int16)(10000)), ((Int16)(1)))]
		[TestCase(10000000000000000L, ((Int16)(10000)), ((Int16)(-1)))]
		[TestCase(10000000000000000L, ((Int16)(10000)), ((Int16)(100)))]
		[TestCase(10000000000000000L, ((Int16)(10000)), ((Int16)(-100)))]
		[TestCase(10000000000000000L, ((Int16)(10000)), ((Int16)(10000)))]
		[TestCase(10000000000000000L, ((Int16)(10000)), ((Int16)(-10000)))]
		[TestCase(10000000000000000L, ((Int16)(-10000)), ((Int16)(0)))]
		[TestCase(10000000000000000L, ((Int16)(-10000)), ((Int16)(1)))]
		[TestCase(10000000000000000L, ((Int16)(-10000)), ((Int16)(-1)))]
		[TestCase(10000000000000000L, ((Int16)(-10000)), ((Int16)(100)))]
		[TestCase(10000000000000000L, ((Int16)(-10000)), ((Int16)(-100)))]
		[TestCase(10000000000000000L, ((Int16)(-10000)), ((Int16)(10000)))]
		[TestCase(10000000000000000L, ((Int16)(-10000)), ((Int16)(-10000)))]
		[TestCase(-10000000000000000L, ((Int16)(0)), ((Int16)(0)))]
		[TestCase(-10000000000000000L, ((Int16)(0)), ((Int16)(1)))]
		[TestCase(-10000000000000000L, ((Int16)(0)), ((Int16)(-1)))]
		[TestCase(-10000000000000000L, ((Int16)(0)), ((Int16)(100)))]
		[TestCase(-10000000000000000L, ((Int16)(0)), ((Int16)(-100)))]
		[TestCase(-10000000000000000L, ((Int16)(0)), ((Int16)(10000)))]
		[TestCase(-10000000000000000L, ((Int16)(0)), ((Int16)(-10000)))]
		[TestCase(-10000000000000000L, ((Int16)(1)), ((Int16)(0)))]
		[TestCase(-10000000000000000L, ((Int16)(1)), ((Int16)(1)))]
		[TestCase(-10000000000000000L, ((Int16)(1)), ((Int16)(-1)))]
		[TestCase(-10000000000000000L, ((Int16)(1)), ((Int16)(100)))]
		[TestCase(-10000000000000000L, ((Int16)(1)), ((Int16)(-100)))]
		[TestCase(-10000000000000000L, ((Int16)(1)), ((Int16)(10000)))]
		[TestCase(-10000000000000000L, ((Int16)(1)), ((Int16)(-10000)))]
		[TestCase(-10000000000000000L, ((Int16)(-1)), ((Int16)(0)))]
		[TestCase(-10000000000000000L, ((Int16)(-1)), ((Int16)(1)))]
		[TestCase(-10000000000000000L, ((Int16)(-1)), ((Int16)(-1)))]
		[TestCase(-10000000000000000L, ((Int16)(-1)), ((Int16)(100)))]
		[TestCase(-10000000000000000L, ((Int16)(-1)), ((Int16)(-100)))]
		[TestCase(-10000000000000000L, ((Int16)(-1)), ((Int16)(10000)))]
		[TestCase(-10000000000000000L, ((Int16)(-1)), ((Int16)(-10000)))]
		[TestCase(-10000000000000000L, ((Int16)(100)), ((Int16)(0)))]
		[TestCase(-10000000000000000L, ((Int16)(100)), ((Int16)(1)))]
		[TestCase(-10000000000000000L, ((Int16)(100)), ((Int16)(-1)))]
		[TestCase(-10000000000000000L, ((Int16)(100)), ((Int16)(100)))]
		[TestCase(-10000000000000000L, ((Int16)(100)), ((Int16)(-100)))]
		[TestCase(-10000000000000000L, ((Int16)(100)), ((Int16)(10000)))]
		[TestCase(-10000000000000000L, ((Int16)(100)), ((Int16)(-10000)))]
		[TestCase(-10000000000000000L, ((Int16)(-100)), ((Int16)(0)))]
		[TestCase(-10000000000000000L, ((Int16)(-100)), ((Int16)(1)))]
		[TestCase(-10000000000000000L, ((Int16)(-100)), ((Int16)(-1)))]
		[TestCase(-10000000000000000L, ((Int16)(-100)), ((Int16)(100)))]
		[TestCase(-10000000000000000L, ((Int16)(-100)), ((Int16)(-100)))]
		[TestCase(-10000000000000000L, ((Int16)(-100)), ((Int16)(10000)))]
		[TestCase(-10000000000000000L, ((Int16)(-100)), ((Int16)(-10000)))]
		[TestCase(-10000000000000000L, ((Int16)(10000)), ((Int16)(0)))]
		[TestCase(-10000000000000000L, ((Int16)(10000)), ((Int16)(1)))]
		[TestCase(-10000000000000000L, ((Int16)(10000)), ((Int16)(-1)))]
		[TestCase(-10000000000000000L, ((Int16)(10000)), ((Int16)(100)))]
		[TestCase(-10000000000000000L, ((Int16)(10000)), ((Int16)(-100)))]
		[TestCase(-10000000000000000L, ((Int16)(10000)), ((Int16)(10000)))]
		[TestCase(-10000000000000000L, ((Int16)(10000)), ((Int16)(-10000)))]
		[TestCase(-10000000000000000L, ((Int16)(-10000)), ((Int16)(0)))]
		[TestCase(-10000000000000000L, ((Int16)(-10000)), ((Int16)(1)))]
		[TestCase(-10000000000000000L, ((Int16)(-10000)), ((Int16)(-1)))]
		[TestCase(-10000000000000000L, ((Int16)(-10000)), ((Int16)(100)))]
		[TestCase(-10000000000000000L, ((Int16)(-10000)), ((Int16)(-100)))]
		[TestCase(-10000000000000000L, ((Int16)(-10000)), ((Int16)(10000)))]
		[TestCase(-10000000000000000L, ((Int16)(-10000)), ((Int16)(-10000)))]
		public void TestClampInt64Int16(Int64 value, Int16 minInclusive, Int16 maxInclusive)
        {
            BigInteger expected = 0, actual = 0;
            bool expectedException = false, actualException = false;

            try
            {
                expected = Clamp(value, minInclusive, maxInclusive);
            }
            catch (ArgumentException)
            {
                expectedException = true;
            }

            try
            {
                actual = MathTrifles.Clamp(value, minInclusive, maxInclusive);
            }
            catch (ArgumentException)
            {
                actualException = true;
            }

            Assert.That(actualException, Is.EqualTo(expectedException));

            if (!expectedException)
            {
                Assert.That(actual, Is.EqualTo(expected));
            }
        }


		[TestCase(0L, ((UInt16)(0)), ((UInt16)(0)))]
		[TestCase(0L, ((UInt16)(0)), ((UInt16)(1)))]
		[TestCase(0L, ((UInt16)(0)), ((UInt16)(100)))]
		[TestCase(0L, ((UInt16)(0)), ((UInt16)(10000)))]
		[TestCase(0L, ((UInt16)(1)), ((UInt16)(0)))]
		[TestCase(0L, ((UInt16)(1)), ((UInt16)(1)))]
		[TestCase(0L, ((UInt16)(1)), ((UInt16)(100)))]
		[TestCase(0L, ((UInt16)(1)), ((UInt16)(10000)))]
		[TestCase(0L, ((UInt16)(100)), ((UInt16)(0)))]
		[TestCase(0L, ((UInt16)(100)), ((UInt16)(1)))]
		[TestCase(0L, ((UInt16)(100)), ((UInt16)(100)))]
		[TestCase(0L, ((UInt16)(100)), ((UInt16)(10000)))]
		[TestCase(0L, ((UInt16)(10000)), ((UInt16)(0)))]
		[TestCase(0L, ((UInt16)(10000)), ((UInt16)(1)))]
		[TestCase(0L, ((UInt16)(10000)), ((UInt16)(100)))]
		[TestCase(0L, ((UInt16)(10000)), ((UInt16)(10000)))]
		[TestCase(1L, ((UInt16)(0)), ((UInt16)(0)))]
		[TestCase(1L, ((UInt16)(0)), ((UInt16)(1)))]
		[TestCase(1L, ((UInt16)(0)), ((UInt16)(100)))]
		[TestCase(1L, ((UInt16)(0)), ((UInt16)(10000)))]
		[TestCase(1L, ((UInt16)(1)), ((UInt16)(0)))]
		[TestCase(1L, ((UInt16)(1)), ((UInt16)(1)))]
		[TestCase(1L, ((UInt16)(1)), ((UInt16)(100)))]
		[TestCase(1L, ((UInt16)(1)), ((UInt16)(10000)))]
		[TestCase(1L, ((UInt16)(100)), ((UInt16)(0)))]
		[TestCase(1L, ((UInt16)(100)), ((UInt16)(1)))]
		[TestCase(1L, ((UInt16)(100)), ((UInt16)(100)))]
		[TestCase(1L, ((UInt16)(100)), ((UInt16)(10000)))]
		[TestCase(1L, ((UInt16)(10000)), ((UInt16)(0)))]
		[TestCase(1L, ((UInt16)(10000)), ((UInt16)(1)))]
		[TestCase(1L, ((UInt16)(10000)), ((UInt16)(100)))]
		[TestCase(1L, ((UInt16)(10000)), ((UInt16)(10000)))]
		[TestCase(-1L, ((UInt16)(0)), ((UInt16)(0)))]
		[TestCase(-1L, ((UInt16)(0)), ((UInt16)(1)))]
		[TestCase(-1L, ((UInt16)(0)), ((UInt16)(100)))]
		[TestCase(-1L, ((UInt16)(0)), ((UInt16)(10000)))]
		[TestCase(-1L, ((UInt16)(1)), ((UInt16)(0)))]
		[TestCase(-1L, ((UInt16)(1)), ((UInt16)(1)))]
		[TestCase(-1L, ((UInt16)(1)), ((UInt16)(100)))]
		[TestCase(-1L, ((UInt16)(1)), ((UInt16)(10000)))]
		[TestCase(-1L, ((UInt16)(100)), ((UInt16)(0)))]
		[TestCase(-1L, ((UInt16)(100)), ((UInt16)(1)))]
		[TestCase(-1L, ((UInt16)(100)), ((UInt16)(100)))]
		[TestCase(-1L, ((UInt16)(100)), ((UInt16)(10000)))]
		[TestCase(-1L, ((UInt16)(10000)), ((UInt16)(0)))]
		[TestCase(-1L, ((UInt16)(10000)), ((UInt16)(1)))]
		[TestCase(-1L, ((UInt16)(10000)), ((UInt16)(100)))]
		[TestCase(-1L, ((UInt16)(10000)), ((UInt16)(10000)))]
		[TestCase(100L, ((UInt16)(0)), ((UInt16)(0)))]
		[TestCase(100L, ((UInt16)(0)), ((UInt16)(1)))]
		[TestCase(100L, ((UInt16)(0)), ((UInt16)(100)))]
		[TestCase(100L, ((UInt16)(0)), ((UInt16)(10000)))]
		[TestCase(100L, ((UInt16)(1)), ((UInt16)(0)))]
		[TestCase(100L, ((UInt16)(1)), ((UInt16)(1)))]
		[TestCase(100L, ((UInt16)(1)), ((UInt16)(100)))]
		[TestCase(100L, ((UInt16)(1)), ((UInt16)(10000)))]
		[TestCase(100L, ((UInt16)(100)), ((UInt16)(0)))]
		[TestCase(100L, ((UInt16)(100)), ((UInt16)(1)))]
		[TestCase(100L, ((UInt16)(100)), ((UInt16)(100)))]
		[TestCase(100L, ((UInt16)(100)), ((UInt16)(10000)))]
		[TestCase(100L, ((UInt16)(10000)), ((UInt16)(0)))]
		[TestCase(100L, ((UInt16)(10000)), ((UInt16)(1)))]
		[TestCase(100L, ((UInt16)(10000)), ((UInt16)(100)))]
		[TestCase(100L, ((UInt16)(10000)), ((UInt16)(10000)))]
		[TestCase(-100L, ((UInt16)(0)), ((UInt16)(0)))]
		[TestCase(-100L, ((UInt16)(0)), ((UInt16)(1)))]
		[TestCase(-100L, ((UInt16)(0)), ((UInt16)(100)))]
		[TestCase(-100L, ((UInt16)(0)), ((UInt16)(10000)))]
		[TestCase(-100L, ((UInt16)(1)), ((UInt16)(0)))]
		[TestCase(-100L, ((UInt16)(1)), ((UInt16)(1)))]
		[TestCase(-100L, ((UInt16)(1)), ((UInt16)(100)))]
		[TestCase(-100L, ((UInt16)(1)), ((UInt16)(10000)))]
		[TestCase(-100L, ((UInt16)(100)), ((UInt16)(0)))]
		[TestCase(-100L, ((UInt16)(100)), ((UInt16)(1)))]
		[TestCase(-100L, ((UInt16)(100)), ((UInt16)(100)))]
		[TestCase(-100L, ((UInt16)(100)), ((UInt16)(10000)))]
		[TestCase(-100L, ((UInt16)(10000)), ((UInt16)(0)))]
		[TestCase(-100L, ((UInt16)(10000)), ((UInt16)(1)))]
		[TestCase(-100L, ((UInt16)(10000)), ((UInt16)(100)))]
		[TestCase(-100L, ((UInt16)(10000)), ((UInt16)(10000)))]
		[TestCase(10000L, ((UInt16)(0)), ((UInt16)(0)))]
		[TestCase(10000L, ((UInt16)(0)), ((UInt16)(1)))]
		[TestCase(10000L, ((UInt16)(0)), ((UInt16)(100)))]
		[TestCase(10000L, ((UInt16)(0)), ((UInt16)(10000)))]
		[TestCase(10000L, ((UInt16)(1)), ((UInt16)(0)))]
		[TestCase(10000L, ((UInt16)(1)), ((UInt16)(1)))]
		[TestCase(10000L, ((UInt16)(1)), ((UInt16)(100)))]
		[TestCase(10000L, ((UInt16)(1)), ((UInt16)(10000)))]
		[TestCase(10000L, ((UInt16)(100)), ((UInt16)(0)))]
		[TestCase(10000L, ((UInt16)(100)), ((UInt16)(1)))]
		[TestCase(10000L, ((UInt16)(100)), ((UInt16)(100)))]
		[TestCase(10000L, ((UInt16)(100)), ((UInt16)(10000)))]
		[TestCase(10000L, ((UInt16)(10000)), ((UInt16)(0)))]
		[TestCase(10000L, ((UInt16)(10000)), ((UInt16)(1)))]
		[TestCase(10000L, ((UInt16)(10000)), ((UInt16)(100)))]
		[TestCase(10000L, ((UInt16)(10000)), ((UInt16)(10000)))]
		[TestCase(-10000L, ((UInt16)(0)), ((UInt16)(0)))]
		[TestCase(-10000L, ((UInt16)(0)), ((UInt16)(1)))]
		[TestCase(-10000L, ((UInt16)(0)), ((UInt16)(100)))]
		[TestCase(-10000L, ((UInt16)(0)), ((UInt16)(10000)))]
		[TestCase(-10000L, ((UInt16)(1)), ((UInt16)(0)))]
		[TestCase(-10000L, ((UInt16)(1)), ((UInt16)(1)))]
		[TestCase(-10000L, ((UInt16)(1)), ((UInt16)(100)))]
		[TestCase(-10000L, ((UInt16)(1)), ((UInt16)(10000)))]
		[TestCase(-10000L, ((UInt16)(100)), ((UInt16)(0)))]
		[TestCase(-10000L, ((UInt16)(100)), ((UInt16)(1)))]
		[TestCase(-10000L, ((UInt16)(100)), ((UInt16)(100)))]
		[TestCase(-10000L, ((UInt16)(100)), ((UInt16)(10000)))]
		[TestCase(-10000L, ((UInt16)(10000)), ((UInt16)(0)))]
		[TestCase(-10000L, ((UInt16)(10000)), ((UInt16)(1)))]
		[TestCase(-10000L, ((UInt16)(10000)), ((UInt16)(100)))]
		[TestCase(-10000L, ((UInt16)(10000)), ((UInt16)(10000)))]
		[TestCase(100000000L, ((UInt16)(0)), ((UInt16)(0)))]
		[TestCase(100000000L, ((UInt16)(0)), ((UInt16)(1)))]
		[TestCase(100000000L, ((UInt16)(0)), ((UInt16)(100)))]
		[TestCase(100000000L, ((UInt16)(0)), ((UInt16)(10000)))]
		[TestCase(100000000L, ((UInt16)(1)), ((UInt16)(0)))]
		[TestCase(100000000L, ((UInt16)(1)), ((UInt16)(1)))]
		[TestCase(100000000L, ((UInt16)(1)), ((UInt16)(100)))]
		[TestCase(100000000L, ((UInt16)(1)), ((UInt16)(10000)))]
		[TestCase(100000000L, ((UInt16)(100)), ((UInt16)(0)))]
		[TestCase(100000000L, ((UInt16)(100)), ((UInt16)(1)))]
		[TestCase(100000000L, ((UInt16)(100)), ((UInt16)(100)))]
		[TestCase(100000000L, ((UInt16)(100)), ((UInt16)(10000)))]
		[TestCase(100000000L, ((UInt16)(10000)), ((UInt16)(0)))]
		[TestCase(100000000L, ((UInt16)(10000)), ((UInt16)(1)))]
		[TestCase(100000000L, ((UInt16)(10000)), ((UInt16)(100)))]
		[TestCase(100000000L, ((UInt16)(10000)), ((UInt16)(10000)))]
		[TestCase(-100000000L, ((UInt16)(0)), ((UInt16)(0)))]
		[TestCase(-100000000L, ((UInt16)(0)), ((UInt16)(1)))]
		[TestCase(-100000000L, ((UInt16)(0)), ((UInt16)(100)))]
		[TestCase(-100000000L, ((UInt16)(0)), ((UInt16)(10000)))]
		[TestCase(-100000000L, ((UInt16)(1)), ((UInt16)(0)))]
		[TestCase(-100000000L, ((UInt16)(1)), ((UInt16)(1)))]
		[TestCase(-100000000L, ((UInt16)(1)), ((UInt16)(100)))]
		[TestCase(-100000000L, ((UInt16)(1)), ((UInt16)(10000)))]
		[TestCase(-100000000L, ((UInt16)(100)), ((UInt16)(0)))]
		[TestCase(-100000000L, ((UInt16)(100)), ((UInt16)(1)))]
		[TestCase(-100000000L, ((UInt16)(100)), ((UInt16)(100)))]
		[TestCase(-100000000L, ((UInt16)(100)), ((UInt16)(10000)))]
		[TestCase(-100000000L, ((UInt16)(10000)), ((UInt16)(0)))]
		[TestCase(-100000000L, ((UInt16)(10000)), ((UInt16)(1)))]
		[TestCase(-100000000L, ((UInt16)(10000)), ((UInt16)(100)))]
		[TestCase(-100000000L, ((UInt16)(10000)), ((UInt16)(10000)))]
		[TestCase(10000000000000000L, ((UInt16)(0)), ((UInt16)(0)))]
		[TestCase(10000000000000000L, ((UInt16)(0)), ((UInt16)(1)))]
		[TestCase(10000000000000000L, ((UInt16)(0)), ((UInt16)(100)))]
		[TestCase(10000000000000000L, ((UInt16)(0)), ((UInt16)(10000)))]
		[TestCase(10000000000000000L, ((UInt16)(1)), ((UInt16)(0)))]
		[TestCase(10000000000000000L, ((UInt16)(1)), ((UInt16)(1)))]
		[TestCase(10000000000000000L, ((UInt16)(1)), ((UInt16)(100)))]
		[TestCase(10000000000000000L, ((UInt16)(1)), ((UInt16)(10000)))]
		[TestCase(10000000000000000L, ((UInt16)(100)), ((UInt16)(0)))]
		[TestCase(10000000000000000L, ((UInt16)(100)), ((UInt16)(1)))]
		[TestCase(10000000000000000L, ((UInt16)(100)), ((UInt16)(100)))]
		[TestCase(10000000000000000L, ((UInt16)(100)), ((UInt16)(10000)))]
		[TestCase(10000000000000000L, ((UInt16)(10000)), ((UInt16)(0)))]
		[TestCase(10000000000000000L, ((UInt16)(10000)), ((UInt16)(1)))]
		[TestCase(10000000000000000L, ((UInt16)(10000)), ((UInt16)(100)))]
		[TestCase(10000000000000000L, ((UInt16)(10000)), ((UInt16)(10000)))]
		[TestCase(-10000000000000000L, ((UInt16)(0)), ((UInt16)(0)))]
		[TestCase(-10000000000000000L, ((UInt16)(0)), ((UInt16)(1)))]
		[TestCase(-10000000000000000L, ((UInt16)(0)), ((UInt16)(100)))]
		[TestCase(-10000000000000000L, ((UInt16)(0)), ((UInt16)(10000)))]
		[TestCase(-10000000000000000L, ((UInt16)(1)), ((UInt16)(0)))]
		[TestCase(-10000000000000000L, ((UInt16)(1)), ((UInt16)(1)))]
		[TestCase(-10000000000000000L, ((UInt16)(1)), ((UInt16)(100)))]
		[TestCase(-10000000000000000L, ((UInt16)(1)), ((UInt16)(10000)))]
		[TestCase(-10000000000000000L, ((UInt16)(100)), ((UInt16)(0)))]
		[TestCase(-10000000000000000L, ((UInt16)(100)), ((UInt16)(1)))]
		[TestCase(-10000000000000000L, ((UInt16)(100)), ((UInt16)(100)))]
		[TestCase(-10000000000000000L, ((UInt16)(100)), ((UInt16)(10000)))]
		[TestCase(-10000000000000000L, ((UInt16)(10000)), ((UInt16)(0)))]
		[TestCase(-10000000000000000L, ((UInt16)(10000)), ((UInt16)(1)))]
		[TestCase(-10000000000000000L, ((UInt16)(10000)), ((UInt16)(100)))]
		[TestCase(-10000000000000000L, ((UInt16)(10000)), ((UInt16)(10000)))]
		public void TestClampInt64UInt16(Int64 value, UInt16 minInclusive, UInt16 maxInclusive)
        {
            BigInteger expected = 0, actual = 0;
            bool expectedException = false, actualException = false;

            try
            {
                expected = Clamp(value, minInclusive, maxInclusive);
            }
            catch (ArgumentException)
            {
                expectedException = true;
            }

            try
            {
                actual = MathTrifles.Clamp(value, minInclusive, maxInclusive);
            }
            catch (ArgumentException)
            {
                actualException = true;
            }

            Assert.That(actualException, Is.EqualTo(expectedException));

            if (!expectedException)
            {
                Assert.That(actual, Is.EqualTo(expected));
            }
        }


		[TestCase(0L, 0, 0)]
		[TestCase(0L, 0, 1)]
		[TestCase(0L, 0, -1)]
		[TestCase(0L, 0, 100)]
		[TestCase(0L, 0, -100)]
		[TestCase(0L, 0, 10000)]
		[TestCase(0L, 0, -10000)]
		[TestCase(0L, 0, 100000000)]
		[TestCase(0L, 0, -100000000)]
		[TestCase(0L, 1, 0)]
		[TestCase(0L, 1, 1)]
		[TestCase(0L, 1, -1)]
		[TestCase(0L, 1, 100)]
		[TestCase(0L, 1, -100)]
		[TestCase(0L, 1, 10000)]
		[TestCase(0L, 1, -10000)]
		[TestCase(0L, 1, 100000000)]
		[TestCase(0L, 1, -100000000)]
		[TestCase(0L, -1, 0)]
		[TestCase(0L, -1, 1)]
		[TestCase(0L, -1, -1)]
		[TestCase(0L, -1, 100)]
		[TestCase(0L, -1, -100)]
		[TestCase(0L, -1, 10000)]
		[TestCase(0L, -1, -10000)]
		[TestCase(0L, -1, 100000000)]
		[TestCase(0L, -1, -100000000)]
		[TestCase(0L, 100, 0)]
		[TestCase(0L, 100, 1)]
		[TestCase(0L, 100, -1)]
		[TestCase(0L, 100, 100)]
		[TestCase(0L, 100, -100)]
		[TestCase(0L, 100, 10000)]
		[TestCase(0L, 100, -10000)]
		[TestCase(0L, 100, 100000000)]
		[TestCase(0L, 100, -100000000)]
		[TestCase(0L, -100, 0)]
		[TestCase(0L, -100, 1)]
		[TestCase(0L, -100, -1)]
		[TestCase(0L, -100, 100)]
		[TestCase(0L, -100, -100)]
		[TestCase(0L, -100, 10000)]
		[TestCase(0L, -100, -10000)]
		[TestCase(0L, -100, 100000000)]
		[TestCase(0L, -100, -100000000)]
		[TestCase(0L, 10000, 0)]
		[TestCase(0L, 10000, 1)]
		[TestCase(0L, 10000, -1)]
		[TestCase(0L, 10000, 100)]
		[TestCase(0L, 10000, -100)]
		[TestCase(0L, 10000, 10000)]
		[TestCase(0L, 10000, -10000)]
		[TestCase(0L, 10000, 100000000)]
		[TestCase(0L, 10000, -100000000)]
		[TestCase(0L, -10000, 0)]
		[TestCase(0L, -10000, 1)]
		[TestCase(0L, -10000, -1)]
		[TestCase(0L, -10000, 100)]
		[TestCase(0L, -10000, -100)]
		[TestCase(0L, -10000, 10000)]
		[TestCase(0L, -10000, -10000)]
		[TestCase(0L, -10000, 100000000)]
		[TestCase(0L, -10000, -100000000)]
		[TestCase(0L, 100000000, 0)]
		[TestCase(0L, 100000000, 1)]
		[TestCase(0L, 100000000, -1)]
		[TestCase(0L, 100000000, 100)]
		[TestCase(0L, 100000000, -100)]
		[TestCase(0L, 100000000, 10000)]
		[TestCase(0L, 100000000, -10000)]
		[TestCase(0L, 100000000, 100000000)]
		[TestCase(0L, 100000000, -100000000)]
		[TestCase(0L, -100000000, 0)]
		[TestCase(0L, -100000000, 1)]
		[TestCase(0L, -100000000, -1)]
		[TestCase(0L, -100000000, 100)]
		[TestCase(0L, -100000000, -100)]
		[TestCase(0L, -100000000, 10000)]
		[TestCase(0L, -100000000, -10000)]
		[TestCase(0L, -100000000, 100000000)]
		[TestCase(0L, -100000000, -100000000)]
		[TestCase(1L, 0, 0)]
		[TestCase(1L, 0, 1)]
		[TestCase(1L, 0, -1)]
		[TestCase(1L, 0, 100)]
		[TestCase(1L, 0, -100)]
		[TestCase(1L, 0, 10000)]
		[TestCase(1L, 0, -10000)]
		[TestCase(1L, 0, 100000000)]
		[TestCase(1L, 0, -100000000)]
		[TestCase(1L, 1, 0)]
		[TestCase(1L, 1, 1)]
		[TestCase(1L, 1, -1)]
		[TestCase(1L, 1, 100)]
		[TestCase(1L, 1, -100)]
		[TestCase(1L, 1, 10000)]
		[TestCase(1L, 1, -10000)]
		[TestCase(1L, 1, 100000000)]
		[TestCase(1L, 1, -100000000)]
		[TestCase(1L, -1, 0)]
		[TestCase(1L, -1, 1)]
		[TestCase(1L, -1, -1)]
		[TestCase(1L, -1, 100)]
		[TestCase(1L, -1, -100)]
		[TestCase(1L, -1, 10000)]
		[TestCase(1L, -1, -10000)]
		[TestCase(1L, -1, 100000000)]
		[TestCase(1L, -1, -100000000)]
		[TestCase(1L, 100, 0)]
		[TestCase(1L, 100, 1)]
		[TestCase(1L, 100, -1)]
		[TestCase(1L, 100, 100)]
		[TestCase(1L, 100, -100)]
		[TestCase(1L, 100, 10000)]
		[TestCase(1L, 100, -10000)]
		[TestCase(1L, 100, 100000000)]
		[TestCase(1L, 100, -100000000)]
		[TestCase(1L, -100, 0)]
		[TestCase(1L, -100, 1)]
		[TestCase(1L, -100, -1)]
		[TestCase(1L, -100, 100)]
		[TestCase(1L, -100, -100)]
		[TestCase(1L, -100, 10000)]
		[TestCase(1L, -100, -10000)]
		[TestCase(1L, -100, 100000000)]
		[TestCase(1L, -100, -100000000)]
		[TestCase(1L, 10000, 0)]
		[TestCase(1L, 10000, 1)]
		[TestCase(1L, 10000, -1)]
		[TestCase(1L, 10000, 100)]
		[TestCase(1L, 10000, -100)]
		[TestCase(1L, 10000, 10000)]
		[TestCase(1L, 10000, -10000)]
		[TestCase(1L, 10000, 100000000)]
		[TestCase(1L, 10000, -100000000)]
		[TestCase(1L, -10000, 0)]
		[TestCase(1L, -10000, 1)]
		[TestCase(1L, -10000, -1)]
		[TestCase(1L, -10000, 100)]
		[TestCase(1L, -10000, -100)]
		[TestCase(1L, -10000, 10000)]
		[TestCase(1L, -10000, -10000)]
		[TestCase(1L, -10000, 100000000)]
		[TestCase(1L, -10000, -100000000)]
		[TestCase(1L, 100000000, 0)]
		[TestCase(1L, 100000000, 1)]
		[TestCase(1L, 100000000, -1)]
		[TestCase(1L, 100000000, 100)]
		[TestCase(1L, 100000000, -100)]
		[TestCase(1L, 100000000, 10000)]
		[TestCase(1L, 100000000, -10000)]
		[TestCase(1L, 100000000, 100000000)]
		[TestCase(1L, 100000000, -100000000)]
		[TestCase(1L, -100000000, 0)]
		[TestCase(1L, -100000000, 1)]
		[TestCase(1L, -100000000, -1)]
		[TestCase(1L, -100000000, 100)]
		[TestCase(1L, -100000000, -100)]
		[TestCase(1L, -100000000, 10000)]
		[TestCase(1L, -100000000, -10000)]
		[TestCase(1L, -100000000, 100000000)]
		[TestCase(1L, -100000000, -100000000)]
		[TestCase(-1L, 0, 0)]
		[TestCase(-1L, 0, 1)]
		[TestCase(-1L, 0, -1)]
		[TestCase(-1L, 0, 100)]
		[TestCase(-1L, 0, -100)]
		[TestCase(-1L, 0, 10000)]
		[TestCase(-1L, 0, -10000)]
		[TestCase(-1L, 0, 100000000)]
		[TestCase(-1L, 0, -100000000)]
		[TestCase(-1L, 1, 0)]
		[TestCase(-1L, 1, 1)]
		[TestCase(-1L, 1, -1)]
		[TestCase(-1L, 1, 100)]
		[TestCase(-1L, 1, -100)]
		[TestCase(-1L, 1, 10000)]
		[TestCase(-1L, 1, -10000)]
		[TestCase(-1L, 1, 100000000)]
		[TestCase(-1L, 1, -100000000)]
		[TestCase(-1L, -1, 0)]
		[TestCase(-1L, -1, 1)]
		[TestCase(-1L, -1, -1)]
		[TestCase(-1L, -1, 100)]
		[TestCase(-1L, -1, -100)]
		[TestCase(-1L, -1, 10000)]
		[TestCase(-1L, -1, -10000)]
		[TestCase(-1L, -1, 100000000)]
		[TestCase(-1L, -1, -100000000)]
		[TestCase(-1L, 100, 0)]
		[TestCase(-1L, 100, 1)]
		[TestCase(-1L, 100, -1)]
		[TestCase(-1L, 100, 100)]
		[TestCase(-1L, 100, -100)]
		[TestCase(-1L, 100, 10000)]
		[TestCase(-1L, 100, -10000)]
		[TestCase(-1L, 100, 100000000)]
		[TestCase(-1L, 100, -100000000)]
		[TestCase(-1L, -100, 0)]
		[TestCase(-1L, -100, 1)]
		[TestCase(-1L, -100, -1)]
		[TestCase(-1L, -100, 100)]
		[TestCase(-1L, -100, -100)]
		[TestCase(-1L, -100, 10000)]
		[TestCase(-1L, -100, -10000)]
		[TestCase(-1L, -100, 100000000)]
		[TestCase(-1L, -100, -100000000)]
		[TestCase(-1L, 10000, 0)]
		[TestCase(-1L, 10000, 1)]
		[TestCase(-1L, 10000, -1)]
		[TestCase(-1L, 10000, 100)]
		[TestCase(-1L, 10000, -100)]
		[TestCase(-1L, 10000, 10000)]
		[TestCase(-1L, 10000, -10000)]
		[TestCase(-1L, 10000, 100000000)]
		[TestCase(-1L, 10000, -100000000)]
		[TestCase(-1L, -10000, 0)]
		[TestCase(-1L, -10000, 1)]
		[TestCase(-1L, -10000, -1)]
		[TestCase(-1L, -10000, 100)]
		[TestCase(-1L, -10000, -100)]
		[TestCase(-1L, -10000, 10000)]
		[TestCase(-1L, -10000, -10000)]
		[TestCase(-1L, -10000, 100000000)]
		[TestCase(-1L, -10000, -100000000)]
		[TestCase(-1L, 100000000, 0)]
		[TestCase(-1L, 100000000, 1)]
		[TestCase(-1L, 100000000, -1)]
		[TestCase(-1L, 100000000, 100)]
		[TestCase(-1L, 100000000, -100)]
		[TestCase(-1L, 100000000, 10000)]
		[TestCase(-1L, 100000000, -10000)]
		[TestCase(-1L, 100000000, 100000000)]
		[TestCase(-1L, 100000000, -100000000)]
		[TestCase(-1L, -100000000, 0)]
		[TestCase(-1L, -100000000, 1)]
		[TestCase(-1L, -100000000, -1)]
		[TestCase(-1L, -100000000, 100)]
		[TestCase(-1L, -100000000, -100)]
		[TestCase(-1L, -100000000, 10000)]
		[TestCase(-1L, -100000000, -10000)]
		[TestCase(-1L, -100000000, 100000000)]
		[TestCase(-1L, -100000000, -100000000)]
		[TestCase(100L, 0, 0)]
		[TestCase(100L, 0, 1)]
		[TestCase(100L, 0, -1)]
		[TestCase(100L, 0, 100)]
		[TestCase(100L, 0, -100)]
		[TestCase(100L, 0, 10000)]
		[TestCase(100L, 0, -10000)]
		[TestCase(100L, 0, 100000000)]
		[TestCase(100L, 0, -100000000)]
		[TestCase(100L, 1, 0)]
		[TestCase(100L, 1, 1)]
		[TestCase(100L, 1, -1)]
		[TestCase(100L, 1, 100)]
		[TestCase(100L, 1, -100)]
		[TestCase(100L, 1, 10000)]
		[TestCase(100L, 1, -10000)]
		[TestCase(100L, 1, 100000000)]
		[TestCase(100L, 1, -100000000)]
		[TestCase(100L, -1, 0)]
		[TestCase(100L, -1, 1)]
		[TestCase(100L, -1, -1)]
		[TestCase(100L, -1, 100)]
		[TestCase(100L, -1, -100)]
		[TestCase(100L, -1, 10000)]
		[TestCase(100L, -1, -10000)]
		[TestCase(100L, -1, 100000000)]
		[TestCase(100L, -1, -100000000)]
		[TestCase(100L, 100, 0)]
		[TestCase(100L, 100, 1)]
		[TestCase(100L, 100, -1)]
		[TestCase(100L, 100, 100)]
		[TestCase(100L, 100, -100)]
		[TestCase(100L, 100, 10000)]
		[TestCase(100L, 100, -10000)]
		[TestCase(100L, 100, 100000000)]
		[TestCase(100L, 100, -100000000)]
		[TestCase(100L, -100, 0)]
		[TestCase(100L, -100, 1)]
		[TestCase(100L, -100, -1)]
		[TestCase(100L, -100, 100)]
		[TestCase(100L, -100, -100)]
		[TestCase(100L, -100, 10000)]
		[TestCase(100L, -100, -10000)]
		[TestCase(100L, -100, 100000000)]
		[TestCase(100L, -100, -100000000)]
		[TestCase(100L, 10000, 0)]
		[TestCase(100L, 10000, 1)]
		[TestCase(100L, 10000, -1)]
		[TestCase(100L, 10000, 100)]
		[TestCase(100L, 10000, -100)]
		[TestCase(100L, 10000, 10000)]
		[TestCase(100L, 10000, -10000)]
		[TestCase(100L, 10000, 100000000)]
		[TestCase(100L, 10000, -100000000)]
		[TestCase(100L, -10000, 0)]
		[TestCase(100L, -10000, 1)]
		[TestCase(100L, -10000, -1)]
		[TestCase(100L, -10000, 100)]
		[TestCase(100L, -10000, -100)]
		[TestCase(100L, -10000, 10000)]
		[TestCase(100L, -10000, -10000)]
		[TestCase(100L, -10000, 100000000)]
		[TestCase(100L, -10000, -100000000)]
		[TestCase(100L, 100000000, 0)]
		[TestCase(100L, 100000000, 1)]
		[TestCase(100L, 100000000, -1)]
		[TestCase(100L, 100000000, 100)]
		[TestCase(100L, 100000000, -100)]
		[TestCase(100L, 100000000, 10000)]
		[TestCase(100L, 100000000, -10000)]
		[TestCase(100L, 100000000, 100000000)]
		[TestCase(100L, 100000000, -100000000)]
		[TestCase(100L, -100000000, 0)]
		[TestCase(100L, -100000000, 1)]
		[TestCase(100L, -100000000, -1)]
		[TestCase(100L, -100000000, 100)]
		[TestCase(100L, -100000000, -100)]
		[TestCase(100L, -100000000, 10000)]
		[TestCase(100L, -100000000, -10000)]
		[TestCase(100L, -100000000, 100000000)]
		[TestCase(100L, -100000000, -100000000)]
		[TestCase(-100L, 0, 0)]
		[TestCase(-100L, 0, 1)]
		[TestCase(-100L, 0, -1)]
		[TestCase(-100L, 0, 100)]
		[TestCase(-100L, 0, -100)]
		[TestCase(-100L, 0, 10000)]
		[TestCase(-100L, 0, -10000)]
		[TestCase(-100L, 0, 100000000)]
		[TestCase(-100L, 0, -100000000)]
		[TestCase(-100L, 1, 0)]
		[TestCase(-100L, 1, 1)]
		[TestCase(-100L, 1, -1)]
		[TestCase(-100L, 1, 100)]
		[TestCase(-100L, 1, -100)]
		[TestCase(-100L, 1, 10000)]
		[TestCase(-100L, 1, -10000)]
		[TestCase(-100L, 1, 100000000)]
		[TestCase(-100L, 1, -100000000)]
		[TestCase(-100L, -1, 0)]
		[TestCase(-100L, -1, 1)]
		[TestCase(-100L, -1, -1)]
		[TestCase(-100L, -1, 100)]
		[TestCase(-100L, -1, -100)]
		[TestCase(-100L, -1, 10000)]
		[TestCase(-100L, -1, -10000)]
		[TestCase(-100L, -1, 100000000)]
		[TestCase(-100L, -1, -100000000)]
		[TestCase(-100L, 100, 0)]
		[TestCase(-100L, 100, 1)]
		[TestCase(-100L, 100, -1)]
		[TestCase(-100L, 100, 100)]
		[TestCase(-100L, 100, -100)]
		[TestCase(-100L, 100, 10000)]
		[TestCase(-100L, 100, -10000)]
		[TestCase(-100L, 100, 100000000)]
		[TestCase(-100L, 100, -100000000)]
		[TestCase(-100L, -100, 0)]
		[TestCase(-100L, -100, 1)]
		[TestCase(-100L, -100, -1)]
		[TestCase(-100L, -100, 100)]
		[TestCase(-100L, -100, -100)]
		[TestCase(-100L, -100, 10000)]
		[TestCase(-100L, -100, -10000)]
		[TestCase(-100L, -100, 100000000)]
		[TestCase(-100L, -100, -100000000)]
		[TestCase(-100L, 10000, 0)]
		[TestCase(-100L, 10000, 1)]
		[TestCase(-100L, 10000, -1)]
		[TestCase(-100L, 10000, 100)]
		[TestCase(-100L, 10000, -100)]
		[TestCase(-100L, 10000, 10000)]
		[TestCase(-100L, 10000, -10000)]
		[TestCase(-100L, 10000, 100000000)]
		[TestCase(-100L, 10000, -100000000)]
		[TestCase(-100L, -10000, 0)]
		[TestCase(-100L, -10000, 1)]
		[TestCase(-100L, -10000, -1)]
		[TestCase(-100L, -10000, 100)]
		[TestCase(-100L, -10000, -100)]
		[TestCase(-100L, -10000, 10000)]
		[TestCase(-100L, -10000, -10000)]
		[TestCase(-100L, -10000, 100000000)]
		[TestCase(-100L, -10000, -100000000)]
		[TestCase(-100L, 100000000, 0)]
		[TestCase(-100L, 100000000, 1)]
		[TestCase(-100L, 100000000, -1)]
		[TestCase(-100L, 100000000, 100)]
		[TestCase(-100L, 100000000, -100)]
		[TestCase(-100L, 100000000, 10000)]
		[TestCase(-100L, 100000000, -10000)]
		[TestCase(-100L, 100000000, 100000000)]
		[TestCase(-100L, 100000000, -100000000)]
		[TestCase(-100L, -100000000, 0)]
		[TestCase(-100L, -100000000, 1)]
		[TestCase(-100L, -100000000, -1)]
		[TestCase(-100L, -100000000, 100)]
		[TestCase(-100L, -100000000, -100)]
		[TestCase(-100L, -100000000, 10000)]
		[TestCase(-100L, -100000000, -10000)]
		[TestCase(-100L, -100000000, 100000000)]
		[TestCase(-100L, -100000000, -100000000)]
		[TestCase(10000L, 0, 0)]
		[TestCase(10000L, 0, 1)]
		[TestCase(10000L, 0, -1)]
		[TestCase(10000L, 0, 100)]
		[TestCase(10000L, 0, -100)]
		[TestCase(10000L, 0, 10000)]
		[TestCase(10000L, 0, -10000)]
		[TestCase(10000L, 0, 100000000)]
		[TestCase(10000L, 0, -100000000)]
		[TestCase(10000L, 1, 0)]
		[TestCase(10000L, 1, 1)]
		[TestCase(10000L, 1, -1)]
		[TestCase(10000L, 1, 100)]
		[TestCase(10000L, 1, -100)]
		[TestCase(10000L, 1, 10000)]
		[TestCase(10000L, 1, -10000)]
		[TestCase(10000L, 1, 100000000)]
		[TestCase(10000L, 1, -100000000)]
		[TestCase(10000L, -1, 0)]
		[TestCase(10000L, -1, 1)]
		[TestCase(10000L, -1, -1)]
		[TestCase(10000L, -1, 100)]
		[TestCase(10000L, -1, -100)]
		[TestCase(10000L, -1, 10000)]
		[TestCase(10000L, -1, -10000)]
		[TestCase(10000L, -1, 100000000)]
		[TestCase(10000L, -1, -100000000)]
		[TestCase(10000L, 100, 0)]
		[TestCase(10000L, 100, 1)]
		[TestCase(10000L, 100, -1)]
		[TestCase(10000L, 100, 100)]
		[TestCase(10000L, 100, -100)]
		[TestCase(10000L, 100, 10000)]
		[TestCase(10000L, 100, -10000)]
		[TestCase(10000L, 100, 100000000)]
		[TestCase(10000L, 100, -100000000)]
		[TestCase(10000L, -100, 0)]
		[TestCase(10000L, -100, 1)]
		[TestCase(10000L, -100, -1)]
		[TestCase(10000L, -100, 100)]
		[TestCase(10000L, -100, -100)]
		[TestCase(10000L, -100, 10000)]
		[TestCase(10000L, -100, -10000)]
		[TestCase(10000L, -100, 100000000)]
		[TestCase(10000L, -100, -100000000)]
		[TestCase(10000L, 10000, 0)]
		[TestCase(10000L, 10000, 1)]
		[TestCase(10000L, 10000, -1)]
		[TestCase(10000L, 10000, 100)]
		[TestCase(10000L, 10000, -100)]
		[TestCase(10000L, 10000, 10000)]
		[TestCase(10000L, 10000, -10000)]
		[TestCase(10000L, 10000, 100000000)]
		[TestCase(10000L, 10000, -100000000)]
		[TestCase(10000L, -10000, 0)]
		[TestCase(10000L, -10000, 1)]
		[TestCase(10000L, -10000, -1)]
		[TestCase(10000L, -10000, 100)]
		[TestCase(10000L, -10000, -100)]
		[TestCase(10000L, -10000, 10000)]
		[TestCase(10000L, -10000, -10000)]
		[TestCase(10000L, -10000, 100000000)]
		[TestCase(10000L, -10000, -100000000)]
		[TestCase(10000L, 100000000, 0)]
		[TestCase(10000L, 100000000, 1)]
		[TestCase(10000L, 100000000, -1)]
		[TestCase(10000L, 100000000, 100)]
		[TestCase(10000L, 100000000, -100)]
		[TestCase(10000L, 100000000, 10000)]
		[TestCase(10000L, 100000000, -10000)]
		[TestCase(10000L, 100000000, 100000000)]
		[TestCase(10000L, 100000000, -100000000)]
		[TestCase(10000L, -100000000, 0)]
		[TestCase(10000L, -100000000, 1)]
		[TestCase(10000L, -100000000, -1)]
		[TestCase(10000L, -100000000, 100)]
		[TestCase(10000L, -100000000, -100)]
		[TestCase(10000L, -100000000, 10000)]
		[TestCase(10000L, -100000000, -10000)]
		[TestCase(10000L, -100000000, 100000000)]
		[TestCase(10000L, -100000000, -100000000)]
		[TestCase(-10000L, 0, 0)]
		[TestCase(-10000L, 0, 1)]
		[TestCase(-10000L, 0, -1)]
		[TestCase(-10000L, 0, 100)]
		[TestCase(-10000L, 0, -100)]
		[TestCase(-10000L, 0, 10000)]
		[TestCase(-10000L, 0, -10000)]
		[TestCase(-10000L, 0, 100000000)]
		[TestCase(-10000L, 0, -100000000)]
		[TestCase(-10000L, 1, 0)]
		[TestCase(-10000L, 1, 1)]
		[TestCase(-10000L, 1, -1)]
		[TestCase(-10000L, 1, 100)]
		[TestCase(-10000L, 1, -100)]
		[TestCase(-10000L, 1, 10000)]
		[TestCase(-10000L, 1, -10000)]
		[TestCase(-10000L, 1, 100000000)]
		[TestCase(-10000L, 1, -100000000)]
		[TestCase(-10000L, -1, 0)]
		[TestCase(-10000L, -1, 1)]
		[TestCase(-10000L, -1, -1)]
		[TestCase(-10000L, -1, 100)]
		[TestCase(-10000L, -1, -100)]
		[TestCase(-10000L, -1, 10000)]
		[TestCase(-10000L, -1, -10000)]
		[TestCase(-10000L, -1, 100000000)]
		[TestCase(-10000L, -1, -100000000)]
		[TestCase(-10000L, 100, 0)]
		[TestCase(-10000L, 100, 1)]
		[TestCase(-10000L, 100, -1)]
		[TestCase(-10000L, 100, 100)]
		[TestCase(-10000L, 100, -100)]
		[TestCase(-10000L, 100, 10000)]
		[TestCase(-10000L, 100, -10000)]
		[TestCase(-10000L, 100, 100000000)]
		[TestCase(-10000L, 100, -100000000)]
		[TestCase(-10000L, -100, 0)]
		[TestCase(-10000L, -100, 1)]
		[TestCase(-10000L, -100, -1)]
		[TestCase(-10000L, -100, 100)]
		[TestCase(-10000L, -100, -100)]
		[TestCase(-10000L, -100, 10000)]
		[TestCase(-10000L, -100, -10000)]
		[TestCase(-10000L, -100, 100000000)]
		[TestCase(-10000L, -100, -100000000)]
		[TestCase(-10000L, 10000, 0)]
		[TestCase(-10000L, 10000, 1)]
		[TestCase(-10000L, 10000, -1)]
		[TestCase(-10000L, 10000, 100)]
		[TestCase(-10000L, 10000, -100)]
		[TestCase(-10000L, 10000, 10000)]
		[TestCase(-10000L, 10000, -10000)]
		[TestCase(-10000L, 10000, 100000000)]
		[TestCase(-10000L, 10000, -100000000)]
		[TestCase(-10000L, -10000, 0)]
		[TestCase(-10000L, -10000, 1)]
		[TestCase(-10000L, -10000, -1)]
		[TestCase(-10000L, -10000, 100)]
		[TestCase(-10000L, -10000, -100)]
		[TestCase(-10000L, -10000, 10000)]
		[TestCase(-10000L, -10000, -10000)]
		[TestCase(-10000L, -10000, 100000000)]
		[TestCase(-10000L, -10000, -100000000)]
		[TestCase(-10000L, 100000000, 0)]
		[TestCase(-10000L, 100000000, 1)]
		[TestCase(-10000L, 100000000, -1)]
		[TestCase(-10000L, 100000000, 100)]
		[TestCase(-10000L, 100000000, -100)]
		[TestCase(-10000L, 100000000, 10000)]
		[TestCase(-10000L, 100000000, -10000)]
		[TestCase(-10000L, 100000000, 100000000)]
		[TestCase(-10000L, 100000000, -100000000)]
		[TestCase(-10000L, -100000000, 0)]
		[TestCase(-10000L, -100000000, 1)]
		[TestCase(-10000L, -100000000, -1)]
		[TestCase(-10000L, -100000000, 100)]
		[TestCase(-10000L, -100000000, -100)]
		[TestCase(-10000L, -100000000, 10000)]
		[TestCase(-10000L, -100000000, -10000)]
		[TestCase(-10000L, -100000000, 100000000)]
		[TestCase(-10000L, -100000000, -100000000)]
		[TestCase(100000000L, 0, 0)]
		[TestCase(100000000L, 0, 1)]
		[TestCase(100000000L, 0, -1)]
		[TestCase(100000000L, 0, 100)]
		[TestCase(100000000L, 0, -100)]
		[TestCase(100000000L, 0, 10000)]
		[TestCase(100000000L, 0, -10000)]
		[TestCase(100000000L, 0, 100000000)]
		[TestCase(100000000L, 0, -100000000)]
		[TestCase(100000000L, 1, 0)]
		[TestCase(100000000L, 1, 1)]
		[TestCase(100000000L, 1, -1)]
		[TestCase(100000000L, 1, 100)]
		[TestCase(100000000L, 1, -100)]
		[TestCase(100000000L, 1, 10000)]
		[TestCase(100000000L, 1, -10000)]
		[TestCase(100000000L, 1, 100000000)]
		[TestCase(100000000L, 1, -100000000)]
		[TestCase(100000000L, -1, 0)]
		[TestCase(100000000L, -1, 1)]
		[TestCase(100000000L, -1, -1)]
		[TestCase(100000000L, -1, 100)]
		[TestCase(100000000L, -1, -100)]
		[TestCase(100000000L, -1, 10000)]
		[TestCase(100000000L, -1, -10000)]
		[TestCase(100000000L, -1, 100000000)]
		[TestCase(100000000L, -1, -100000000)]
		[TestCase(100000000L, 100, 0)]
		[TestCase(100000000L, 100, 1)]
		[TestCase(100000000L, 100, -1)]
		[TestCase(100000000L, 100, 100)]
		[TestCase(100000000L, 100, -100)]
		[TestCase(100000000L, 100, 10000)]
		[TestCase(100000000L, 100, -10000)]
		[TestCase(100000000L, 100, 100000000)]
		[TestCase(100000000L, 100, -100000000)]
		[TestCase(100000000L, -100, 0)]
		[TestCase(100000000L, -100, 1)]
		[TestCase(100000000L, -100, -1)]
		[TestCase(100000000L, -100, 100)]
		[TestCase(100000000L, -100, -100)]
		[TestCase(100000000L, -100, 10000)]
		[TestCase(100000000L, -100, -10000)]
		[TestCase(100000000L, -100, 100000000)]
		[TestCase(100000000L, -100, -100000000)]
		[TestCase(100000000L, 10000, 0)]
		[TestCase(100000000L, 10000, 1)]
		[TestCase(100000000L, 10000, -1)]
		[TestCase(100000000L, 10000, 100)]
		[TestCase(100000000L, 10000, -100)]
		[TestCase(100000000L, 10000, 10000)]
		[TestCase(100000000L, 10000, -10000)]
		[TestCase(100000000L, 10000, 100000000)]
		[TestCase(100000000L, 10000, -100000000)]
		[TestCase(100000000L, -10000, 0)]
		[TestCase(100000000L, -10000, 1)]
		[TestCase(100000000L, -10000, -1)]
		[TestCase(100000000L, -10000, 100)]
		[TestCase(100000000L, -10000, -100)]
		[TestCase(100000000L, -10000, 10000)]
		[TestCase(100000000L, -10000, -10000)]
		[TestCase(100000000L, -10000, 100000000)]
		[TestCase(100000000L, -10000, -100000000)]
		[TestCase(100000000L, 100000000, 0)]
		[TestCase(100000000L, 100000000, 1)]
		[TestCase(100000000L, 100000000, -1)]
		[TestCase(100000000L, 100000000, 100)]
		[TestCase(100000000L, 100000000, -100)]
		[TestCase(100000000L, 100000000, 10000)]
		[TestCase(100000000L, 100000000, -10000)]
		[TestCase(100000000L, 100000000, 100000000)]
		[TestCase(100000000L, 100000000, -100000000)]
		[TestCase(100000000L, -100000000, 0)]
		[TestCase(100000000L, -100000000, 1)]
		[TestCase(100000000L, -100000000, -1)]
		[TestCase(100000000L, -100000000, 100)]
		[TestCase(100000000L, -100000000, -100)]
		[TestCase(100000000L, -100000000, 10000)]
		[TestCase(100000000L, -100000000, -10000)]
		[TestCase(100000000L, -100000000, 100000000)]
		[TestCase(100000000L, -100000000, -100000000)]
		[TestCase(-100000000L, 0, 0)]
		[TestCase(-100000000L, 0, 1)]
		[TestCase(-100000000L, 0, -1)]
		[TestCase(-100000000L, 0, 100)]
		[TestCase(-100000000L, 0, -100)]
		[TestCase(-100000000L, 0, 10000)]
		[TestCase(-100000000L, 0, -10000)]
		[TestCase(-100000000L, 0, 100000000)]
		[TestCase(-100000000L, 0, -100000000)]
		[TestCase(-100000000L, 1, 0)]
		[TestCase(-100000000L, 1, 1)]
		[TestCase(-100000000L, 1, -1)]
		[TestCase(-100000000L, 1, 100)]
		[TestCase(-100000000L, 1, -100)]
		[TestCase(-100000000L, 1, 10000)]
		[TestCase(-100000000L, 1, -10000)]
		[TestCase(-100000000L, 1, 100000000)]
		[TestCase(-100000000L, 1, -100000000)]
		[TestCase(-100000000L, -1, 0)]
		[TestCase(-100000000L, -1, 1)]
		[TestCase(-100000000L, -1, -1)]
		[TestCase(-100000000L, -1, 100)]
		[TestCase(-100000000L, -1, -100)]
		[TestCase(-100000000L, -1, 10000)]
		[TestCase(-100000000L, -1, -10000)]
		[TestCase(-100000000L, -1, 100000000)]
		[TestCase(-100000000L, -1, -100000000)]
		[TestCase(-100000000L, 100, 0)]
		[TestCase(-100000000L, 100, 1)]
		[TestCase(-100000000L, 100, -1)]
		[TestCase(-100000000L, 100, 100)]
		[TestCase(-100000000L, 100, -100)]
		[TestCase(-100000000L, 100, 10000)]
		[TestCase(-100000000L, 100, -10000)]
		[TestCase(-100000000L, 100, 100000000)]
		[TestCase(-100000000L, 100, -100000000)]
		[TestCase(-100000000L, -100, 0)]
		[TestCase(-100000000L, -100, 1)]
		[TestCase(-100000000L, -100, -1)]
		[TestCase(-100000000L, -100, 100)]
		[TestCase(-100000000L, -100, -100)]
		[TestCase(-100000000L, -100, 10000)]
		[TestCase(-100000000L, -100, -10000)]
		[TestCase(-100000000L, -100, 100000000)]
		[TestCase(-100000000L, -100, -100000000)]
		[TestCase(-100000000L, 10000, 0)]
		[TestCase(-100000000L, 10000, 1)]
		[TestCase(-100000000L, 10000, -1)]
		[TestCase(-100000000L, 10000, 100)]
		[TestCase(-100000000L, 10000, -100)]
		[TestCase(-100000000L, 10000, 10000)]
		[TestCase(-100000000L, 10000, -10000)]
		[TestCase(-100000000L, 10000, 100000000)]
		[TestCase(-100000000L, 10000, -100000000)]
		[TestCase(-100000000L, -10000, 0)]
		[TestCase(-100000000L, -10000, 1)]
		[TestCase(-100000000L, -10000, -1)]
		[TestCase(-100000000L, -10000, 100)]
		[TestCase(-100000000L, -10000, -100)]
		[TestCase(-100000000L, -10000, 10000)]
		[TestCase(-100000000L, -10000, -10000)]
		[TestCase(-100000000L, -10000, 100000000)]
		[TestCase(-100000000L, -10000, -100000000)]
		[TestCase(-100000000L, 100000000, 0)]
		[TestCase(-100000000L, 100000000, 1)]
		[TestCase(-100000000L, 100000000, -1)]
		[TestCase(-100000000L, 100000000, 100)]
		[TestCase(-100000000L, 100000000, -100)]
		[TestCase(-100000000L, 100000000, 10000)]
		[TestCase(-100000000L, 100000000, -10000)]
		[TestCase(-100000000L, 100000000, 100000000)]
		[TestCase(-100000000L, 100000000, -100000000)]
		[TestCase(-100000000L, -100000000, 0)]
		[TestCase(-100000000L, -100000000, 1)]
		[TestCase(-100000000L, -100000000, -1)]
		[TestCase(-100000000L, -100000000, 100)]
		[TestCase(-100000000L, -100000000, -100)]
		[TestCase(-100000000L, -100000000, 10000)]
		[TestCase(-100000000L, -100000000, -10000)]
		[TestCase(-100000000L, -100000000, 100000000)]
		[TestCase(-100000000L, -100000000, -100000000)]
		[TestCase(10000000000000000L, 0, 0)]
		[TestCase(10000000000000000L, 0, 1)]
		[TestCase(10000000000000000L, 0, -1)]
		[TestCase(10000000000000000L, 0, 100)]
		[TestCase(10000000000000000L, 0, -100)]
		[TestCase(10000000000000000L, 0, 10000)]
		[TestCase(10000000000000000L, 0, -10000)]
		[TestCase(10000000000000000L, 0, 100000000)]
		[TestCase(10000000000000000L, 0, -100000000)]
		[TestCase(10000000000000000L, 1, 0)]
		[TestCase(10000000000000000L, 1, 1)]
		[TestCase(10000000000000000L, 1, -1)]
		[TestCase(10000000000000000L, 1, 100)]
		[TestCase(10000000000000000L, 1, -100)]
		[TestCase(10000000000000000L, 1, 10000)]
		[TestCase(10000000000000000L, 1, -10000)]
		[TestCase(10000000000000000L, 1, 100000000)]
		[TestCase(10000000000000000L, 1, -100000000)]
		[TestCase(10000000000000000L, -1, 0)]
		[TestCase(10000000000000000L, -1, 1)]
		[TestCase(10000000000000000L, -1, -1)]
		[TestCase(10000000000000000L, -1, 100)]
		[TestCase(10000000000000000L, -1, -100)]
		[TestCase(10000000000000000L, -1, 10000)]
		[TestCase(10000000000000000L, -1, -10000)]
		[TestCase(10000000000000000L, -1, 100000000)]
		[TestCase(10000000000000000L, -1, -100000000)]
		[TestCase(10000000000000000L, 100, 0)]
		[TestCase(10000000000000000L, 100, 1)]
		[TestCase(10000000000000000L, 100, -1)]
		[TestCase(10000000000000000L, 100, 100)]
		[TestCase(10000000000000000L, 100, -100)]
		[TestCase(10000000000000000L, 100, 10000)]
		[TestCase(10000000000000000L, 100, -10000)]
		[TestCase(10000000000000000L, 100, 100000000)]
		[TestCase(10000000000000000L, 100, -100000000)]
		[TestCase(10000000000000000L, -100, 0)]
		[TestCase(10000000000000000L, -100, 1)]
		[TestCase(10000000000000000L, -100, -1)]
		[TestCase(10000000000000000L, -100, 100)]
		[TestCase(10000000000000000L, -100, -100)]
		[TestCase(10000000000000000L, -100, 10000)]
		[TestCase(10000000000000000L, -100, -10000)]
		[TestCase(10000000000000000L, -100, 100000000)]
		[TestCase(10000000000000000L, -100, -100000000)]
		[TestCase(10000000000000000L, 10000, 0)]
		[TestCase(10000000000000000L, 10000, 1)]
		[TestCase(10000000000000000L, 10000, -1)]
		[TestCase(10000000000000000L, 10000, 100)]
		[TestCase(10000000000000000L, 10000, -100)]
		[TestCase(10000000000000000L, 10000, 10000)]
		[TestCase(10000000000000000L, 10000, -10000)]
		[TestCase(10000000000000000L, 10000, 100000000)]
		[TestCase(10000000000000000L, 10000, -100000000)]
		[TestCase(10000000000000000L, -10000, 0)]
		[TestCase(10000000000000000L, -10000, 1)]
		[TestCase(10000000000000000L, -10000, -1)]
		[TestCase(10000000000000000L, -10000, 100)]
		[TestCase(10000000000000000L, -10000, -100)]
		[TestCase(10000000000000000L, -10000, 10000)]
		[TestCase(10000000000000000L, -10000, -10000)]
		[TestCase(10000000000000000L, -10000, 100000000)]
		[TestCase(10000000000000000L, -10000, -100000000)]
		[TestCase(10000000000000000L, 100000000, 0)]
		[TestCase(10000000000000000L, 100000000, 1)]
		[TestCase(10000000000000000L, 100000000, -1)]
		[TestCase(10000000000000000L, 100000000, 100)]
		[TestCase(10000000000000000L, 100000000, -100)]
		[TestCase(10000000000000000L, 100000000, 10000)]
		[TestCase(10000000000000000L, 100000000, -10000)]
		[TestCase(10000000000000000L, 100000000, 100000000)]
		[TestCase(10000000000000000L, 100000000, -100000000)]
		[TestCase(10000000000000000L, -100000000, 0)]
		[TestCase(10000000000000000L, -100000000, 1)]
		[TestCase(10000000000000000L, -100000000, -1)]
		[TestCase(10000000000000000L, -100000000, 100)]
		[TestCase(10000000000000000L, -100000000, -100)]
		[TestCase(10000000000000000L, -100000000, 10000)]
		[TestCase(10000000000000000L, -100000000, -10000)]
		[TestCase(10000000000000000L, -100000000, 100000000)]
		[TestCase(10000000000000000L, -100000000, -100000000)]
		[TestCase(-10000000000000000L, 0, 0)]
		[TestCase(-10000000000000000L, 0, 1)]
		[TestCase(-10000000000000000L, 0, -1)]
		[TestCase(-10000000000000000L, 0, 100)]
		[TestCase(-10000000000000000L, 0, -100)]
		[TestCase(-10000000000000000L, 0, 10000)]
		[TestCase(-10000000000000000L, 0, -10000)]
		[TestCase(-10000000000000000L, 0, 100000000)]
		[TestCase(-10000000000000000L, 0, -100000000)]
		[TestCase(-10000000000000000L, 1, 0)]
		[TestCase(-10000000000000000L, 1, 1)]
		[TestCase(-10000000000000000L, 1, -1)]
		[TestCase(-10000000000000000L, 1, 100)]
		[TestCase(-10000000000000000L, 1, -100)]
		[TestCase(-10000000000000000L, 1, 10000)]
		[TestCase(-10000000000000000L, 1, -10000)]
		[TestCase(-10000000000000000L, 1, 100000000)]
		[TestCase(-10000000000000000L, 1, -100000000)]
		[TestCase(-10000000000000000L, -1, 0)]
		[TestCase(-10000000000000000L, -1, 1)]
		[TestCase(-10000000000000000L, -1, -1)]
		[TestCase(-10000000000000000L, -1, 100)]
		[TestCase(-10000000000000000L, -1, -100)]
		[TestCase(-10000000000000000L, -1, 10000)]
		[TestCase(-10000000000000000L, -1, -10000)]
		[TestCase(-10000000000000000L, -1, 100000000)]
		[TestCase(-10000000000000000L, -1, -100000000)]
		[TestCase(-10000000000000000L, 100, 0)]
		[TestCase(-10000000000000000L, 100, 1)]
		[TestCase(-10000000000000000L, 100, -1)]
		[TestCase(-10000000000000000L, 100, 100)]
		[TestCase(-10000000000000000L, 100, -100)]
		[TestCase(-10000000000000000L, 100, 10000)]
		[TestCase(-10000000000000000L, 100, -10000)]
		[TestCase(-10000000000000000L, 100, 100000000)]
		[TestCase(-10000000000000000L, 100, -100000000)]
		[TestCase(-10000000000000000L, -100, 0)]
		[TestCase(-10000000000000000L, -100, 1)]
		[TestCase(-10000000000000000L, -100, -1)]
		[TestCase(-10000000000000000L, -100, 100)]
		[TestCase(-10000000000000000L, -100, -100)]
		[TestCase(-10000000000000000L, -100, 10000)]
		[TestCase(-10000000000000000L, -100, -10000)]
		[TestCase(-10000000000000000L, -100, 100000000)]
		[TestCase(-10000000000000000L, -100, -100000000)]
		[TestCase(-10000000000000000L, 10000, 0)]
		[TestCase(-10000000000000000L, 10000, 1)]
		[TestCase(-10000000000000000L, 10000, -1)]
		[TestCase(-10000000000000000L, 10000, 100)]
		[TestCase(-10000000000000000L, 10000, -100)]
		[TestCase(-10000000000000000L, 10000, 10000)]
		[TestCase(-10000000000000000L, 10000, -10000)]
		[TestCase(-10000000000000000L, 10000, 100000000)]
		[TestCase(-10000000000000000L, 10000, -100000000)]
		[TestCase(-10000000000000000L, -10000, 0)]
		[TestCase(-10000000000000000L, -10000, 1)]
		[TestCase(-10000000000000000L, -10000, -1)]
		[TestCase(-10000000000000000L, -10000, 100)]
		[TestCase(-10000000000000000L, -10000, -100)]
		[TestCase(-10000000000000000L, -10000, 10000)]
		[TestCase(-10000000000000000L, -10000, -10000)]
		[TestCase(-10000000000000000L, -10000, 100000000)]
		[TestCase(-10000000000000000L, -10000, -100000000)]
		[TestCase(-10000000000000000L, 100000000, 0)]
		[TestCase(-10000000000000000L, 100000000, 1)]
		[TestCase(-10000000000000000L, 100000000, -1)]
		[TestCase(-10000000000000000L, 100000000, 100)]
		[TestCase(-10000000000000000L, 100000000, -100)]
		[TestCase(-10000000000000000L, 100000000, 10000)]
		[TestCase(-10000000000000000L, 100000000, -10000)]
		[TestCase(-10000000000000000L, 100000000, 100000000)]
		[TestCase(-10000000000000000L, 100000000, -100000000)]
		[TestCase(-10000000000000000L, -100000000, 0)]
		[TestCase(-10000000000000000L, -100000000, 1)]
		[TestCase(-10000000000000000L, -100000000, -1)]
		[TestCase(-10000000000000000L, -100000000, 100)]
		[TestCase(-10000000000000000L, -100000000, -100)]
		[TestCase(-10000000000000000L, -100000000, 10000)]
		[TestCase(-10000000000000000L, -100000000, -10000)]
		[TestCase(-10000000000000000L, -100000000, 100000000)]
		[TestCase(-10000000000000000L, -100000000, -100000000)]
		public void TestClampInt64Int32(Int64 value, Int32 minInclusive, Int32 maxInclusive)
        {
            BigInteger expected = 0, actual = 0;
            bool expectedException = false, actualException = false;

            try
            {
                expected = Clamp(value, minInclusive, maxInclusive);
            }
            catch (ArgumentException)
            {
                expectedException = true;
            }

            try
            {
                actual = MathTrifles.Clamp(value, minInclusive, maxInclusive);
            }
            catch (ArgumentException)
            {
                actualException = true;
            }

            Assert.That(actualException, Is.EqualTo(expectedException));

            if (!expectedException)
            {
                Assert.That(actual, Is.EqualTo(expected));
            }
        }


		[TestCase(0L, 0U, 0U)]
		[TestCase(0L, 0U, 1U)]
		[TestCase(0L, 0U, 100U)]
		[TestCase(0L, 0U, 10000U)]
		[TestCase(0L, 0U, 100000000U)]
		[TestCase(0L, 1U, 0U)]
		[TestCase(0L, 1U, 1U)]
		[TestCase(0L, 1U, 100U)]
		[TestCase(0L, 1U, 10000U)]
		[TestCase(0L, 1U, 100000000U)]
		[TestCase(0L, 100U, 0U)]
		[TestCase(0L, 100U, 1U)]
		[TestCase(0L, 100U, 100U)]
		[TestCase(0L, 100U, 10000U)]
		[TestCase(0L, 100U, 100000000U)]
		[TestCase(0L, 10000U, 0U)]
		[TestCase(0L, 10000U, 1U)]
		[TestCase(0L, 10000U, 100U)]
		[TestCase(0L, 10000U, 10000U)]
		[TestCase(0L, 10000U, 100000000U)]
		[TestCase(0L, 100000000U, 0U)]
		[TestCase(0L, 100000000U, 1U)]
		[TestCase(0L, 100000000U, 100U)]
		[TestCase(0L, 100000000U, 10000U)]
		[TestCase(0L, 100000000U, 100000000U)]
		[TestCase(1L, 0U, 0U)]
		[TestCase(1L, 0U, 1U)]
		[TestCase(1L, 0U, 100U)]
		[TestCase(1L, 0U, 10000U)]
		[TestCase(1L, 0U, 100000000U)]
		[TestCase(1L, 1U, 0U)]
		[TestCase(1L, 1U, 1U)]
		[TestCase(1L, 1U, 100U)]
		[TestCase(1L, 1U, 10000U)]
		[TestCase(1L, 1U, 100000000U)]
		[TestCase(1L, 100U, 0U)]
		[TestCase(1L, 100U, 1U)]
		[TestCase(1L, 100U, 100U)]
		[TestCase(1L, 100U, 10000U)]
		[TestCase(1L, 100U, 100000000U)]
		[TestCase(1L, 10000U, 0U)]
		[TestCase(1L, 10000U, 1U)]
		[TestCase(1L, 10000U, 100U)]
		[TestCase(1L, 10000U, 10000U)]
		[TestCase(1L, 10000U, 100000000U)]
		[TestCase(1L, 100000000U, 0U)]
		[TestCase(1L, 100000000U, 1U)]
		[TestCase(1L, 100000000U, 100U)]
		[TestCase(1L, 100000000U, 10000U)]
		[TestCase(1L, 100000000U, 100000000U)]
		[TestCase(-1L, 0U, 0U)]
		[TestCase(-1L, 0U, 1U)]
		[TestCase(-1L, 0U, 100U)]
		[TestCase(-1L, 0U, 10000U)]
		[TestCase(-1L, 0U, 100000000U)]
		[TestCase(-1L, 1U, 0U)]
		[TestCase(-1L, 1U, 1U)]
		[TestCase(-1L, 1U, 100U)]
		[TestCase(-1L, 1U, 10000U)]
		[TestCase(-1L, 1U, 100000000U)]
		[TestCase(-1L, 100U, 0U)]
		[TestCase(-1L, 100U, 1U)]
		[TestCase(-1L, 100U, 100U)]
		[TestCase(-1L, 100U, 10000U)]
		[TestCase(-1L, 100U, 100000000U)]
		[TestCase(-1L, 10000U, 0U)]
		[TestCase(-1L, 10000U, 1U)]
		[TestCase(-1L, 10000U, 100U)]
		[TestCase(-1L, 10000U, 10000U)]
		[TestCase(-1L, 10000U, 100000000U)]
		[TestCase(-1L, 100000000U, 0U)]
		[TestCase(-1L, 100000000U, 1U)]
		[TestCase(-1L, 100000000U, 100U)]
		[TestCase(-1L, 100000000U, 10000U)]
		[TestCase(-1L, 100000000U, 100000000U)]
		[TestCase(100L, 0U, 0U)]
		[TestCase(100L, 0U, 1U)]
		[TestCase(100L, 0U, 100U)]
		[TestCase(100L, 0U, 10000U)]
		[TestCase(100L, 0U, 100000000U)]
		[TestCase(100L, 1U, 0U)]
		[TestCase(100L, 1U, 1U)]
		[TestCase(100L, 1U, 100U)]
		[TestCase(100L, 1U, 10000U)]
		[TestCase(100L, 1U, 100000000U)]
		[TestCase(100L, 100U, 0U)]
		[TestCase(100L, 100U, 1U)]
		[TestCase(100L, 100U, 100U)]
		[TestCase(100L, 100U, 10000U)]
		[TestCase(100L, 100U, 100000000U)]
		[TestCase(100L, 10000U, 0U)]
		[TestCase(100L, 10000U, 1U)]
		[TestCase(100L, 10000U, 100U)]
		[TestCase(100L, 10000U, 10000U)]
		[TestCase(100L, 10000U, 100000000U)]
		[TestCase(100L, 100000000U, 0U)]
		[TestCase(100L, 100000000U, 1U)]
		[TestCase(100L, 100000000U, 100U)]
		[TestCase(100L, 100000000U, 10000U)]
		[TestCase(100L, 100000000U, 100000000U)]
		[TestCase(-100L, 0U, 0U)]
		[TestCase(-100L, 0U, 1U)]
		[TestCase(-100L, 0U, 100U)]
		[TestCase(-100L, 0U, 10000U)]
		[TestCase(-100L, 0U, 100000000U)]
		[TestCase(-100L, 1U, 0U)]
		[TestCase(-100L, 1U, 1U)]
		[TestCase(-100L, 1U, 100U)]
		[TestCase(-100L, 1U, 10000U)]
		[TestCase(-100L, 1U, 100000000U)]
		[TestCase(-100L, 100U, 0U)]
		[TestCase(-100L, 100U, 1U)]
		[TestCase(-100L, 100U, 100U)]
		[TestCase(-100L, 100U, 10000U)]
		[TestCase(-100L, 100U, 100000000U)]
		[TestCase(-100L, 10000U, 0U)]
		[TestCase(-100L, 10000U, 1U)]
		[TestCase(-100L, 10000U, 100U)]
		[TestCase(-100L, 10000U, 10000U)]
		[TestCase(-100L, 10000U, 100000000U)]
		[TestCase(-100L, 100000000U, 0U)]
		[TestCase(-100L, 100000000U, 1U)]
		[TestCase(-100L, 100000000U, 100U)]
		[TestCase(-100L, 100000000U, 10000U)]
		[TestCase(-100L, 100000000U, 100000000U)]
		[TestCase(10000L, 0U, 0U)]
		[TestCase(10000L, 0U, 1U)]
		[TestCase(10000L, 0U, 100U)]
		[TestCase(10000L, 0U, 10000U)]
		[TestCase(10000L, 0U, 100000000U)]
		[TestCase(10000L, 1U, 0U)]
		[TestCase(10000L, 1U, 1U)]
		[TestCase(10000L, 1U, 100U)]
		[TestCase(10000L, 1U, 10000U)]
		[TestCase(10000L, 1U, 100000000U)]
		[TestCase(10000L, 100U, 0U)]
		[TestCase(10000L, 100U, 1U)]
		[TestCase(10000L, 100U, 100U)]
		[TestCase(10000L, 100U, 10000U)]
		[TestCase(10000L, 100U, 100000000U)]
		[TestCase(10000L, 10000U, 0U)]
		[TestCase(10000L, 10000U, 1U)]
		[TestCase(10000L, 10000U, 100U)]
		[TestCase(10000L, 10000U, 10000U)]
		[TestCase(10000L, 10000U, 100000000U)]
		[TestCase(10000L, 100000000U, 0U)]
		[TestCase(10000L, 100000000U, 1U)]
		[TestCase(10000L, 100000000U, 100U)]
		[TestCase(10000L, 100000000U, 10000U)]
		[TestCase(10000L, 100000000U, 100000000U)]
		[TestCase(-10000L, 0U, 0U)]
		[TestCase(-10000L, 0U, 1U)]
		[TestCase(-10000L, 0U, 100U)]
		[TestCase(-10000L, 0U, 10000U)]
		[TestCase(-10000L, 0U, 100000000U)]
		[TestCase(-10000L, 1U, 0U)]
		[TestCase(-10000L, 1U, 1U)]
		[TestCase(-10000L, 1U, 100U)]
		[TestCase(-10000L, 1U, 10000U)]
		[TestCase(-10000L, 1U, 100000000U)]
		[TestCase(-10000L, 100U, 0U)]
		[TestCase(-10000L, 100U, 1U)]
		[TestCase(-10000L, 100U, 100U)]
		[TestCase(-10000L, 100U, 10000U)]
		[TestCase(-10000L, 100U, 100000000U)]
		[TestCase(-10000L, 10000U, 0U)]
		[TestCase(-10000L, 10000U, 1U)]
		[TestCase(-10000L, 10000U, 100U)]
		[TestCase(-10000L, 10000U, 10000U)]
		[TestCase(-10000L, 10000U, 100000000U)]
		[TestCase(-10000L, 100000000U, 0U)]
		[TestCase(-10000L, 100000000U, 1U)]
		[TestCase(-10000L, 100000000U, 100U)]
		[TestCase(-10000L, 100000000U, 10000U)]
		[TestCase(-10000L, 100000000U, 100000000U)]
		[TestCase(100000000L, 0U, 0U)]
		[TestCase(100000000L, 0U, 1U)]
		[TestCase(100000000L, 0U, 100U)]
		[TestCase(100000000L, 0U, 10000U)]
		[TestCase(100000000L, 0U, 100000000U)]
		[TestCase(100000000L, 1U, 0U)]
		[TestCase(100000000L, 1U, 1U)]
		[TestCase(100000000L, 1U, 100U)]
		[TestCase(100000000L, 1U, 10000U)]
		[TestCase(100000000L, 1U, 100000000U)]
		[TestCase(100000000L, 100U, 0U)]
		[TestCase(100000000L, 100U, 1U)]
		[TestCase(100000000L, 100U, 100U)]
		[TestCase(100000000L, 100U, 10000U)]
		[TestCase(100000000L, 100U, 100000000U)]
		[TestCase(100000000L, 10000U, 0U)]
		[TestCase(100000000L, 10000U, 1U)]
		[TestCase(100000000L, 10000U, 100U)]
		[TestCase(100000000L, 10000U, 10000U)]
		[TestCase(100000000L, 10000U, 100000000U)]
		[TestCase(100000000L, 100000000U, 0U)]
		[TestCase(100000000L, 100000000U, 1U)]
		[TestCase(100000000L, 100000000U, 100U)]
		[TestCase(100000000L, 100000000U, 10000U)]
		[TestCase(100000000L, 100000000U, 100000000U)]
		[TestCase(-100000000L, 0U, 0U)]
		[TestCase(-100000000L, 0U, 1U)]
		[TestCase(-100000000L, 0U, 100U)]
		[TestCase(-100000000L, 0U, 10000U)]
		[TestCase(-100000000L, 0U, 100000000U)]
		[TestCase(-100000000L, 1U, 0U)]
		[TestCase(-100000000L, 1U, 1U)]
		[TestCase(-100000000L, 1U, 100U)]
		[TestCase(-100000000L, 1U, 10000U)]
		[TestCase(-100000000L, 1U, 100000000U)]
		[TestCase(-100000000L, 100U, 0U)]
		[TestCase(-100000000L, 100U, 1U)]
		[TestCase(-100000000L, 100U, 100U)]
		[TestCase(-100000000L, 100U, 10000U)]
		[TestCase(-100000000L, 100U, 100000000U)]
		[TestCase(-100000000L, 10000U, 0U)]
		[TestCase(-100000000L, 10000U, 1U)]
		[TestCase(-100000000L, 10000U, 100U)]
		[TestCase(-100000000L, 10000U, 10000U)]
		[TestCase(-100000000L, 10000U, 100000000U)]
		[TestCase(-100000000L, 100000000U, 0U)]
		[TestCase(-100000000L, 100000000U, 1U)]
		[TestCase(-100000000L, 100000000U, 100U)]
		[TestCase(-100000000L, 100000000U, 10000U)]
		[TestCase(-100000000L, 100000000U, 100000000U)]
		[TestCase(10000000000000000L, 0U, 0U)]
		[TestCase(10000000000000000L, 0U, 1U)]
		[TestCase(10000000000000000L, 0U, 100U)]
		[TestCase(10000000000000000L, 0U, 10000U)]
		[TestCase(10000000000000000L, 0U, 100000000U)]
		[TestCase(10000000000000000L, 1U, 0U)]
		[TestCase(10000000000000000L, 1U, 1U)]
		[TestCase(10000000000000000L, 1U, 100U)]
		[TestCase(10000000000000000L, 1U, 10000U)]
		[TestCase(10000000000000000L, 1U, 100000000U)]
		[TestCase(10000000000000000L, 100U, 0U)]
		[TestCase(10000000000000000L, 100U, 1U)]
		[TestCase(10000000000000000L, 100U, 100U)]
		[TestCase(10000000000000000L, 100U, 10000U)]
		[TestCase(10000000000000000L, 100U, 100000000U)]
		[TestCase(10000000000000000L, 10000U, 0U)]
		[TestCase(10000000000000000L, 10000U, 1U)]
		[TestCase(10000000000000000L, 10000U, 100U)]
		[TestCase(10000000000000000L, 10000U, 10000U)]
		[TestCase(10000000000000000L, 10000U, 100000000U)]
		[TestCase(10000000000000000L, 100000000U, 0U)]
		[TestCase(10000000000000000L, 100000000U, 1U)]
		[TestCase(10000000000000000L, 100000000U, 100U)]
		[TestCase(10000000000000000L, 100000000U, 10000U)]
		[TestCase(10000000000000000L, 100000000U, 100000000U)]
		[TestCase(-10000000000000000L, 0U, 0U)]
		[TestCase(-10000000000000000L, 0U, 1U)]
		[TestCase(-10000000000000000L, 0U, 100U)]
		[TestCase(-10000000000000000L, 0U, 10000U)]
		[TestCase(-10000000000000000L, 0U, 100000000U)]
		[TestCase(-10000000000000000L, 1U, 0U)]
		[TestCase(-10000000000000000L, 1U, 1U)]
		[TestCase(-10000000000000000L, 1U, 100U)]
		[TestCase(-10000000000000000L, 1U, 10000U)]
		[TestCase(-10000000000000000L, 1U, 100000000U)]
		[TestCase(-10000000000000000L, 100U, 0U)]
		[TestCase(-10000000000000000L, 100U, 1U)]
		[TestCase(-10000000000000000L, 100U, 100U)]
		[TestCase(-10000000000000000L, 100U, 10000U)]
		[TestCase(-10000000000000000L, 100U, 100000000U)]
		[TestCase(-10000000000000000L, 10000U, 0U)]
		[TestCase(-10000000000000000L, 10000U, 1U)]
		[TestCase(-10000000000000000L, 10000U, 100U)]
		[TestCase(-10000000000000000L, 10000U, 10000U)]
		[TestCase(-10000000000000000L, 10000U, 100000000U)]
		[TestCase(-10000000000000000L, 100000000U, 0U)]
		[TestCase(-10000000000000000L, 100000000U, 1U)]
		[TestCase(-10000000000000000L, 100000000U, 100U)]
		[TestCase(-10000000000000000L, 100000000U, 10000U)]
		[TestCase(-10000000000000000L, 100000000U, 100000000U)]
		public void TestClampInt64UInt32(Int64 value, UInt32 minInclusive, UInt32 maxInclusive)
        {
            BigInteger expected = 0, actual = 0;
            bool expectedException = false, actualException = false;

            try
            {
                expected = Clamp(value, minInclusive, maxInclusive);
            }
            catch (ArgumentException)
            {
                expectedException = true;
            }

            try
            {
                actual = MathTrifles.Clamp(value, minInclusive, maxInclusive);
            }
            catch (ArgumentException)
            {
                actualException = true;
            }

            Assert.That(actualException, Is.EqualTo(expectedException));

            if (!expectedException)
            {
                Assert.That(actual, Is.EqualTo(expected));
            }
        }


		[TestCase(0L, 0L, 0L)]
		[TestCase(0L, 0L, 1L)]
		[TestCase(0L, 0L, -1L)]
		[TestCase(0L, 0L, 100L)]
		[TestCase(0L, 0L, -100L)]
		[TestCase(0L, 0L, 10000L)]
		[TestCase(0L, 0L, -10000L)]
		[TestCase(0L, 0L, 100000000L)]
		[TestCase(0L, 0L, -100000000L)]
		[TestCase(0L, 0L, 10000000000000000L)]
		[TestCase(0L, 0L, -10000000000000000L)]
		[TestCase(0L, 1L, 0L)]
		[TestCase(0L, 1L, 1L)]
		[TestCase(0L, 1L, -1L)]
		[TestCase(0L, 1L, 100L)]
		[TestCase(0L, 1L, -100L)]
		[TestCase(0L, 1L, 10000L)]
		[TestCase(0L, 1L, -10000L)]
		[TestCase(0L, 1L, 100000000L)]
		[TestCase(0L, 1L, -100000000L)]
		[TestCase(0L, 1L, 10000000000000000L)]
		[TestCase(0L, 1L, -10000000000000000L)]
		[TestCase(0L, -1L, 0L)]
		[TestCase(0L, -1L, 1L)]
		[TestCase(0L, -1L, -1L)]
		[TestCase(0L, -1L, 100L)]
		[TestCase(0L, -1L, -100L)]
		[TestCase(0L, -1L, 10000L)]
		[TestCase(0L, -1L, -10000L)]
		[TestCase(0L, -1L, 100000000L)]
		[TestCase(0L, -1L, -100000000L)]
		[TestCase(0L, -1L, 10000000000000000L)]
		[TestCase(0L, -1L, -10000000000000000L)]
		[TestCase(0L, 100L, 0L)]
		[TestCase(0L, 100L, 1L)]
		[TestCase(0L, 100L, -1L)]
		[TestCase(0L, 100L, 100L)]
		[TestCase(0L, 100L, -100L)]
		[TestCase(0L, 100L, 10000L)]
		[TestCase(0L, 100L, -10000L)]
		[TestCase(0L, 100L, 100000000L)]
		[TestCase(0L, 100L, -100000000L)]
		[TestCase(0L, 100L, 10000000000000000L)]
		[TestCase(0L, 100L, -10000000000000000L)]
		[TestCase(0L, -100L, 0L)]
		[TestCase(0L, -100L, 1L)]
		[TestCase(0L, -100L, -1L)]
		[TestCase(0L, -100L, 100L)]
		[TestCase(0L, -100L, -100L)]
		[TestCase(0L, -100L, 10000L)]
		[TestCase(0L, -100L, -10000L)]
		[TestCase(0L, -100L, 100000000L)]
		[TestCase(0L, -100L, -100000000L)]
		[TestCase(0L, -100L, 10000000000000000L)]
		[TestCase(0L, -100L, -10000000000000000L)]
		[TestCase(0L, 10000L, 0L)]
		[TestCase(0L, 10000L, 1L)]
		[TestCase(0L, 10000L, -1L)]
		[TestCase(0L, 10000L, 100L)]
		[TestCase(0L, 10000L, -100L)]
		[TestCase(0L, 10000L, 10000L)]
		[TestCase(0L, 10000L, -10000L)]
		[TestCase(0L, 10000L, 100000000L)]
		[TestCase(0L, 10000L, -100000000L)]
		[TestCase(0L, 10000L, 10000000000000000L)]
		[TestCase(0L, 10000L, -10000000000000000L)]
		[TestCase(0L, -10000L, 0L)]
		[TestCase(0L, -10000L, 1L)]
		[TestCase(0L, -10000L, -1L)]
		[TestCase(0L, -10000L, 100L)]
		[TestCase(0L, -10000L, -100L)]
		[TestCase(0L, -10000L, 10000L)]
		[TestCase(0L, -10000L, -10000L)]
		[TestCase(0L, -10000L, 100000000L)]
		[TestCase(0L, -10000L, -100000000L)]
		[TestCase(0L, -10000L, 10000000000000000L)]
		[TestCase(0L, -10000L, -10000000000000000L)]
		[TestCase(0L, 100000000L, 0L)]
		[TestCase(0L, 100000000L, 1L)]
		[TestCase(0L, 100000000L, -1L)]
		[TestCase(0L, 100000000L, 100L)]
		[TestCase(0L, 100000000L, -100L)]
		[TestCase(0L, 100000000L, 10000L)]
		[TestCase(0L, 100000000L, -10000L)]
		[TestCase(0L, 100000000L, 100000000L)]
		[TestCase(0L, 100000000L, -100000000L)]
		[TestCase(0L, 100000000L, 10000000000000000L)]
		[TestCase(0L, 100000000L, -10000000000000000L)]
		[TestCase(0L, -100000000L, 0L)]
		[TestCase(0L, -100000000L, 1L)]
		[TestCase(0L, -100000000L, -1L)]
		[TestCase(0L, -100000000L, 100L)]
		[TestCase(0L, -100000000L, -100L)]
		[TestCase(0L, -100000000L, 10000L)]
		[TestCase(0L, -100000000L, -10000L)]
		[TestCase(0L, -100000000L, 100000000L)]
		[TestCase(0L, -100000000L, -100000000L)]
		[TestCase(0L, -100000000L, 10000000000000000L)]
		[TestCase(0L, -100000000L, -10000000000000000L)]
		[TestCase(0L, 10000000000000000L, 0L)]
		[TestCase(0L, 10000000000000000L, 1L)]
		[TestCase(0L, 10000000000000000L, -1L)]
		[TestCase(0L, 10000000000000000L, 100L)]
		[TestCase(0L, 10000000000000000L, -100L)]
		[TestCase(0L, 10000000000000000L, 10000L)]
		[TestCase(0L, 10000000000000000L, -10000L)]
		[TestCase(0L, 10000000000000000L, 100000000L)]
		[TestCase(0L, 10000000000000000L, -100000000L)]
		[TestCase(0L, 10000000000000000L, 10000000000000000L)]
		[TestCase(0L, 10000000000000000L, -10000000000000000L)]
		[TestCase(0L, -10000000000000000L, 0L)]
		[TestCase(0L, -10000000000000000L, 1L)]
		[TestCase(0L, -10000000000000000L, -1L)]
		[TestCase(0L, -10000000000000000L, 100L)]
		[TestCase(0L, -10000000000000000L, -100L)]
		[TestCase(0L, -10000000000000000L, 10000L)]
		[TestCase(0L, -10000000000000000L, -10000L)]
		[TestCase(0L, -10000000000000000L, 100000000L)]
		[TestCase(0L, -10000000000000000L, -100000000L)]
		[TestCase(0L, -10000000000000000L, 10000000000000000L)]
		[TestCase(0L, -10000000000000000L, -10000000000000000L)]
		[TestCase(1L, 0L, 0L)]
		[TestCase(1L, 0L, 1L)]
		[TestCase(1L, 0L, -1L)]
		[TestCase(1L, 0L, 100L)]
		[TestCase(1L, 0L, -100L)]
		[TestCase(1L, 0L, 10000L)]
		[TestCase(1L, 0L, -10000L)]
		[TestCase(1L, 0L, 100000000L)]
		[TestCase(1L, 0L, -100000000L)]
		[TestCase(1L, 0L, 10000000000000000L)]
		[TestCase(1L, 0L, -10000000000000000L)]
		[TestCase(1L, 1L, 0L)]
		[TestCase(1L, 1L, 1L)]
		[TestCase(1L, 1L, -1L)]
		[TestCase(1L, 1L, 100L)]
		[TestCase(1L, 1L, -100L)]
		[TestCase(1L, 1L, 10000L)]
		[TestCase(1L, 1L, -10000L)]
		[TestCase(1L, 1L, 100000000L)]
		[TestCase(1L, 1L, -100000000L)]
		[TestCase(1L, 1L, 10000000000000000L)]
		[TestCase(1L, 1L, -10000000000000000L)]
		[TestCase(1L, -1L, 0L)]
		[TestCase(1L, -1L, 1L)]
		[TestCase(1L, -1L, -1L)]
		[TestCase(1L, -1L, 100L)]
		[TestCase(1L, -1L, -100L)]
		[TestCase(1L, -1L, 10000L)]
		[TestCase(1L, -1L, -10000L)]
		[TestCase(1L, -1L, 100000000L)]
		[TestCase(1L, -1L, -100000000L)]
		[TestCase(1L, -1L, 10000000000000000L)]
		[TestCase(1L, -1L, -10000000000000000L)]
		[TestCase(1L, 100L, 0L)]
		[TestCase(1L, 100L, 1L)]
		[TestCase(1L, 100L, -1L)]
		[TestCase(1L, 100L, 100L)]
		[TestCase(1L, 100L, -100L)]
		[TestCase(1L, 100L, 10000L)]
		[TestCase(1L, 100L, -10000L)]
		[TestCase(1L, 100L, 100000000L)]
		[TestCase(1L, 100L, -100000000L)]
		[TestCase(1L, 100L, 10000000000000000L)]
		[TestCase(1L, 100L, -10000000000000000L)]
		[TestCase(1L, -100L, 0L)]
		[TestCase(1L, -100L, 1L)]
		[TestCase(1L, -100L, -1L)]
		[TestCase(1L, -100L, 100L)]
		[TestCase(1L, -100L, -100L)]
		[TestCase(1L, -100L, 10000L)]
		[TestCase(1L, -100L, -10000L)]
		[TestCase(1L, -100L, 100000000L)]
		[TestCase(1L, -100L, -100000000L)]
		[TestCase(1L, -100L, 10000000000000000L)]
		[TestCase(1L, -100L, -10000000000000000L)]
		[TestCase(1L, 10000L, 0L)]
		[TestCase(1L, 10000L, 1L)]
		[TestCase(1L, 10000L, -1L)]
		[TestCase(1L, 10000L, 100L)]
		[TestCase(1L, 10000L, -100L)]
		[TestCase(1L, 10000L, 10000L)]
		[TestCase(1L, 10000L, -10000L)]
		[TestCase(1L, 10000L, 100000000L)]
		[TestCase(1L, 10000L, -100000000L)]
		[TestCase(1L, 10000L, 10000000000000000L)]
		[TestCase(1L, 10000L, -10000000000000000L)]
		[TestCase(1L, -10000L, 0L)]
		[TestCase(1L, -10000L, 1L)]
		[TestCase(1L, -10000L, -1L)]
		[TestCase(1L, -10000L, 100L)]
		[TestCase(1L, -10000L, -100L)]
		[TestCase(1L, -10000L, 10000L)]
		[TestCase(1L, -10000L, -10000L)]
		[TestCase(1L, -10000L, 100000000L)]
		[TestCase(1L, -10000L, -100000000L)]
		[TestCase(1L, -10000L, 10000000000000000L)]
		[TestCase(1L, -10000L, -10000000000000000L)]
		[TestCase(1L, 100000000L, 0L)]
		[TestCase(1L, 100000000L, 1L)]
		[TestCase(1L, 100000000L, -1L)]
		[TestCase(1L, 100000000L, 100L)]
		[TestCase(1L, 100000000L, -100L)]
		[TestCase(1L, 100000000L, 10000L)]
		[TestCase(1L, 100000000L, -10000L)]
		[TestCase(1L, 100000000L, 100000000L)]
		[TestCase(1L, 100000000L, -100000000L)]
		[TestCase(1L, 100000000L, 10000000000000000L)]
		[TestCase(1L, 100000000L, -10000000000000000L)]
		[TestCase(1L, -100000000L, 0L)]
		[TestCase(1L, -100000000L, 1L)]
		[TestCase(1L, -100000000L, -1L)]
		[TestCase(1L, -100000000L, 100L)]
		[TestCase(1L, -100000000L, -100L)]
		[TestCase(1L, -100000000L, 10000L)]
		[TestCase(1L, -100000000L, -10000L)]
		[TestCase(1L, -100000000L, 100000000L)]
		[TestCase(1L, -100000000L, -100000000L)]
		[TestCase(1L, -100000000L, 10000000000000000L)]
		[TestCase(1L, -100000000L, -10000000000000000L)]
		[TestCase(1L, 10000000000000000L, 0L)]
		[TestCase(1L, 10000000000000000L, 1L)]
		[TestCase(1L, 10000000000000000L, -1L)]
		[TestCase(1L, 10000000000000000L, 100L)]
		[TestCase(1L, 10000000000000000L, -100L)]
		[TestCase(1L, 10000000000000000L, 10000L)]
		[TestCase(1L, 10000000000000000L, -10000L)]
		[TestCase(1L, 10000000000000000L, 100000000L)]
		[TestCase(1L, 10000000000000000L, -100000000L)]
		[TestCase(1L, 10000000000000000L, 10000000000000000L)]
		[TestCase(1L, 10000000000000000L, -10000000000000000L)]
		[TestCase(1L, -10000000000000000L, 0L)]
		[TestCase(1L, -10000000000000000L, 1L)]
		[TestCase(1L, -10000000000000000L, -1L)]
		[TestCase(1L, -10000000000000000L, 100L)]
		[TestCase(1L, -10000000000000000L, -100L)]
		[TestCase(1L, -10000000000000000L, 10000L)]
		[TestCase(1L, -10000000000000000L, -10000L)]
		[TestCase(1L, -10000000000000000L, 100000000L)]
		[TestCase(1L, -10000000000000000L, -100000000L)]
		[TestCase(1L, -10000000000000000L, 10000000000000000L)]
		[TestCase(1L, -10000000000000000L, -10000000000000000L)]
		[TestCase(-1L, 0L, 0L)]
		[TestCase(-1L, 0L, 1L)]
		[TestCase(-1L, 0L, -1L)]
		[TestCase(-1L, 0L, 100L)]
		[TestCase(-1L, 0L, -100L)]
		[TestCase(-1L, 0L, 10000L)]
		[TestCase(-1L, 0L, -10000L)]
		[TestCase(-1L, 0L, 100000000L)]
		[TestCase(-1L, 0L, -100000000L)]
		[TestCase(-1L, 0L, 10000000000000000L)]
		[TestCase(-1L, 0L, -10000000000000000L)]
		[TestCase(-1L, 1L, 0L)]
		[TestCase(-1L, 1L, 1L)]
		[TestCase(-1L, 1L, -1L)]
		[TestCase(-1L, 1L, 100L)]
		[TestCase(-1L, 1L, -100L)]
		[TestCase(-1L, 1L, 10000L)]
		[TestCase(-1L, 1L, -10000L)]
		[TestCase(-1L, 1L, 100000000L)]
		[TestCase(-1L, 1L, -100000000L)]
		[TestCase(-1L, 1L, 10000000000000000L)]
		[TestCase(-1L, 1L, -10000000000000000L)]
		[TestCase(-1L, -1L, 0L)]
		[TestCase(-1L, -1L, 1L)]
		[TestCase(-1L, -1L, -1L)]
		[TestCase(-1L, -1L, 100L)]
		[TestCase(-1L, -1L, -100L)]
		[TestCase(-1L, -1L, 10000L)]
		[TestCase(-1L, -1L, -10000L)]
		[TestCase(-1L, -1L, 100000000L)]
		[TestCase(-1L, -1L, -100000000L)]
		[TestCase(-1L, -1L, 10000000000000000L)]
		[TestCase(-1L, -1L, -10000000000000000L)]
		[TestCase(-1L, 100L, 0L)]
		[TestCase(-1L, 100L, 1L)]
		[TestCase(-1L, 100L, -1L)]
		[TestCase(-1L, 100L, 100L)]
		[TestCase(-1L, 100L, -100L)]
		[TestCase(-1L, 100L, 10000L)]
		[TestCase(-1L, 100L, -10000L)]
		[TestCase(-1L, 100L, 100000000L)]
		[TestCase(-1L, 100L, -100000000L)]
		[TestCase(-1L, 100L, 10000000000000000L)]
		[TestCase(-1L, 100L, -10000000000000000L)]
		[TestCase(-1L, -100L, 0L)]
		[TestCase(-1L, -100L, 1L)]
		[TestCase(-1L, -100L, -1L)]
		[TestCase(-1L, -100L, 100L)]
		[TestCase(-1L, -100L, -100L)]
		[TestCase(-1L, -100L, 10000L)]
		[TestCase(-1L, -100L, -10000L)]
		[TestCase(-1L, -100L, 100000000L)]
		[TestCase(-1L, -100L, -100000000L)]
		[TestCase(-1L, -100L, 10000000000000000L)]
		[TestCase(-1L, -100L, -10000000000000000L)]
		[TestCase(-1L, 10000L, 0L)]
		[TestCase(-1L, 10000L, 1L)]
		[TestCase(-1L, 10000L, -1L)]
		[TestCase(-1L, 10000L, 100L)]
		[TestCase(-1L, 10000L, -100L)]
		[TestCase(-1L, 10000L, 10000L)]
		[TestCase(-1L, 10000L, -10000L)]
		[TestCase(-1L, 10000L, 100000000L)]
		[TestCase(-1L, 10000L, -100000000L)]
		[TestCase(-1L, 10000L, 10000000000000000L)]
		[TestCase(-1L, 10000L, -10000000000000000L)]
		[TestCase(-1L, -10000L, 0L)]
		[TestCase(-1L, -10000L, 1L)]
		[TestCase(-1L, -10000L, -1L)]
		[TestCase(-1L, -10000L, 100L)]
		[TestCase(-1L, -10000L, -100L)]
		[TestCase(-1L, -10000L, 10000L)]
		[TestCase(-1L, -10000L, -10000L)]
		[TestCase(-1L, -10000L, 100000000L)]
		[TestCase(-1L, -10000L, -100000000L)]
		[TestCase(-1L, -10000L, 10000000000000000L)]
		[TestCase(-1L, -10000L, -10000000000000000L)]
		[TestCase(-1L, 100000000L, 0L)]
		[TestCase(-1L, 100000000L, 1L)]
		[TestCase(-1L, 100000000L, -1L)]
		[TestCase(-1L, 100000000L, 100L)]
		[TestCase(-1L, 100000000L, -100L)]
		[TestCase(-1L, 100000000L, 10000L)]
		[TestCase(-1L, 100000000L, -10000L)]
		[TestCase(-1L, 100000000L, 100000000L)]
		[TestCase(-1L, 100000000L, -100000000L)]
		[TestCase(-1L, 100000000L, 10000000000000000L)]
		[TestCase(-1L, 100000000L, -10000000000000000L)]
		[TestCase(-1L, -100000000L, 0L)]
		[TestCase(-1L, -100000000L, 1L)]
		[TestCase(-1L, -100000000L, -1L)]
		[TestCase(-1L, -100000000L, 100L)]
		[TestCase(-1L, -100000000L, -100L)]
		[TestCase(-1L, -100000000L, 10000L)]
		[TestCase(-1L, -100000000L, -10000L)]
		[TestCase(-1L, -100000000L, 100000000L)]
		[TestCase(-1L, -100000000L, -100000000L)]
		[TestCase(-1L, -100000000L, 10000000000000000L)]
		[TestCase(-1L, -100000000L, -10000000000000000L)]
		[TestCase(-1L, 10000000000000000L, 0L)]
		[TestCase(-1L, 10000000000000000L, 1L)]
		[TestCase(-1L, 10000000000000000L, -1L)]
		[TestCase(-1L, 10000000000000000L, 100L)]
		[TestCase(-1L, 10000000000000000L, -100L)]
		[TestCase(-1L, 10000000000000000L, 10000L)]
		[TestCase(-1L, 10000000000000000L, -10000L)]
		[TestCase(-1L, 10000000000000000L, 100000000L)]
		[TestCase(-1L, 10000000000000000L, -100000000L)]
		[TestCase(-1L, 10000000000000000L, 10000000000000000L)]
		[TestCase(-1L, 10000000000000000L, -10000000000000000L)]
		[TestCase(-1L, -10000000000000000L, 0L)]
		[TestCase(-1L, -10000000000000000L, 1L)]
		[TestCase(-1L, -10000000000000000L, -1L)]
		[TestCase(-1L, -10000000000000000L, 100L)]
		[TestCase(-1L, -10000000000000000L, -100L)]
		[TestCase(-1L, -10000000000000000L, 10000L)]
		[TestCase(-1L, -10000000000000000L, -10000L)]
		[TestCase(-1L, -10000000000000000L, 100000000L)]
		[TestCase(-1L, -10000000000000000L, -100000000L)]
		[TestCase(-1L, -10000000000000000L, 10000000000000000L)]
		[TestCase(-1L, -10000000000000000L, -10000000000000000L)]
		[TestCase(100L, 0L, 0L)]
		[TestCase(100L, 0L, 1L)]
		[TestCase(100L, 0L, -1L)]
		[TestCase(100L, 0L, 100L)]
		[TestCase(100L, 0L, -100L)]
		[TestCase(100L, 0L, 10000L)]
		[TestCase(100L, 0L, -10000L)]
		[TestCase(100L, 0L, 100000000L)]
		[TestCase(100L, 0L, -100000000L)]
		[TestCase(100L, 0L, 10000000000000000L)]
		[TestCase(100L, 0L, -10000000000000000L)]
		[TestCase(100L, 1L, 0L)]
		[TestCase(100L, 1L, 1L)]
		[TestCase(100L, 1L, -1L)]
		[TestCase(100L, 1L, 100L)]
		[TestCase(100L, 1L, -100L)]
		[TestCase(100L, 1L, 10000L)]
		[TestCase(100L, 1L, -10000L)]
		[TestCase(100L, 1L, 100000000L)]
		[TestCase(100L, 1L, -100000000L)]
		[TestCase(100L, 1L, 10000000000000000L)]
		[TestCase(100L, 1L, -10000000000000000L)]
		[TestCase(100L, -1L, 0L)]
		[TestCase(100L, -1L, 1L)]
		[TestCase(100L, -1L, -1L)]
		[TestCase(100L, -1L, 100L)]
		[TestCase(100L, -1L, -100L)]
		[TestCase(100L, -1L, 10000L)]
		[TestCase(100L, -1L, -10000L)]
		[TestCase(100L, -1L, 100000000L)]
		[TestCase(100L, -1L, -100000000L)]
		[TestCase(100L, -1L, 10000000000000000L)]
		[TestCase(100L, -1L, -10000000000000000L)]
		[TestCase(100L, 100L, 0L)]
		[TestCase(100L, 100L, 1L)]
		[TestCase(100L, 100L, -1L)]
		[TestCase(100L, 100L, 100L)]
		[TestCase(100L, 100L, -100L)]
		[TestCase(100L, 100L, 10000L)]
		[TestCase(100L, 100L, -10000L)]
		[TestCase(100L, 100L, 100000000L)]
		[TestCase(100L, 100L, -100000000L)]
		[TestCase(100L, 100L, 10000000000000000L)]
		[TestCase(100L, 100L, -10000000000000000L)]
		[TestCase(100L, -100L, 0L)]
		[TestCase(100L, -100L, 1L)]
		[TestCase(100L, -100L, -1L)]
		[TestCase(100L, -100L, 100L)]
		[TestCase(100L, -100L, -100L)]
		[TestCase(100L, -100L, 10000L)]
		[TestCase(100L, -100L, -10000L)]
		[TestCase(100L, -100L, 100000000L)]
		[TestCase(100L, -100L, -100000000L)]
		[TestCase(100L, -100L, 10000000000000000L)]
		[TestCase(100L, -100L, -10000000000000000L)]
		[TestCase(100L, 10000L, 0L)]
		[TestCase(100L, 10000L, 1L)]
		[TestCase(100L, 10000L, -1L)]
		[TestCase(100L, 10000L, 100L)]
		[TestCase(100L, 10000L, -100L)]
		[TestCase(100L, 10000L, 10000L)]
		[TestCase(100L, 10000L, -10000L)]
		[TestCase(100L, 10000L, 100000000L)]
		[TestCase(100L, 10000L, -100000000L)]
		[TestCase(100L, 10000L, 10000000000000000L)]
		[TestCase(100L, 10000L, -10000000000000000L)]
		[TestCase(100L, -10000L, 0L)]
		[TestCase(100L, -10000L, 1L)]
		[TestCase(100L, -10000L, -1L)]
		[TestCase(100L, -10000L, 100L)]
		[TestCase(100L, -10000L, -100L)]
		[TestCase(100L, -10000L, 10000L)]
		[TestCase(100L, -10000L, -10000L)]
		[TestCase(100L, -10000L, 100000000L)]
		[TestCase(100L, -10000L, -100000000L)]
		[TestCase(100L, -10000L, 10000000000000000L)]
		[TestCase(100L, -10000L, -10000000000000000L)]
		[TestCase(100L, 100000000L, 0L)]
		[TestCase(100L, 100000000L, 1L)]
		[TestCase(100L, 100000000L, -1L)]
		[TestCase(100L, 100000000L, 100L)]
		[TestCase(100L, 100000000L, -100L)]
		[TestCase(100L, 100000000L, 10000L)]
		[TestCase(100L, 100000000L, -10000L)]
		[TestCase(100L, 100000000L, 100000000L)]
		[TestCase(100L, 100000000L, -100000000L)]
		[TestCase(100L, 100000000L, 10000000000000000L)]
		[TestCase(100L, 100000000L, -10000000000000000L)]
		[TestCase(100L, -100000000L, 0L)]
		[TestCase(100L, -100000000L, 1L)]
		[TestCase(100L, -100000000L, -1L)]
		[TestCase(100L, -100000000L, 100L)]
		[TestCase(100L, -100000000L, -100L)]
		[TestCase(100L, -100000000L, 10000L)]
		[TestCase(100L, -100000000L, -10000L)]
		[TestCase(100L, -100000000L, 100000000L)]
		[TestCase(100L, -100000000L, -100000000L)]
		[TestCase(100L, -100000000L, 10000000000000000L)]
		[TestCase(100L, -100000000L, -10000000000000000L)]
		[TestCase(100L, 10000000000000000L, 0L)]
		[TestCase(100L, 10000000000000000L, 1L)]
		[TestCase(100L, 10000000000000000L, -1L)]
		[TestCase(100L, 10000000000000000L, 100L)]
		[TestCase(100L, 10000000000000000L, -100L)]
		[TestCase(100L, 10000000000000000L, 10000L)]
		[TestCase(100L, 10000000000000000L, -10000L)]
		[TestCase(100L, 10000000000000000L, 100000000L)]
		[TestCase(100L, 10000000000000000L, -100000000L)]
		[TestCase(100L, 10000000000000000L, 10000000000000000L)]
		[TestCase(100L, 10000000000000000L, -10000000000000000L)]
		[TestCase(100L, -10000000000000000L, 0L)]
		[TestCase(100L, -10000000000000000L, 1L)]
		[TestCase(100L, -10000000000000000L, -1L)]
		[TestCase(100L, -10000000000000000L, 100L)]
		[TestCase(100L, -10000000000000000L, -100L)]
		[TestCase(100L, -10000000000000000L, 10000L)]
		[TestCase(100L, -10000000000000000L, -10000L)]
		[TestCase(100L, -10000000000000000L, 100000000L)]
		[TestCase(100L, -10000000000000000L, -100000000L)]
		[TestCase(100L, -10000000000000000L, 10000000000000000L)]
		[TestCase(100L, -10000000000000000L, -10000000000000000L)]
		[TestCase(-100L, 0L, 0L)]
		[TestCase(-100L, 0L, 1L)]
		[TestCase(-100L, 0L, -1L)]
		[TestCase(-100L, 0L, 100L)]
		[TestCase(-100L, 0L, -100L)]
		[TestCase(-100L, 0L, 10000L)]
		[TestCase(-100L, 0L, -10000L)]
		[TestCase(-100L, 0L, 100000000L)]
		[TestCase(-100L, 0L, -100000000L)]
		[TestCase(-100L, 0L, 10000000000000000L)]
		[TestCase(-100L, 0L, -10000000000000000L)]
		[TestCase(-100L, 1L, 0L)]
		[TestCase(-100L, 1L, 1L)]
		[TestCase(-100L, 1L, -1L)]
		[TestCase(-100L, 1L, 100L)]
		[TestCase(-100L, 1L, -100L)]
		[TestCase(-100L, 1L, 10000L)]
		[TestCase(-100L, 1L, -10000L)]
		[TestCase(-100L, 1L, 100000000L)]
		[TestCase(-100L, 1L, -100000000L)]
		[TestCase(-100L, 1L, 10000000000000000L)]
		[TestCase(-100L, 1L, -10000000000000000L)]
		[TestCase(-100L, -1L, 0L)]
		[TestCase(-100L, -1L, 1L)]
		[TestCase(-100L, -1L, -1L)]
		[TestCase(-100L, -1L, 100L)]
		[TestCase(-100L, -1L, -100L)]
		[TestCase(-100L, -1L, 10000L)]
		[TestCase(-100L, -1L, -10000L)]
		[TestCase(-100L, -1L, 100000000L)]
		[TestCase(-100L, -1L, -100000000L)]
		[TestCase(-100L, -1L, 10000000000000000L)]
		[TestCase(-100L, -1L, -10000000000000000L)]
		[TestCase(-100L, 100L, 0L)]
		[TestCase(-100L, 100L, 1L)]
		[TestCase(-100L, 100L, -1L)]
		[TestCase(-100L, 100L, 100L)]
		[TestCase(-100L, 100L, -100L)]
		[TestCase(-100L, 100L, 10000L)]
		[TestCase(-100L, 100L, -10000L)]
		[TestCase(-100L, 100L, 100000000L)]
		[TestCase(-100L, 100L, -100000000L)]
		[TestCase(-100L, 100L, 10000000000000000L)]
		[TestCase(-100L, 100L, -10000000000000000L)]
		[TestCase(-100L, -100L, 0L)]
		[TestCase(-100L, -100L, 1L)]
		[TestCase(-100L, -100L, -1L)]
		[TestCase(-100L, -100L, 100L)]
		[TestCase(-100L, -100L, -100L)]
		[TestCase(-100L, -100L, 10000L)]
		[TestCase(-100L, -100L, -10000L)]
		[TestCase(-100L, -100L, 100000000L)]
		[TestCase(-100L, -100L, -100000000L)]
		[TestCase(-100L, -100L, 10000000000000000L)]
		[TestCase(-100L, -100L, -10000000000000000L)]
		[TestCase(-100L, 10000L, 0L)]
		[TestCase(-100L, 10000L, 1L)]
		[TestCase(-100L, 10000L, -1L)]
		[TestCase(-100L, 10000L, 100L)]
		[TestCase(-100L, 10000L, -100L)]
		[TestCase(-100L, 10000L, 10000L)]
		[TestCase(-100L, 10000L, -10000L)]
		[TestCase(-100L, 10000L, 100000000L)]
		[TestCase(-100L, 10000L, -100000000L)]
		[TestCase(-100L, 10000L, 10000000000000000L)]
		[TestCase(-100L, 10000L, -10000000000000000L)]
		[TestCase(-100L, -10000L, 0L)]
		[TestCase(-100L, -10000L, 1L)]
		[TestCase(-100L, -10000L, -1L)]
		[TestCase(-100L, -10000L, 100L)]
		[TestCase(-100L, -10000L, -100L)]
		[TestCase(-100L, -10000L, 10000L)]
		[TestCase(-100L, -10000L, -10000L)]
		[TestCase(-100L, -10000L, 100000000L)]
		[TestCase(-100L, -10000L, -100000000L)]
		[TestCase(-100L, -10000L, 10000000000000000L)]
		[TestCase(-100L, -10000L, -10000000000000000L)]
		[TestCase(-100L, 100000000L, 0L)]
		[TestCase(-100L, 100000000L, 1L)]
		[TestCase(-100L, 100000000L, -1L)]
		[TestCase(-100L, 100000000L, 100L)]
		[TestCase(-100L, 100000000L, -100L)]
		[TestCase(-100L, 100000000L, 10000L)]
		[TestCase(-100L, 100000000L, -10000L)]
		[TestCase(-100L, 100000000L, 100000000L)]
		[TestCase(-100L, 100000000L, -100000000L)]
		[TestCase(-100L, 100000000L, 10000000000000000L)]
		[TestCase(-100L, 100000000L, -10000000000000000L)]
		[TestCase(-100L, -100000000L, 0L)]
		[TestCase(-100L, -100000000L, 1L)]
		[TestCase(-100L, -100000000L, -1L)]
		[TestCase(-100L, -100000000L, 100L)]
		[TestCase(-100L, -100000000L, -100L)]
		[TestCase(-100L, -100000000L, 10000L)]
		[TestCase(-100L, -100000000L, -10000L)]
		[TestCase(-100L, -100000000L, 100000000L)]
		[TestCase(-100L, -100000000L, -100000000L)]
		[TestCase(-100L, -100000000L, 10000000000000000L)]
		[TestCase(-100L, -100000000L, -10000000000000000L)]
		[TestCase(-100L, 10000000000000000L, 0L)]
		[TestCase(-100L, 10000000000000000L, 1L)]
		[TestCase(-100L, 10000000000000000L, -1L)]
		[TestCase(-100L, 10000000000000000L, 100L)]
		[TestCase(-100L, 10000000000000000L, -100L)]
		[TestCase(-100L, 10000000000000000L, 10000L)]
		[TestCase(-100L, 10000000000000000L, -10000L)]
		[TestCase(-100L, 10000000000000000L, 100000000L)]
		[TestCase(-100L, 10000000000000000L, -100000000L)]
		[TestCase(-100L, 10000000000000000L, 10000000000000000L)]
		[TestCase(-100L, 10000000000000000L, -10000000000000000L)]
		[TestCase(-100L, -10000000000000000L, 0L)]
		[TestCase(-100L, -10000000000000000L, 1L)]
		[TestCase(-100L, -10000000000000000L, -1L)]
		[TestCase(-100L, -10000000000000000L, 100L)]
		[TestCase(-100L, -10000000000000000L, -100L)]
		[TestCase(-100L, -10000000000000000L, 10000L)]
		[TestCase(-100L, -10000000000000000L, -10000L)]
		[TestCase(-100L, -10000000000000000L, 100000000L)]
		[TestCase(-100L, -10000000000000000L, -100000000L)]
		[TestCase(-100L, -10000000000000000L, 10000000000000000L)]
		[TestCase(-100L, -10000000000000000L, -10000000000000000L)]
		[TestCase(10000L, 0L, 0L)]
		[TestCase(10000L, 0L, 1L)]
		[TestCase(10000L, 0L, -1L)]
		[TestCase(10000L, 0L, 100L)]
		[TestCase(10000L, 0L, -100L)]
		[TestCase(10000L, 0L, 10000L)]
		[TestCase(10000L, 0L, -10000L)]
		[TestCase(10000L, 0L, 100000000L)]
		[TestCase(10000L, 0L, -100000000L)]
		[TestCase(10000L, 0L, 10000000000000000L)]
		[TestCase(10000L, 0L, -10000000000000000L)]
		[TestCase(10000L, 1L, 0L)]
		[TestCase(10000L, 1L, 1L)]
		[TestCase(10000L, 1L, -1L)]
		[TestCase(10000L, 1L, 100L)]
		[TestCase(10000L, 1L, -100L)]
		[TestCase(10000L, 1L, 10000L)]
		[TestCase(10000L, 1L, -10000L)]
		[TestCase(10000L, 1L, 100000000L)]
		[TestCase(10000L, 1L, -100000000L)]
		[TestCase(10000L, 1L, 10000000000000000L)]
		[TestCase(10000L, 1L, -10000000000000000L)]
		[TestCase(10000L, -1L, 0L)]
		[TestCase(10000L, -1L, 1L)]
		[TestCase(10000L, -1L, -1L)]
		[TestCase(10000L, -1L, 100L)]
		[TestCase(10000L, -1L, -100L)]
		[TestCase(10000L, -1L, 10000L)]
		[TestCase(10000L, -1L, -10000L)]
		[TestCase(10000L, -1L, 100000000L)]
		[TestCase(10000L, -1L, -100000000L)]
		[TestCase(10000L, -1L, 10000000000000000L)]
		[TestCase(10000L, -1L, -10000000000000000L)]
		[TestCase(10000L, 100L, 0L)]
		[TestCase(10000L, 100L, 1L)]
		[TestCase(10000L, 100L, -1L)]
		[TestCase(10000L, 100L, 100L)]
		[TestCase(10000L, 100L, -100L)]
		[TestCase(10000L, 100L, 10000L)]
		[TestCase(10000L, 100L, -10000L)]
		[TestCase(10000L, 100L, 100000000L)]
		[TestCase(10000L, 100L, -100000000L)]
		[TestCase(10000L, 100L, 10000000000000000L)]
		[TestCase(10000L, 100L, -10000000000000000L)]
		[TestCase(10000L, -100L, 0L)]
		[TestCase(10000L, -100L, 1L)]
		[TestCase(10000L, -100L, -1L)]
		[TestCase(10000L, -100L, 100L)]
		[TestCase(10000L, -100L, -100L)]
		[TestCase(10000L, -100L, 10000L)]
		[TestCase(10000L, -100L, -10000L)]
		[TestCase(10000L, -100L, 100000000L)]
		[TestCase(10000L, -100L, -100000000L)]
		[TestCase(10000L, -100L, 10000000000000000L)]
		[TestCase(10000L, -100L, -10000000000000000L)]
		[TestCase(10000L, 10000L, 0L)]
		[TestCase(10000L, 10000L, 1L)]
		[TestCase(10000L, 10000L, -1L)]
		[TestCase(10000L, 10000L, 100L)]
		[TestCase(10000L, 10000L, -100L)]
		[TestCase(10000L, 10000L, 10000L)]
		[TestCase(10000L, 10000L, -10000L)]
		[TestCase(10000L, 10000L, 100000000L)]
		[TestCase(10000L, 10000L, -100000000L)]
		[TestCase(10000L, 10000L, 10000000000000000L)]
		[TestCase(10000L, 10000L, -10000000000000000L)]
		[TestCase(10000L, -10000L, 0L)]
		[TestCase(10000L, -10000L, 1L)]
		[TestCase(10000L, -10000L, -1L)]
		[TestCase(10000L, -10000L, 100L)]
		[TestCase(10000L, -10000L, -100L)]
		[TestCase(10000L, -10000L, 10000L)]
		[TestCase(10000L, -10000L, -10000L)]
		[TestCase(10000L, -10000L, 100000000L)]
		[TestCase(10000L, -10000L, -100000000L)]
		[TestCase(10000L, -10000L, 10000000000000000L)]
		[TestCase(10000L, -10000L, -10000000000000000L)]
		[TestCase(10000L, 100000000L, 0L)]
		[TestCase(10000L, 100000000L, 1L)]
		[TestCase(10000L, 100000000L, -1L)]
		[TestCase(10000L, 100000000L, 100L)]
		[TestCase(10000L, 100000000L, -100L)]
		[TestCase(10000L, 100000000L, 10000L)]
		[TestCase(10000L, 100000000L, -10000L)]
		[TestCase(10000L, 100000000L, 100000000L)]
		[TestCase(10000L, 100000000L, -100000000L)]
		[TestCase(10000L, 100000000L, 10000000000000000L)]
		[TestCase(10000L, 100000000L, -10000000000000000L)]
		[TestCase(10000L, -100000000L, 0L)]
		[TestCase(10000L, -100000000L, 1L)]
		[TestCase(10000L, -100000000L, -1L)]
		[TestCase(10000L, -100000000L, 100L)]
		[TestCase(10000L, -100000000L, -100L)]
		[TestCase(10000L, -100000000L, 10000L)]
		[TestCase(10000L, -100000000L, -10000L)]
		[TestCase(10000L, -100000000L, 100000000L)]
		[TestCase(10000L, -100000000L, -100000000L)]
		[TestCase(10000L, -100000000L, 10000000000000000L)]
		[TestCase(10000L, -100000000L, -10000000000000000L)]
		[TestCase(10000L, 10000000000000000L, 0L)]
		[TestCase(10000L, 10000000000000000L, 1L)]
		[TestCase(10000L, 10000000000000000L, -1L)]
		[TestCase(10000L, 10000000000000000L, 100L)]
		[TestCase(10000L, 10000000000000000L, -100L)]
		[TestCase(10000L, 10000000000000000L, 10000L)]
		[TestCase(10000L, 10000000000000000L, -10000L)]
		[TestCase(10000L, 10000000000000000L, 100000000L)]
		[TestCase(10000L, 10000000000000000L, -100000000L)]
		[TestCase(10000L, 10000000000000000L, 10000000000000000L)]
		[TestCase(10000L, 10000000000000000L, -10000000000000000L)]
		[TestCase(10000L, -10000000000000000L, 0L)]
		[TestCase(10000L, -10000000000000000L, 1L)]
		[TestCase(10000L, -10000000000000000L, -1L)]
		[TestCase(10000L, -10000000000000000L, 100L)]
		[TestCase(10000L, -10000000000000000L, -100L)]
		[TestCase(10000L, -10000000000000000L, 10000L)]
		[TestCase(10000L, -10000000000000000L, -10000L)]
		[TestCase(10000L, -10000000000000000L, 100000000L)]
		[TestCase(10000L, -10000000000000000L, -100000000L)]
		[TestCase(10000L, -10000000000000000L, 10000000000000000L)]
		[TestCase(10000L, -10000000000000000L, -10000000000000000L)]
		[TestCase(-10000L, 0L, 0L)]
		[TestCase(-10000L, 0L, 1L)]
		[TestCase(-10000L, 0L, -1L)]
		[TestCase(-10000L, 0L, 100L)]
		[TestCase(-10000L, 0L, -100L)]
		[TestCase(-10000L, 0L, 10000L)]
		[TestCase(-10000L, 0L, -10000L)]
		[TestCase(-10000L, 0L, 100000000L)]
		[TestCase(-10000L, 0L, -100000000L)]
		[TestCase(-10000L, 0L, 10000000000000000L)]
		[TestCase(-10000L, 0L, -10000000000000000L)]
		[TestCase(-10000L, 1L, 0L)]
		[TestCase(-10000L, 1L, 1L)]
		[TestCase(-10000L, 1L, -1L)]
		[TestCase(-10000L, 1L, 100L)]
		[TestCase(-10000L, 1L, -100L)]
		[TestCase(-10000L, 1L, 10000L)]
		[TestCase(-10000L, 1L, -10000L)]
		[TestCase(-10000L, 1L, 100000000L)]
		[TestCase(-10000L, 1L, -100000000L)]
		[TestCase(-10000L, 1L, 10000000000000000L)]
		[TestCase(-10000L, 1L, -10000000000000000L)]
		[TestCase(-10000L, -1L, 0L)]
		[TestCase(-10000L, -1L, 1L)]
		[TestCase(-10000L, -1L, -1L)]
		[TestCase(-10000L, -1L, 100L)]
		[TestCase(-10000L, -1L, -100L)]
		[TestCase(-10000L, -1L, 10000L)]
		[TestCase(-10000L, -1L, -10000L)]
		[TestCase(-10000L, -1L, 100000000L)]
		[TestCase(-10000L, -1L, -100000000L)]
		[TestCase(-10000L, -1L, 10000000000000000L)]
		[TestCase(-10000L, -1L, -10000000000000000L)]
		[TestCase(-10000L, 100L, 0L)]
		[TestCase(-10000L, 100L, 1L)]
		[TestCase(-10000L, 100L, -1L)]
		[TestCase(-10000L, 100L, 100L)]
		[TestCase(-10000L, 100L, -100L)]
		[TestCase(-10000L, 100L, 10000L)]
		[TestCase(-10000L, 100L, -10000L)]
		[TestCase(-10000L, 100L, 100000000L)]
		[TestCase(-10000L, 100L, -100000000L)]
		[TestCase(-10000L, 100L, 10000000000000000L)]
		[TestCase(-10000L, 100L, -10000000000000000L)]
		[TestCase(-10000L, -100L, 0L)]
		[TestCase(-10000L, -100L, 1L)]
		[TestCase(-10000L, -100L, -1L)]
		[TestCase(-10000L, -100L, 100L)]
		[TestCase(-10000L, -100L, -100L)]
		[TestCase(-10000L, -100L, 10000L)]
		[TestCase(-10000L, -100L, -10000L)]
		[TestCase(-10000L, -100L, 100000000L)]
		[TestCase(-10000L, -100L, -100000000L)]
		[TestCase(-10000L, -100L, 10000000000000000L)]
		[TestCase(-10000L, -100L, -10000000000000000L)]
		[TestCase(-10000L, 10000L, 0L)]
		[TestCase(-10000L, 10000L, 1L)]
		[TestCase(-10000L, 10000L, -1L)]
		[TestCase(-10000L, 10000L, 100L)]
		[TestCase(-10000L, 10000L, -100L)]
		[TestCase(-10000L, 10000L, 10000L)]
		[TestCase(-10000L, 10000L, -10000L)]
		[TestCase(-10000L, 10000L, 100000000L)]
		[TestCase(-10000L, 10000L, -100000000L)]
		[TestCase(-10000L, 10000L, 10000000000000000L)]
		[TestCase(-10000L, 10000L, -10000000000000000L)]
		[TestCase(-10000L, -10000L, 0L)]
		[TestCase(-10000L, -10000L, 1L)]
		[TestCase(-10000L, -10000L, -1L)]
		[TestCase(-10000L, -10000L, 100L)]
		[TestCase(-10000L, -10000L, -100L)]
		[TestCase(-10000L, -10000L, 10000L)]
		[TestCase(-10000L, -10000L, -10000L)]
		[TestCase(-10000L, -10000L, 100000000L)]
		[TestCase(-10000L, -10000L, -100000000L)]
		[TestCase(-10000L, -10000L, 10000000000000000L)]
		[TestCase(-10000L, -10000L, -10000000000000000L)]
		[TestCase(-10000L, 100000000L, 0L)]
		[TestCase(-10000L, 100000000L, 1L)]
		[TestCase(-10000L, 100000000L, -1L)]
		[TestCase(-10000L, 100000000L, 100L)]
		[TestCase(-10000L, 100000000L, -100L)]
		[TestCase(-10000L, 100000000L, 10000L)]
		[TestCase(-10000L, 100000000L, -10000L)]
		[TestCase(-10000L, 100000000L, 100000000L)]
		[TestCase(-10000L, 100000000L, -100000000L)]
		[TestCase(-10000L, 100000000L, 10000000000000000L)]
		[TestCase(-10000L, 100000000L, -10000000000000000L)]
		[TestCase(-10000L, -100000000L, 0L)]
		[TestCase(-10000L, -100000000L, 1L)]
		[TestCase(-10000L, -100000000L, -1L)]
		[TestCase(-10000L, -100000000L, 100L)]
		[TestCase(-10000L, -100000000L, -100L)]
		[TestCase(-10000L, -100000000L, 10000L)]
		[TestCase(-10000L, -100000000L, -10000L)]
		[TestCase(-10000L, -100000000L, 100000000L)]
		[TestCase(-10000L, -100000000L, -100000000L)]
		[TestCase(-10000L, -100000000L, 10000000000000000L)]
		[TestCase(-10000L, -100000000L, -10000000000000000L)]
		[TestCase(-10000L, 10000000000000000L, 0L)]
		[TestCase(-10000L, 10000000000000000L, 1L)]
		[TestCase(-10000L, 10000000000000000L, -1L)]
		[TestCase(-10000L, 10000000000000000L, 100L)]
		[TestCase(-10000L, 10000000000000000L, -100L)]
		[TestCase(-10000L, 10000000000000000L, 10000L)]
		[TestCase(-10000L, 10000000000000000L, -10000L)]
		[TestCase(-10000L, 10000000000000000L, 100000000L)]
		[TestCase(-10000L, 10000000000000000L, -100000000L)]
		[TestCase(-10000L, 10000000000000000L, 10000000000000000L)]
		[TestCase(-10000L, 10000000000000000L, -10000000000000000L)]
		[TestCase(-10000L, -10000000000000000L, 0L)]
		[TestCase(-10000L, -10000000000000000L, 1L)]
		[TestCase(-10000L, -10000000000000000L, -1L)]
		[TestCase(-10000L, -10000000000000000L, 100L)]
		[TestCase(-10000L, -10000000000000000L, -100L)]
		[TestCase(-10000L, -10000000000000000L, 10000L)]
		[TestCase(-10000L, -10000000000000000L, -10000L)]
		[TestCase(-10000L, -10000000000000000L, 100000000L)]
		[TestCase(-10000L, -10000000000000000L, -100000000L)]
		[TestCase(-10000L, -10000000000000000L, 10000000000000000L)]
		[TestCase(-10000L, -10000000000000000L, -10000000000000000L)]
		[TestCase(100000000L, 0L, 0L)]
		[TestCase(100000000L, 0L, 1L)]
		[TestCase(100000000L, 0L, -1L)]
		[TestCase(100000000L, 0L, 100L)]
		[TestCase(100000000L, 0L, -100L)]
		[TestCase(100000000L, 0L, 10000L)]
		[TestCase(100000000L, 0L, -10000L)]
		[TestCase(100000000L, 0L, 100000000L)]
		[TestCase(100000000L, 0L, -100000000L)]
		[TestCase(100000000L, 0L, 10000000000000000L)]
		[TestCase(100000000L, 0L, -10000000000000000L)]
		[TestCase(100000000L, 1L, 0L)]
		[TestCase(100000000L, 1L, 1L)]
		[TestCase(100000000L, 1L, -1L)]
		[TestCase(100000000L, 1L, 100L)]
		[TestCase(100000000L, 1L, -100L)]
		[TestCase(100000000L, 1L, 10000L)]
		[TestCase(100000000L, 1L, -10000L)]
		[TestCase(100000000L, 1L, 100000000L)]
		[TestCase(100000000L, 1L, -100000000L)]
		[TestCase(100000000L, 1L, 10000000000000000L)]
		[TestCase(100000000L, 1L, -10000000000000000L)]
		[TestCase(100000000L, -1L, 0L)]
		[TestCase(100000000L, -1L, 1L)]
		[TestCase(100000000L, -1L, -1L)]
		[TestCase(100000000L, -1L, 100L)]
		[TestCase(100000000L, -1L, -100L)]
		[TestCase(100000000L, -1L, 10000L)]
		[TestCase(100000000L, -1L, -10000L)]
		[TestCase(100000000L, -1L, 100000000L)]
		[TestCase(100000000L, -1L, -100000000L)]
		[TestCase(100000000L, -1L, 10000000000000000L)]
		[TestCase(100000000L, -1L, -10000000000000000L)]
		[TestCase(100000000L, 100L, 0L)]
		[TestCase(100000000L, 100L, 1L)]
		[TestCase(100000000L, 100L, -1L)]
		[TestCase(100000000L, 100L, 100L)]
		[TestCase(100000000L, 100L, -100L)]
		[TestCase(100000000L, 100L, 10000L)]
		[TestCase(100000000L, 100L, -10000L)]
		[TestCase(100000000L, 100L, 100000000L)]
		[TestCase(100000000L, 100L, -100000000L)]
		[TestCase(100000000L, 100L, 10000000000000000L)]
		[TestCase(100000000L, 100L, -10000000000000000L)]
		[TestCase(100000000L, -100L, 0L)]
		[TestCase(100000000L, -100L, 1L)]
		[TestCase(100000000L, -100L, -1L)]
		[TestCase(100000000L, -100L, 100L)]
		[TestCase(100000000L, -100L, -100L)]
		[TestCase(100000000L, -100L, 10000L)]
		[TestCase(100000000L, -100L, -10000L)]
		[TestCase(100000000L, -100L, 100000000L)]
		[TestCase(100000000L, -100L, -100000000L)]
		[TestCase(100000000L, -100L, 10000000000000000L)]
		[TestCase(100000000L, -100L, -10000000000000000L)]
		[TestCase(100000000L, 10000L, 0L)]
		[TestCase(100000000L, 10000L, 1L)]
		[TestCase(100000000L, 10000L, -1L)]
		[TestCase(100000000L, 10000L, 100L)]
		[TestCase(100000000L, 10000L, -100L)]
		[TestCase(100000000L, 10000L, 10000L)]
		[TestCase(100000000L, 10000L, -10000L)]
		[TestCase(100000000L, 10000L, 100000000L)]
		[TestCase(100000000L, 10000L, -100000000L)]
		[TestCase(100000000L, 10000L, 10000000000000000L)]
		[TestCase(100000000L, 10000L, -10000000000000000L)]
		[TestCase(100000000L, -10000L, 0L)]
		[TestCase(100000000L, -10000L, 1L)]
		[TestCase(100000000L, -10000L, -1L)]
		[TestCase(100000000L, -10000L, 100L)]
		[TestCase(100000000L, -10000L, -100L)]
		[TestCase(100000000L, -10000L, 10000L)]
		[TestCase(100000000L, -10000L, -10000L)]
		[TestCase(100000000L, -10000L, 100000000L)]
		[TestCase(100000000L, -10000L, -100000000L)]
		[TestCase(100000000L, -10000L, 10000000000000000L)]
		[TestCase(100000000L, -10000L, -10000000000000000L)]
		[TestCase(100000000L, 100000000L, 0L)]
		[TestCase(100000000L, 100000000L, 1L)]
		[TestCase(100000000L, 100000000L, -1L)]
		[TestCase(100000000L, 100000000L, 100L)]
		[TestCase(100000000L, 100000000L, -100L)]
		[TestCase(100000000L, 100000000L, 10000L)]
		[TestCase(100000000L, 100000000L, -10000L)]
		[TestCase(100000000L, 100000000L, 100000000L)]
		[TestCase(100000000L, 100000000L, -100000000L)]
		[TestCase(100000000L, 100000000L, 10000000000000000L)]
		[TestCase(100000000L, 100000000L, -10000000000000000L)]
		[TestCase(100000000L, -100000000L, 0L)]
		[TestCase(100000000L, -100000000L, 1L)]
		[TestCase(100000000L, -100000000L, -1L)]
		[TestCase(100000000L, -100000000L, 100L)]
		[TestCase(100000000L, -100000000L, -100L)]
		[TestCase(100000000L, -100000000L, 10000L)]
		[TestCase(100000000L, -100000000L, -10000L)]
		[TestCase(100000000L, -100000000L, 100000000L)]
		[TestCase(100000000L, -100000000L, -100000000L)]
		[TestCase(100000000L, -100000000L, 10000000000000000L)]
		[TestCase(100000000L, -100000000L, -10000000000000000L)]
		[TestCase(100000000L, 10000000000000000L, 0L)]
		[TestCase(100000000L, 10000000000000000L, 1L)]
		[TestCase(100000000L, 10000000000000000L, -1L)]
		[TestCase(100000000L, 10000000000000000L, 100L)]
		[TestCase(100000000L, 10000000000000000L, -100L)]
		[TestCase(100000000L, 10000000000000000L, 10000L)]
		[TestCase(100000000L, 10000000000000000L, -10000L)]
		[TestCase(100000000L, 10000000000000000L, 100000000L)]
		[TestCase(100000000L, 10000000000000000L, -100000000L)]
		[TestCase(100000000L, 10000000000000000L, 10000000000000000L)]
		[TestCase(100000000L, 10000000000000000L, -10000000000000000L)]
		[TestCase(100000000L, -10000000000000000L, 0L)]
		[TestCase(100000000L, -10000000000000000L, 1L)]
		[TestCase(100000000L, -10000000000000000L, -1L)]
		[TestCase(100000000L, -10000000000000000L, 100L)]
		[TestCase(100000000L, -10000000000000000L, -100L)]
		[TestCase(100000000L, -10000000000000000L, 10000L)]
		[TestCase(100000000L, -10000000000000000L, -10000L)]
		[TestCase(100000000L, -10000000000000000L, 100000000L)]
		[TestCase(100000000L, -10000000000000000L, -100000000L)]
		[TestCase(100000000L, -10000000000000000L, 10000000000000000L)]
		[TestCase(100000000L, -10000000000000000L, -10000000000000000L)]
		[TestCase(-100000000L, 0L, 0L)]
		[TestCase(-100000000L, 0L, 1L)]
		[TestCase(-100000000L, 0L, -1L)]
		[TestCase(-100000000L, 0L, 100L)]
		[TestCase(-100000000L, 0L, -100L)]
		[TestCase(-100000000L, 0L, 10000L)]
		[TestCase(-100000000L, 0L, -10000L)]
		[TestCase(-100000000L, 0L, 100000000L)]
		[TestCase(-100000000L, 0L, -100000000L)]
		[TestCase(-100000000L, 0L, 10000000000000000L)]
		[TestCase(-100000000L, 0L, -10000000000000000L)]
		[TestCase(-100000000L, 1L, 0L)]
		[TestCase(-100000000L, 1L, 1L)]
		[TestCase(-100000000L, 1L, -1L)]
		[TestCase(-100000000L, 1L, 100L)]
		[TestCase(-100000000L, 1L, -100L)]
		[TestCase(-100000000L, 1L, 10000L)]
		[TestCase(-100000000L, 1L, -10000L)]
		[TestCase(-100000000L, 1L, 100000000L)]
		[TestCase(-100000000L, 1L, -100000000L)]
		[TestCase(-100000000L, 1L, 10000000000000000L)]
		[TestCase(-100000000L, 1L, -10000000000000000L)]
		[TestCase(-100000000L, -1L, 0L)]
		[TestCase(-100000000L, -1L, 1L)]
		[TestCase(-100000000L, -1L, -1L)]
		[TestCase(-100000000L, -1L, 100L)]
		[TestCase(-100000000L, -1L, -100L)]
		[TestCase(-100000000L, -1L, 10000L)]
		[TestCase(-100000000L, -1L, -10000L)]
		[TestCase(-100000000L, -1L, 100000000L)]
		[TestCase(-100000000L, -1L, -100000000L)]
		[TestCase(-100000000L, -1L, 10000000000000000L)]
		[TestCase(-100000000L, -1L, -10000000000000000L)]
		[TestCase(-100000000L, 100L, 0L)]
		[TestCase(-100000000L, 100L, 1L)]
		[TestCase(-100000000L, 100L, -1L)]
		[TestCase(-100000000L, 100L, 100L)]
		[TestCase(-100000000L, 100L, -100L)]
		[TestCase(-100000000L, 100L, 10000L)]
		[TestCase(-100000000L, 100L, -10000L)]
		[TestCase(-100000000L, 100L, 100000000L)]
		[TestCase(-100000000L, 100L, -100000000L)]
		[TestCase(-100000000L, 100L, 10000000000000000L)]
		[TestCase(-100000000L, 100L, -10000000000000000L)]
		[TestCase(-100000000L, -100L, 0L)]
		[TestCase(-100000000L, -100L, 1L)]
		[TestCase(-100000000L, -100L, -1L)]
		[TestCase(-100000000L, -100L, 100L)]
		[TestCase(-100000000L, -100L, -100L)]
		[TestCase(-100000000L, -100L, 10000L)]
		[TestCase(-100000000L, -100L, -10000L)]
		[TestCase(-100000000L, -100L, 100000000L)]
		[TestCase(-100000000L, -100L, -100000000L)]
		[TestCase(-100000000L, -100L, 10000000000000000L)]
		[TestCase(-100000000L, -100L, -10000000000000000L)]
		[TestCase(-100000000L, 10000L, 0L)]
		[TestCase(-100000000L, 10000L, 1L)]
		[TestCase(-100000000L, 10000L, -1L)]
		[TestCase(-100000000L, 10000L, 100L)]
		[TestCase(-100000000L, 10000L, -100L)]
		[TestCase(-100000000L, 10000L, 10000L)]
		[TestCase(-100000000L, 10000L, -10000L)]
		[TestCase(-100000000L, 10000L, 100000000L)]
		[TestCase(-100000000L, 10000L, -100000000L)]
		[TestCase(-100000000L, 10000L, 10000000000000000L)]
		[TestCase(-100000000L, 10000L, -10000000000000000L)]
		[TestCase(-100000000L, -10000L, 0L)]
		[TestCase(-100000000L, -10000L, 1L)]
		[TestCase(-100000000L, -10000L, -1L)]
		[TestCase(-100000000L, -10000L, 100L)]
		[TestCase(-100000000L, -10000L, -100L)]
		[TestCase(-100000000L, -10000L, 10000L)]
		[TestCase(-100000000L, -10000L, -10000L)]
		[TestCase(-100000000L, -10000L, 100000000L)]
		[TestCase(-100000000L, -10000L, -100000000L)]
		[TestCase(-100000000L, -10000L, 10000000000000000L)]
		[TestCase(-100000000L, -10000L, -10000000000000000L)]
		[TestCase(-100000000L, 100000000L, 0L)]
		[TestCase(-100000000L, 100000000L, 1L)]
		[TestCase(-100000000L, 100000000L, -1L)]
		[TestCase(-100000000L, 100000000L, 100L)]
		[TestCase(-100000000L, 100000000L, -100L)]
		[TestCase(-100000000L, 100000000L, 10000L)]
		[TestCase(-100000000L, 100000000L, -10000L)]
		[TestCase(-100000000L, 100000000L, 100000000L)]
		[TestCase(-100000000L, 100000000L, -100000000L)]
		[TestCase(-100000000L, 100000000L, 10000000000000000L)]
		[TestCase(-100000000L, 100000000L, -10000000000000000L)]
		[TestCase(-100000000L, -100000000L, 0L)]
		[TestCase(-100000000L, -100000000L, 1L)]
		[TestCase(-100000000L, -100000000L, -1L)]
		[TestCase(-100000000L, -100000000L, 100L)]
		[TestCase(-100000000L, -100000000L, -100L)]
		[TestCase(-100000000L, -100000000L, 10000L)]
		[TestCase(-100000000L, -100000000L, -10000L)]
		[TestCase(-100000000L, -100000000L, 100000000L)]
		[TestCase(-100000000L, -100000000L, -100000000L)]
		[TestCase(-100000000L, -100000000L, 10000000000000000L)]
		[TestCase(-100000000L, -100000000L, -10000000000000000L)]
		[TestCase(-100000000L, 10000000000000000L, 0L)]
		[TestCase(-100000000L, 10000000000000000L, 1L)]
		[TestCase(-100000000L, 10000000000000000L, -1L)]
		[TestCase(-100000000L, 10000000000000000L, 100L)]
		[TestCase(-100000000L, 10000000000000000L, -100L)]
		[TestCase(-100000000L, 10000000000000000L, 10000L)]
		[TestCase(-100000000L, 10000000000000000L, -10000L)]
		[TestCase(-100000000L, 10000000000000000L, 100000000L)]
		[TestCase(-100000000L, 10000000000000000L, -100000000L)]
		[TestCase(-100000000L, 10000000000000000L, 10000000000000000L)]
		[TestCase(-100000000L, 10000000000000000L, -10000000000000000L)]
		[TestCase(-100000000L, -10000000000000000L, 0L)]
		[TestCase(-100000000L, -10000000000000000L, 1L)]
		[TestCase(-100000000L, -10000000000000000L, -1L)]
		[TestCase(-100000000L, -10000000000000000L, 100L)]
		[TestCase(-100000000L, -10000000000000000L, -100L)]
		[TestCase(-100000000L, -10000000000000000L, 10000L)]
		[TestCase(-100000000L, -10000000000000000L, -10000L)]
		[TestCase(-100000000L, -10000000000000000L, 100000000L)]
		[TestCase(-100000000L, -10000000000000000L, -100000000L)]
		[TestCase(-100000000L, -10000000000000000L, 10000000000000000L)]
		[TestCase(-100000000L, -10000000000000000L, -10000000000000000L)]
		[TestCase(10000000000000000L, 0L, 0L)]
		[TestCase(10000000000000000L, 0L, 1L)]
		[TestCase(10000000000000000L, 0L, -1L)]
		[TestCase(10000000000000000L, 0L, 100L)]
		[TestCase(10000000000000000L, 0L, -100L)]
		[TestCase(10000000000000000L, 0L, 10000L)]
		[TestCase(10000000000000000L, 0L, -10000L)]
		[TestCase(10000000000000000L, 0L, 100000000L)]
		[TestCase(10000000000000000L, 0L, -100000000L)]
		[TestCase(10000000000000000L, 0L, 10000000000000000L)]
		[TestCase(10000000000000000L, 0L, -10000000000000000L)]
		[TestCase(10000000000000000L, 1L, 0L)]
		[TestCase(10000000000000000L, 1L, 1L)]
		[TestCase(10000000000000000L, 1L, -1L)]
		[TestCase(10000000000000000L, 1L, 100L)]
		[TestCase(10000000000000000L, 1L, -100L)]
		[TestCase(10000000000000000L, 1L, 10000L)]
		[TestCase(10000000000000000L, 1L, -10000L)]
		[TestCase(10000000000000000L, 1L, 100000000L)]
		[TestCase(10000000000000000L, 1L, -100000000L)]
		[TestCase(10000000000000000L, 1L, 10000000000000000L)]
		[TestCase(10000000000000000L, 1L, -10000000000000000L)]
		[TestCase(10000000000000000L, -1L, 0L)]
		[TestCase(10000000000000000L, -1L, 1L)]
		[TestCase(10000000000000000L, -1L, -1L)]
		[TestCase(10000000000000000L, -1L, 100L)]
		[TestCase(10000000000000000L, -1L, -100L)]
		[TestCase(10000000000000000L, -1L, 10000L)]
		[TestCase(10000000000000000L, -1L, -10000L)]
		[TestCase(10000000000000000L, -1L, 100000000L)]
		[TestCase(10000000000000000L, -1L, -100000000L)]
		[TestCase(10000000000000000L, -1L, 10000000000000000L)]
		[TestCase(10000000000000000L, -1L, -10000000000000000L)]
		[TestCase(10000000000000000L, 100L, 0L)]
		[TestCase(10000000000000000L, 100L, 1L)]
		[TestCase(10000000000000000L, 100L, -1L)]
		[TestCase(10000000000000000L, 100L, 100L)]
		[TestCase(10000000000000000L, 100L, -100L)]
		[TestCase(10000000000000000L, 100L, 10000L)]
		[TestCase(10000000000000000L, 100L, -10000L)]
		[TestCase(10000000000000000L, 100L, 100000000L)]
		[TestCase(10000000000000000L, 100L, -100000000L)]
		[TestCase(10000000000000000L, 100L, 10000000000000000L)]
		[TestCase(10000000000000000L, 100L, -10000000000000000L)]
		[TestCase(10000000000000000L, -100L, 0L)]
		[TestCase(10000000000000000L, -100L, 1L)]
		[TestCase(10000000000000000L, -100L, -1L)]
		[TestCase(10000000000000000L, -100L, 100L)]
		[TestCase(10000000000000000L, -100L, -100L)]
		[TestCase(10000000000000000L, -100L, 10000L)]
		[TestCase(10000000000000000L, -100L, -10000L)]
		[TestCase(10000000000000000L, -100L, 100000000L)]
		[TestCase(10000000000000000L, -100L, -100000000L)]
		[TestCase(10000000000000000L, -100L, 10000000000000000L)]
		[TestCase(10000000000000000L, -100L, -10000000000000000L)]
		[TestCase(10000000000000000L, 10000L, 0L)]
		[TestCase(10000000000000000L, 10000L, 1L)]
		[TestCase(10000000000000000L, 10000L, -1L)]
		[TestCase(10000000000000000L, 10000L, 100L)]
		[TestCase(10000000000000000L, 10000L, -100L)]
		[TestCase(10000000000000000L, 10000L, 10000L)]
		[TestCase(10000000000000000L, 10000L, -10000L)]
		[TestCase(10000000000000000L, 10000L, 100000000L)]
		[TestCase(10000000000000000L, 10000L, -100000000L)]
		[TestCase(10000000000000000L, 10000L, 10000000000000000L)]
		[TestCase(10000000000000000L, 10000L, -10000000000000000L)]
		[TestCase(10000000000000000L, -10000L, 0L)]
		[TestCase(10000000000000000L, -10000L, 1L)]
		[TestCase(10000000000000000L, -10000L, -1L)]
		[TestCase(10000000000000000L, -10000L, 100L)]
		[TestCase(10000000000000000L, -10000L, -100L)]
		[TestCase(10000000000000000L, -10000L, 10000L)]
		[TestCase(10000000000000000L, -10000L, -10000L)]
		[TestCase(10000000000000000L, -10000L, 100000000L)]
		[TestCase(10000000000000000L, -10000L, -100000000L)]
		[TestCase(10000000000000000L, -10000L, 10000000000000000L)]
		[TestCase(10000000000000000L, -10000L, -10000000000000000L)]
		[TestCase(10000000000000000L, 100000000L, 0L)]
		[TestCase(10000000000000000L, 100000000L, 1L)]
		[TestCase(10000000000000000L, 100000000L, -1L)]
		[TestCase(10000000000000000L, 100000000L, 100L)]
		[TestCase(10000000000000000L, 100000000L, -100L)]
		[TestCase(10000000000000000L, 100000000L, 10000L)]
		[TestCase(10000000000000000L, 100000000L, -10000L)]
		[TestCase(10000000000000000L, 100000000L, 100000000L)]
		[TestCase(10000000000000000L, 100000000L, -100000000L)]
		[TestCase(10000000000000000L, 100000000L, 10000000000000000L)]
		[TestCase(10000000000000000L, 100000000L, -10000000000000000L)]
		[TestCase(10000000000000000L, -100000000L, 0L)]
		[TestCase(10000000000000000L, -100000000L, 1L)]
		[TestCase(10000000000000000L, -100000000L, -1L)]
		[TestCase(10000000000000000L, -100000000L, 100L)]
		[TestCase(10000000000000000L, -100000000L, -100L)]
		[TestCase(10000000000000000L, -100000000L, 10000L)]
		[TestCase(10000000000000000L, -100000000L, -10000L)]
		[TestCase(10000000000000000L, -100000000L, 100000000L)]
		[TestCase(10000000000000000L, -100000000L, -100000000L)]
		[TestCase(10000000000000000L, -100000000L, 10000000000000000L)]
		[TestCase(10000000000000000L, -100000000L, -10000000000000000L)]
		[TestCase(10000000000000000L, 10000000000000000L, 0L)]
		[TestCase(10000000000000000L, 10000000000000000L, 1L)]
		[TestCase(10000000000000000L, 10000000000000000L, -1L)]
		[TestCase(10000000000000000L, 10000000000000000L, 100L)]
		[TestCase(10000000000000000L, 10000000000000000L, -100L)]
		[TestCase(10000000000000000L, 10000000000000000L, 10000L)]
		[TestCase(10000000000000000L, 10000000000000000L, -10000L)]
		[TestCase(10000000000000000L, 10000000000000000L, 100000000L)]
		[TestCase(10000000000000000L, 10000000000000000L, -100000000L)]
		[TestCase(10000000000000000L, 10000000000000000L, 10000000000000000L)]
		[TestCase(10000000000000000L, 10000000000000000L, -10000000000000000L)]
		[TestCase(10000000000000000L, -10000000000000000L, 0L)]
		[TestCase(10000000000000000L, -10000000000000000L, 1L)]
		[TestCase(10000000000000000L, -10000000000000000L, -1L)]
		[TestCase(10000000000000000L, -10000000000000000L, 100L)]
		[TestCase(10000000000000000L, -10000000000000000L, -100L)]
		[TestCase(10000000000000000L, -10000000000000000L, 10000L)]
		[TestCase(10000000000000000L, -10000000000000000L, -10000L)]
		[TestCase(10000000000000000L, -10000000000000000L, 100000000L)]
		[TestCase(10000000000000000L, -10000000000000000L, -100000000L)]
		[TestCase(10000000000000000L, -10000000000000000L, 10000000000000000L)]
		[TestCase(10000000000000000L, -10000000000000000L, -10000000000000000L)]
		[TestCase(-10000000000000000L, 0L, 0L)]
		[TestCase(-10000000000000000L, 0L, 1L)]
		[TestCase(-10000000000000000L, 0L, -1L)]
		[TestCase(-10000000000000000L, 0L, 100L)]
		[TestCase(-10000000000000000L, 0L, -100L)]
		[TestCase(-10000000000000000L, 0L, 10000L)]
		[TestCase(-10000000000000000L, 0L, -10000L)]
		[TestCase(-10000000000000000L, 0L, 100000000L)]
		[TestCase(-10000000000000000L, 0L, -100000000L)]
		[TestCase(-10000000000000000L, 0L, 10000000000000000L)]
		[TestCase(-10000000000000000L, 0L, -10000000000000000L)]
		[TestCase(-10000000000000000L, 1L, 0L)]
		[TestCase(-10000000000000000L, 1L, 1L)]
		[TestCase(-10000000000000000L, 1L, -1L)]
		[TestCase(-10000000000000000L, 1L, 100L)]
		[TestCase(-10000000000000000L, 1L, -100L)]
		[TestCase(-10000000000000000L, 1L, 10000L)]
		[TestCase(-10000000000000000L, 1L, -10000L)]
		[TestCase(-10000000000000000L, 1L, 100000000L)]
		[TestCase(-10000000000000000L, 1L, -100000000L)]
		[TestCase(-10000000000000000L, 1L, 10000000000000000L)]
		[TestCase(-10000000000000000L, 1L, -10000000000000000L)]
		[TestCase(-10000000000000000L, -1L, 0L)]
		[TestCase(-10000000000000000L, -1L, 1L)]
		[TestCase(-10000000000000000L, -1L, -1L)]
		[TestCase(-10000000000000000L, -1L, 100L)]
		[TestCase(-10000000000000000L, -1L, -100L)]
		[TestCase(-10000000000000000L, -1L, 10000L)]
		[TestCase(-10000000000000000L, -1L, -10000L)]
		[TestCase(-10000000000000000L, -1L, 100000000L)]
		[TestCase(-10000000000000000L, -1L, -100000000L)]
		[TestCase(-10000000000000000L, -1L, 10000000000000000L)]
		[TestCase(-10000000000000000L, -1L, -10000000000000000L)]
		[TestCase(-10000000000000000L, 100L, 0L)]
		[TestCase(-10000000000000000L, 100L, 1L)]
		[TestCase(-10000000000000000L, 100L, -1L)]
		[TestCase(-10000000000000000L, 100L, 100L)]
		[TestCase(-10000000000000000L, 100L, -100L)]
		[TestCase(-10000000000000000L, 100L, 10000L)]
		[TestCase(-10000000000000000L, 100L, -10000L)]
		[TestCase(-10000000000000000L, 100L, 100000000L)]
		[TestCase(-10000000000000000L, 100L, -100000000L)]
		[TestCase(-10000000000000000L, 100L, 10000000000000000L)]
		[TestCase(-10000000000000000L, 100L, -10000000000000000L)]
		[TestCase(-10000000000000000L, -100L, 0L)]
		[TestCase(-10000000000000000L, -100L, 1L)]
		[TestCase(-10000000000000000L, -100L, -1L)]
		[TestCase(-10000000000000000L, -100L, 100L)]
		[TestCase(-10000000000000000L, -100L, -100L)]
		[TestCase(-10000000000000000L, -100L, 10000L)]
		[TestCase(-10000000000000000L, -100L, -10000L)]
		[TestCase(-10000000000000000L, -100L, 100000000L)]
		[TestCase(-10000000000000000L, -100L, -100000000L)]
		[TestCase(-10000000000000000L, -100L, 10000000000000000L)]
		[TestCase(-10000000000000000L, -100L, -10000000000000000L)]
		[TestCase(-10000000000000000L, 10000L, 0L)]
		[TestCase(-10000000000000000L, 10000L, 1L)]
		[TestCase(-10000000000000000L, 10000L, -1L)]
		[TestCase(-10000000000000000L, 10000L, 100L)]
		[TestCase(-10000000000000000L, 10000L, -100L)]
		[TestCase(-10000000000000000L, 10000L, 10000L)]
		[TestCase(-10000000000000000L, 10000L, -10000L)]
		[TestCase(-10000000000000000L, 10000L, 100000000L)]
		[TestCase(-10000000000000000L, 10000L, -100000000L)]
		[TestCase(-10000000000000000L, 10000L, 10000000000000000L)]
		[TestCase(-10000000000000000L, 10000L, -10000000000000000L)]
		[TestCase(-10000000000000000L, -10000L, 0L)]
		[TestCase(-10000000000000000L, -10000L, 1L)]
		[TestCase(-10000000000000000L, -10000L, -1L)]
		[TestCase(-10000000000000000L, -10000L, 100L)]
		[TestCase(-10000000000000000L, -10000L, -100L)]
		[TestCase(-10000000000000000L, -10000L, 10000L)]
		[TestCase(-10000000000000000L, -10000L, -10000L)]
		[TestCase(-10000000000000000L, -10000L, 100000000L)]
		[TestCase(-10000000000000000L, -10000L, -100000000L)]
		[TestCase(-10000000000000000L, -10000L, 10000000000000000L)]
		[TestCase(-10000000000000000L, -10000L, -10000000000000000L)]
		[TestCase(-10000000000000000L, 100000000L, 0L)]
		[TestCase(-10000000000000000L, 100000000L, 1L)]
		[TestCase(-10000000000000000L, 100000000L, -1L)]
		[TestCase(-10000000000000000L, 100000000L, 100L)]
		[TestCase(-10000000000000000L, 100000000L, -100L)]
		[TestCase(-10000000000000000L, 100000000L, 10000L)]
		[TestCase(-10000000000000000L, 100000000L, -10000L)]
		[TestCase(-10000000000000000L, 100000000L, 100000000L)]
		[TestCase(-10000000000000000L, 100000000L, -100000000L)]
		[TestCase(-10000000000000000L, 100000000L, 10000000000000000L)]
		[TestCase(-10000000000000000L, 100000000L, -10000000000000000L)]
		[TestCase(-10000000000000000L, -100000000L, 0L)]
		[TestCase(-10000000000000000L, -100000000L, 1L)]
		[TestCase(-10000000000000000L, -100000000L, -1L)]
		[TestCase(-10000000000000000L, -100000000L, 100L)]
		[TestCase(-10000000000000000L, -100000000L, -100L)]
		[TestCase(-10000000000000000L, -100000000L, 10000L)]
		[TestCase(-10000000000000000L, -100000000L, -10000L)]
		[TestCase(-10000000000000000L, -100000000L, 100000000L)]
		[TestCase(-10000000000000000L, -100000000L, -100000000L)]
		[TestCase(-10000000000000000L, -100000000L, 10000000000000000L)]
		[TestCase(-10000000000000000L, -100000000L, -10000000000000000L)]
		[TestCase(-10000000000000000L, 10000000000000000L, 0L)]
		[TestCase(-10000000000000000L, 10000000000000000L, 1L)]
		[TestCase(-10000000000000000L, 10000000000000000L, -1L)]
		[TestCase(-10000000000000000L, 10000000000000000L, 100L)]
		[TestCase(-10000000000000000L, 10000000000000000L, -100L)]
		[TestCase(-10000000000000000L, 10000000000000000L, 10000L)]
		[TestCase(-10000000000000000L, 10000000000000000L, -10000L)]
		[TestCase(-10000000000000000L, 10000000000000000L, 100000000L)]
		[TestCase(-10000000000000000L, 10000000000000000L, -100000000L)]
		[TestCase(-10000000000000000L, 10000000000000000L, 10000000000000000L)]
		[TestCase(-10000000000000000L, 10000000000000000L, -10000000000000000L)]
		[TestCase(-10000000000000000L, -10000000000000000L, 0L)]
		[TestCase(-10000000000000000L, -10000000000000000L, 1L)]
		[TestCase(-10000000000000000L, -10000000000000000L, -1L)]
		[TestCase(-10000000000000000L, -10000000000000000L, 100L)]
		[TestCase(-10000000000000000L, -10000000000000000L, -100L)]
		[TestCase(-10000000000000000L, -10000000000000000L, 10000L)]
		[TestCase(-10000000000000000L, -10000000000000000L, -10000L)]
		[TestCase(-10000000000000000L, -10000000000000000L, 100000000L)]
		[TestCase(-10000000000000000L, -10000000000000000L, -100000000L)]
		[TestCase(-10000000000000000L, -10000000000000000L, 10000000000000000L)]
		[TestCase(-10000000000000000L, -10000000000000000L, -10000000000000000L)]
		public void TestClampInt64Int64(Int64 value, Int64 minInclusive, Int64 maxInclusive)
        {
            BigInteger expected = 0, actual = 0;
            bool expectedException = false, actualException = false;

            try
            {
                expected = Clamp(value, minInclusive, maxInclusive);
            }
            catch (ArgumentException)
            {
                expectedException = true;
            }

            try
            {
                actual = MathTrifles.Clamp(value, minInclusive, maxInclusive);
            }
            catch (ArgumentException)
            {
                actualException = true;
            }

            Assert.That(actualException, Is.EqualTo(expectedException));

            if (!expectedException)
            {
                Assert.That(actual, Is.EqualTo(expected));
            }
        }


		[TestCase(0UL, ((Byte)(0)), ((Byte)(0)))]
		[TestCase(0UL, ((Byte)(0)), ((Byte)(1)))]
		[TestCase(0UL, ((Byte)(0)), ((Byte)(100)))]
		[TestCase(0UL, ((Byte)(1)), ((Byte)(0)))]
		[TestCase(0UL, ((Byte)(1)), ((Byte)(1)))]
		[TestCase(0UL, ((Byte)(1)), ((Byte)(100)))]
		[TestCase(0UL, ((Byte)(100)), ((Byte)(0)))]
		[TestCase(0UL, ((Byte)(100)), ((Byte)(1)))]
		[TestCase(0UL, ((Byte)(100)), ((Byte)(100)))]
		[TestCase(1UL, ((Byte)(0)), ((Byte)(0)))]
		[TestCase(1UL, ((Byte)(0)), ((Byte)(1)))]
		[TestCase(1UL, ((Byte)(0)), ((Byte)(100)))]
		[TestCase(1UL, ((Byte)(1)), ((Byte)(0)))]
		[TestCase(1UL, ((Byte)(1)), ((Byte)(1)))]
		[TestCase(1UL, ((Byte)(1)), ((Byte)(100)))]
		[TestCase(1UL, ((Byte)(100)), ((Byte)(0)))]
		[TestCase(1UL, ((Byte)(100)), ((Byte)(1)))]
		[TestCase(1UL, ((Byte)(100)), ((Byte)(100)))]
		[TestCase(100UL, ((Byte)(0)), ((Byte)(0)))]
		[TestCase(100UL, ((Byte)(0)), ((Byte)(1)))]
		[TestCase(100UL, ((Byte)(0)), ((Byte)(100)))]
		[TestCase(100UL, ((Byte)(1)), ((Byte)(0)))]
		[TestCase(100UL, ((Byte)(1)), ((Byte)(1)))]
		[TestCase(100UL, ((Byte)(1)), ((Byte)(100)))]
		[TestCase(100UL, ((Byte)(100)), ((Byte)(0)))]
		[TestCase(100UL, ((Byte)(100)), ((Byte)(1)))]
		[TestCase(100UL, ((Byte)(100)), ((Byte)(100)))]
		[TestCase(10000UL, ((Byte)(0)), ((Byte)(0)))]
		[TestCase(10000UL, ((Byte)(0)), ((Byte)(1)))]
		[TestCase(10000UL, ((Byte)(0)), ((Byte)(100)))]
		[TestCase(10000UL, ((Byte)(1)), ((Byte)(0)))]
		[TestCase(10000UL, ((Byte)(1)), ((Byte)(1)))]
		[TestCase(10000UL, ((Byte)(1)), ((Byte)(100)))]
		[TestCase(10000UL, ((Byte)(100)), ((Byte)(0)))]
		[TestCase(10000UL, ((Byte)(100)), ((Byte)(1)))]
		[TestCase(10000UL, ((Byte)(100)), ((Byte)(100)))]
		[TestCase(100000000UL, ((Byte)(0)), ((Byte)(0)))]
		[TestCase(100000000UL, ((Byte)(0)), ((Byte)(1)))]
		[TestCase(100000000UL, ((Byte)(0)), ((Byte)(100)))]
		[TestCase(100000000UL, ((Byte)(1)), ((Byte)(0)))]
		[TestCase(100000000UL, ((Byte)(1)), ((Byte)(1)))]
		[TestCase(100000000UL, ((Byte)(1)), ((Byte)(100)))]
		[TestCase(100000000UL, ((Byte)(100)), ((Byte)(0)))]
		[TestCase(100000000UL, ((Byte)(100)), ((Byte)(1)))]
		[TestCase(100000000UL, ((Byte)(100)), ((Byte)(100)))]
		[TestCase(10000000000000000UL, ((Byte)(0)), ((Byte)(0)))]
		[TestCase(10000000000000000UL, ((Byte)(0)), ((Byte)(1)))]
		[TestCase(10000000000000000UL, ((Byte)(0)), ((Byte)(100)))]
		[TestCase(10000000000000000UL, ((Byte)(1)), ((Byte)(0)))]
		[TestCase(10000000000000000UL, ((Byte)(1)), ((Byte)(1)))]
		[TestCase(10000000000000000UL, ((Byte)(1)), ((Byte)(100)))]
		[TestCase(10000000000000000UL, ((Byte)(100)), ((Byte)(0)))]
		[TestCase(10000000000000000UL, ((Byte)(100)), ((Byte)(1)))]
		[TestCase(10000000000000000UL, ((Byte)(100)), ((Byte)(100)))]
		public void TestClampUInt64Byte(UInt64 value, Byte minInclusive, Byte maxInclusive)
        {
            BigInteger expected = 0, actual = 0;
            bool expectedException = false, actualException = false;

            try
            {
                expected = Clamp(value, minInclusive, maxInclusive);
            }
            catch (ArgumentException)
            {
                expectedException = true;
            }

            try
            {
                actual = MathTrifles.Clamp(value, minInclusive, maxInclusive);
            }
            catch (ArgumentException)
            {
                actualException = true;
            }

            Assert.That(actualException, Is.EqualTo(expectedException));

            if (!expectedException)
            {
                Assert.That(actual, Is.EqualTo(expected));
            }
        }


		[TestCase(0UL, ((UInt16)(0)), ((UInt16)(0)))]
		[TestCase(0UL, ((UInt16)(0)), ((UInt16)(1)))]
		[TestCase(0UL, ((UInt16)(0)), ((UInt16)(100)))]
		[TestCase(0UL, ((UInt16)(0)), ((UInt16)(10000)))]
		[TestCase(0UL, ((UInt16)(1)), ((UInt16)(0)))]
		[TestCase(0UL, ((UInt16)(1)), ((UInt16)(1)))]
		[TestCase(0UL, ((UInt16)(1)), ((UInt16)(100)))]
		[TestCase(0UL, ((UInt16)(1)), ((UInt16)(10000)))]
		[TestCase(0UL, ((UInt16)(100)), ((UInt16)(0)))]
		[TestCase(0UL, ((UInt16)(100)), ((UInt16)(1)))]
		[TestCase(0UL, ((UInt16)(100)), ((UInt16)(100)))]
		[TestCase(0UL, ((UInt16)(100)), ((UInt16)(10000)))]
		[TestCase(0UL, ((UInt16)(10000)), ((UInt16)(0)))]
		[TestCase(0UL, ((UInt16)(10000)), ((UInt16)(1)))]
		[TestCase(0UL, ((UInt16)(10000)), ((UInt16)(100)))]
		[TestCase(0UL, ((UInt16)(10000)), ((UInt16)(10000)))]
		[TestCase(1UL, ((UInt16)(0)), ((UInt16)(0)))]
		[TestCase(1UL, ((UInt16)(0)), ((UInt16)(1)))]
		[TestCase(1UL, ((UInt16)(0)), ((UInt16)(100)))]
		[TestCase(1UL, ((UInt16)(0)), ((UInt16)(10000)))]
		[TestCase(1UL, ((UInt16)(1)), ((UInt16)(0)))]
		[TestCase(1UL, ((UInt16)(1)), ((UInt16)(1)))]
		[TestCase(1UL, ((UInt16)(1)), ((UInt16)(100)))]
		[TestCase(1UL, ((UInt16)(1)), ((UInt16)(10000)))]
		[TestCase(1UL, ((UInt16)(100)), ((UInt16)(0)))]
		[TestCase(1UL, ((UInt16)(100)), ((UInt16)(1)))]
		[TestCase(1UL, ((UInt16)(100)), ((UInt16)(100)))]
		[TestCase(1UL, ((UInt16)(100)), ((UInt16)(10000)))]
		[TestCase(1UL, ((UInt16)(10000)), ((UInt16)(0)))]
		[TestCase(1UL, ((UInt16)(10000)), ((UInt16)(1)))]
		[TestCase(1UL, ((UInt16)(10000)), ((UInt16)(100)))]
		[TestCase(1UL, ((UInt16)(10000)), ((UInt16)(10000)))]
		[TestCase(100UL, ((UInt16)(0)), ((UInt16)(0)))]
		[TestCase(100UL, ((UInt16)(0)), ((UInt16)(1)))]
		[TestCase(100UL, ((UInt16)(0)), ((UInt16)(100)))]
		[TestCase(100UL, ((UInt16)(0)), ((UInt16)(10000)))]
		[TestCase(100UL, ((UInt16)(1)), ((UInt16)(0)))]
		[TestCase(100UL, ((UInt16)(1)), ((UInt16)(1)))]
		[TestCase(100UL, ((UInt16)(1)), ((UInt16)(100)))]
		[TestCase(100UL, ((UInt16)(1)), ((UInt16)(10000)))]
		[TestCase(100UL, ((UInt16)(100)), ((UInt16)(0)))]
		[TestCase(100UL, ((UInt16)(100)), ((UInt16)(1)))]
		[TestCase(100UL, ((UInt16)(100)), ((UInt16)(100)))]
		[TestCase(100UL, ((UInt16)(100)), ((UInt16)(10000)))]
		[TestCase(100UL, ((UInt16)(10000)), ((UInt16)(0)))]
		[TestCase(100UL, ((UInt16)(10000)), ((UInt16)(1)))]
		[TestCase(100UL, ((UInt16)(10000)), ((UInt16)(100)))]
		[TestCase(100UL, ((UInt16)(10000)), ((UInt16)(10000)))]
		[TestCase(10000UL, ((UInt16)(0)), ((UInt16)(0)))]
		[TestCase(10000UL, ((UInt16)(0)), ((UInt16)(1)))]
		[TestCase(10000UL, ((UInt16)(0)), ((UInt16)(100)))]
		[TestCase(10000UL, ((UInt16)(0)), ((UInt16)(10000)))]
		[TestCase(10000UL, ((UInt16)(1)), ((UInt16)(0)))]
		[TestCase(10000UL, ((UInt16)(1)), ((UInt16)(1)))]
		[TestCase(10000UL, ((UInt16)(1)), ((UInt16)(100)))]
		[TestCase(10000UL, ((UInt16)(1)), ((UInt16)(10000)))]
		[TestCase(10000UL, ((UInt16)(100)), ((UInt16)(0)))]
		[TestCase(10000UL, ((UInt16)(100)), ((UInt16)(1)))]
		[TestCase(10000UL, ((UInt16)(100)), ((UInt16)(100)))]
		[TestCase(10000UL, ((UInt16)(100)), ((UInt16)(10000)))]
		[TestCase(10000UL, ((UInt16)(10000)), ((UInt16)(0)))]
		[TestCase(10000UL, ((UInt16)(10000)), ((UInt16)(1)))]
		[TestCase(10000UL, ((UInt16)(10000)), ((UInt16)(100)))]
		[TestCase(10000UL, ((UInt16)(10000)), ((UInt16)(10000)))]
		[TestCase(100000000UL, ((UInt16)(0)), ((UInt16)(0)))]
		[TestCase(100000000UL, ((UInt16)(0)), ((UInt16)(1)))]
		[TestCase(100000000UL, ((UInt16)(0)), ((UInt16)(100)))]
		[TestCase(100000000UL, ((UInt16)(0)), ((UInt16)(10000)))]
		[TestCase(100000000UL, ((UInt16)(1)), ((UInt16)(0)))]
		[TestCase(100000000UL, ((UInt16)(1)), ((UInt16)(1)))]
		[TestCase(100000000UL, ((UInt16)(1)), ((UInt16)(100)))]
		[TestCase(100000000UL, ((UInt16)(1)), ((UInt16)(10000)))]
		[TestCase(100000000UL, ((UInt16)(100)), ((UInt16)(0)))]
		[TestCase(100000000UL, ((UInt16)(100)), ((UInt16)(1)))]
		[TestCase(100000000UL, ((UInt16)(100)), ((UInt16)(100)))]
		[TestCase(100000000UL, ((UInt16)(100)), ((UInt16)(10000)))]
		[TestCase(100000000UL, ((UInt16)(10000)), ((UInt16)(0)))]
		[TestCase(100000000UL, ((UInt16)(10000)), ((UInt16)(1)))]
		[TestCase(100000000UL, ((UInt16)(10000)), ((UInt16)(100)))]
		[TestCase(100000000UL, ((UInt16)(10000)), ((UInt16)(10000)))]
		[TestCase(10000000000000000UL, ((UInt16)(0)), ((UInt16)(0)))]
		[TestCase(10000000000000000UL, ((UInt16)(0)), ((UInt16)(1)))]
		[TestCase(10000000000000000UL, ((UInt16)(0)), ((UInt16)(100)))]
		[TestCase(10000000000000000UL, ((UInt16)(0)), ((UInt16)(10000)))]
		[TestCase(10000000000000000UL, ((UInt16)(1)), ((UInt16)(0)))]
		[TestCase(10000000000000000UL, ((UInt16)(1)), ((UInt16)(1)))]
		[TestCase(10000000000000000UL, ((UInt16)(1)), ((UInt16)(100)))]
		[TestCase(10000000000000000UL, ((UInt16)(1)), ((UInt16)(10000)))]
		[TestCase(10000000000000000UL, ((UInt16)(100)), ((UInt16)(0)))]
		[TestCase(10000000000000000UL, ((UInt16)(100)), ((UInt16)(1)))]
		[TestCase(10000000000000000UL, ((UInt16)(100)), ((UInt16)(100)))]
		[TestCase(10000000000000000UL, ((UInt16)(100)), ((UInt16)(10000)))]
		[TestCase(10000000000000000UL, ((UInt16)(10000)), ((UInt16)(0)))]
		[TestCase(10000000000000000UL, ((UInt16)(10000)), ((UInt16)(1)))]
		[TestCase(10000000000000000UL, ((UInt16)(10000)), ((UInt16)(100)))]
		[TestCase(10000000000000000UL, ((UInt16)(10000)), ((UInt16)(10000)))]
		public void TestClampUInt64UInt16(UInt64 value, UInt16 minInclusive, UInt16 maxInclusive)
        {
            BigInteger expected = 0, actual = 0;
            bool expectedException = false, actualException = false;

            try
            {
                expected = Clamp(value, minInclusive, maxInclusive);
            }
            catch (ArgumentException)
            {
                expectedException = true;
            }

            try
            {
                actual = MathTrifles.Clamp(value, minInclusive, maxInclusive);
            }
            catch (ArgumentException)
            {
                actualException = true;
            }

            Assert.That(actualException, Is.EqualTo(expectedException));

            if (!expectedException)
            {
                Assert.That(actual, Is.EqualTo(expected));
            }
        }


		[TestCase(0UL, 0U, 0U)]
		[TestCase(0UL, 0U, 1U)]
		[TestCase(0UL, 0U, 100U)]
		[TestCase(0UL, 0U, 10000U)]
		[TestCase(0UL, 0U, 100000000U)]
		[TestCase(0UL, 1U, 0U)]
		[TestCase(0UL, 1U, 1U)]
		[TestCase(0UL, 1U, 100U)]
		[TestCase(0UL, 1U, 10000U)]
		[TestCase(0UL, 1U, 100000000U)]
		[TestCase(0UL, 100U, 0U)]
		[TestCase(0UL, 100U, 1U)]
		[TestCase(0UL, 100U, 100U)]
		[TestCase(0UL, 100U, 10000U)]
		[TestCase(0UL, 100U, 100000000U)]
		[TestCase(0UL, 10000U, 0U)]
		[TestCase(0UL, 10000U, 1U)]
		[TestCase(0UL, 10000U, 100U)]
		[TestCase(0UL, 10000U, 10000U)]
		[TestCase(0UL, 10000U, 100000000U)]
		[TestCase(0UL, 100000000U, 0U)]
		[TestCase(0UL, 100000000U, 1U)]
		[TestCase(0UL, 100000000U, 100U)]
		[TestCase(0UL, 100000000U, 10000U)]
		[TestCase(0UL, 100000000U, 100000000U)]
		[TestCase(1UL, 0U, 0U)]
		[TestCase(1UL, 0U, 1U)]
		[TestCase(1UL, 0U, 100U)]
		[TestCase(1UL, 0U, 10000U)]
		[TestCase(1UL, 0U, 100000000U)]
		[TestCase(1UL, 1U, 0U)]
		[TestCase(1UL, 1U, 1U)]
		[TestCase(1UL, 1U, 100U)]
		[TestCase(1UL, 1U, 10000U)]
		[TestCase(1UL, 1U, 100000000U)]
		[TestCase(1UL, 100U, 0U)]
		[TestCase(1UL, 100U, 1U)]
		[TestCase(1UL, 100U, 100U)]
		[TestCase(1UL, 100U, 10000U)]
		[TestCase(1UL, 100U, 100000000U)]
		[TestCase(1UL, 10000U, 0U)]
		[TestCase(1UL, 10000U, 1U)]
		[TestCase(1UL, 10000U, 100U)]
		[TestCase(1UL, 10000U, 10000U)]
		[TestCase(1UL, 10000U, 100000000U)]
		[TestCase(1UL, 100000000U, 0U)]
		[TestCase(1UL, 100000000U, 1U)]
		[TestCase(1UL, 100000000U, 100U)]
		[TestCase(1UL, 100000000U, 10000U)]
		[TestCase(1UL, 100000000U, 100000000U)]
		[TestCase(100UL, 0U, 0U)]
		[TestCase(100UL, 0U, 1U)]
		[TestCase(100UL, 0U, 100U)]
		[TestCase(100UL, 0U, 10000U)]
		[TestCase(100UL, 0U, 100000000U)]
		[TestCase(100UL, 1U, 0U)]
		[TestCase(100UL, 1U, 1U)]
		[TestCase(100UL, 1U, 100U)]
		[TestCase(100UL, 1U, 10000U)]
		[TestCase(100UL, 1U, 100000000U)]
		[TestCase(100UL, 100U, 0U)]
		[TestCase(100UL, 100U, 1U)]
		[TestCase(100UL, 100U, 100U)]
		[TestCase(100UL, 100U, 10000U)]
		[TestCase(100UL, 100U, 100000000U)]
		[TestCase(100UL, 10000U, 0U)]
		[TestCase(100UL, 10000U, 1U)]
		[TestCase(100UL, 10000U, 100U)]
		[TestCase(100UL, 10000U, 10000U)]
		[TestCase(100UL, 10000U, 100000000U)]
		[TestCase(100UL, 100000000U, 0U)]
		[TestCase(100UL, 100000000U, 1U)]
		[TestCase(100UL, 100000000U, 100U)]
		[TestCase(100UL, 100000000U, 10000U)]
		[TestCase(100UL, 100000000U, 100000000U)]
		[TestCase(10000UL, 0U, 0U)]
		[TestCase(10000UL, 0U, 1U)]
		[TestCase(10000UL, 0U, 100U)]
		[TestCase(10000UL, 0U, 10000U)]
		[TestCase(10000UL, 0U, 100000000U)]
		[TestCase(10000UL, 1U, 0U)]
		[TestCase(10000UL, 1U, 1U)]
		[TestCase(10000UL, 1U, 100U)]
		[TestCase(10000UL, 1U, 10000U)]
		[TestCase(10000UL, 1U, 100000000U)]
		[TestCase(10000UL, 100U, 0U)]
		[TestCase(10000UL, 100U, 1U)]
		[TestCase(10000UL, 100U, 100U)]
		[TestCase(10000UL, 100U, 10000U)]
		[TestCase(10000UL, 100U, 100000000U)]
		[TestCase(10000UL, 10000U, 0U)]
		[TestCase(10000UL, 10000U, 1U)]
		[TestCase(10000UL, 10000U, 100U)]
		[TestCase(10000UL, 10000U, 10000U)]
		[TestCase(10000UL, 10000U, 100000000U)]
		[TestCase(10000UL, 100000000U, 0U)]
		[TestCase(10000UL, 100000000U, 1U)]
		[TestCase(10000UL, 100000000U, 100U)]
		[TestCase(10000UL, 100000000U, 10000U)]
		[TestCase(10000UL, 100000000U, 100000000U)]
		[TestCase(100000000UL, 0U, 0U)]
		[TestCase(100000000UL, 0U, 1U)]
		[TestCase(100000000UL, 0U, 100U)]
		[TestCase(100000000UL, 0U, 10000U)]
		[TestCase(100000000UL, 0U, 100000000U)]
		[TestCase(100000000UL, 1U, 0U)]
		[TestCase(100000000UL, 1U, 1U)]
		[TestCase(100000000UL, 1U, 100U)]
		[TestCase(100000000UL, 1U, 10000U)]
		[TestCase(100000000UL, 1U, 100000000U)]
		[TestCase(100000000UL, 100U, 0U)]
		[TestCase(100000000UL, 100U, 1U)]
		[TestCase(100000000UL, 100U, 100U)]
		[TestCase(100000000UL, 100U, 10000U)]
		[TestCase(100000000UL, 100U, 100000000U)]
		[TestCase(100000000UL, 10000U, 0U)]
		[TestCase(100000000UL, 10000U, 1U)]
		[TestCase(100000000UL, 10000U, 100U)]
		[TestCase(100000000UL, 10000U, 10000U)]
		[TestCase(100000000UL, 10000U, 100000000U)]
		[TestCase(100000000UL, 100000000U, 0U)]
		[TestCase(100000000UL, 100000000U, 1U)]
		[TestCase(100000000UL, 100000000U, 100U)]
		[TestCase(100000000UL, 100000000U, 10000U)]
		[TestCase(100000000UL, 100000000U, 100000000U)]
		[TestCase(10000000000000000UL, 0U, 0U)]
		[TestCase(10000000000000000UL, 0U, 1U)]
		[TestCase(10000000000000000UL, 0U, 100U)]
		[TestCase(10000000000000000UL, 0U, 10000U)]
		[TestCase(10000000000000000UL, 0U, 100000000U)]
		[TestCase(10000000000000000UL, 1U, 0U)]
		[TestCase(10000000000000000UL, 1U, 1U)]
		[TestCase(10000000000000000UL, 1U, 100U)]
		[TestCase(10000000000000000UL, 1U, 10000U)]
		[TestCase(10000000000000000UL, 1U, 100000000U)]
		[TestCase(10000000000000000UL, 100U, 0U)]
		[TestCase(10000000000000000UL, 100U, 1U)]
		[TestCase(10000000000000000UL, 100U, 100U)]
		[TestCase(10000000000000000UL, 100U, 10000U)]
		[TestCase(10000000000000000UL, 100U, 100000000U)]
		[TestCase(10000000000000000UL, 10000U, 0U)]
		[TestCase(10000000000000000UL, 10000U, 1U)]
		[TestCase(10000000000000000UL, 10000U, 100U)]
		[TestCase(10000000000000000UL, 10000U, 10000U)]
		[TestCase(10000000000000000UL, 10000U, 100000000U)]
		[TestCase(10000000000000000UL, 100000000U, 0U)]
		[TestCase(10000000000000000UL, 100000000U, 1U)]
		[TestCase(10000000000000000UL, 100000000U, 100U)]
		[TestCase(10000000000000000UL, 100000000U, 10000U)]
		[TestCase(10000000000000000UL, 100000000U, 100000000U)]
		public void TestClampUInt64UInt32(UInt64 value, UInt32 minInclusive, UInt32 maxInclusive)
        {
            BigInteger expected = 0, actual = 0;
            bool expectedException = false, actualException = false;

            try
            {
                expected = Clamp(value, minInclusive, maxInclusive);
            }
            catch (ArgumentException)
            {
                expectedException = true;
            }

            try
            {
                actual = MathTrifles.Clamp(value, minInclusive, maxInclusive);
            }
            catch (ArgumentException)
            {
                actualException = true;
            }

            Assert.That(actualException, Is.EqualTo(expectedException));

            if (!expectedException)
            {
                Assert.That(actual, Is.EqualTo(expected));
            }
        }


		[TestCase(0UL, 0UL, 0UL)]
		[TestCase(0UL, 0UL, 1UL)]
		[TestCase(0UL, 0UL, 100UL)]
		[TestCase(0UL, 0UL, 10000UL)]
		[TestCase(0UL, 0UL, 100000000UL)]
		[TestCase(0UL, 0UL, 10000000000000000UL)]
		[TestCase(0UL, 1UL, 0UL)]
		[TestCase(0UL, 1UL, 1UL)]
		[TestCase(0UL, 1UL, 100UL)]
		[TestCase(0UL, 1UL, 10000UL)]
		[TestCase(0UL, 1UL, 100000000UL)]
		[TestCase(0UL, 1UL, 10000000000000000UL)]
		[TestCase(0UL, 100UL, 0UL)]
		[TestCase(0UL, 100UL, 1UL)]
		[TestCase(0UL, 100UL, 100UL)]
		[TestCase(0UL, 100UL, 10000UL)]
		[TestCase(0UL, 100UL, 100000000UL)]
		[TestCase(0UL, 100UL, 10000000000000000UL)]
		[TestCase(0UL, 10000UL, 0UL)]
		[TestCase(0UL, 10000UL, 1UL)]
		[TestCase(0UL, 10000UL, 100UL)]
		[TestCase(0UL, 10000UL, 10000UL)]
		[TestCase(0UL, 10000UL, 100000000UL)]
		[TestCase(0UL, 10000UL, 10000000000000000UL)]
		[TestCase(0UL, 100000000UL, 0UL)]
		[TestCase(0UL, 100000000UL, 1UL)]
		[TestCase(0UL, 100000000UL, 100UL)]
		[TestCase(0UL, 100000000UL, 10000UL)]
		[TestCase(0UL, 100000000UL, 100000000UL)]
		[TestCase(0UL, 100000000UL, 10000000000000000UL)]
		[TestCase(0UL, 10000000000000000UL, 0UL)]
		[TestCase(0UL, 10000000000000000UL, 1UL)]
		[TestCase(0UL, 10000000000000000UL, 100UL)]
		[TestCase(0UL, 10000000000000000UL, 10000UL)]
		[TestCase(0UL, 10000000000000000UL, 100000000UL)]
		[TestCase(0UL, 10000000000000000UL, 10000000000000000UL)]
		[TestCase(1UL, 0UL, 0UL)]
		[TestCase(1UL, 0UL, 1UL)]
		[TestCase(1UL, 0UL, 100UL)]
		[TestCase(1UL, 0UL, 10000UL)]
		[TestCase(1UL, 0UL, 100000000UL)]
		[TestCase(1UL, 0UL, 10000000000000000UL)]
		[TestCase(1UL, 1UL, 0UL)]
		[TestCase(1UL, 1UL, 1UL)]
		[TestCase(1UL, 1UL, 100UL)]
		[TestCase(1UL, 1UL, 10000UL)]
		[TestCase(1UL, 1UL, 100000000UL)]
		[TestCase(1UL, 1UL, 10000000000000000UL)]
		[TestCase(1UL, 100UL, 0UL)]
		[TestCase(1UL, 100UL, 1UL)]
		[TestCase(1UL, 100UL, 100UL)]
		[TestCase(1UL, 100UL, 10000UL)]
		[TestCase(1UL, 100UL, 100000000UL)]
		[TestCase(1UL, 100UL, 10000000000000000UL)]
		[TestCase(1UL, 10000UL, 0UL)]
		[TestCase(1UL, 10000UL, 1UL)]
		[TestCase(1UL, 10000UL, 100UL)]
		[TestCase(1UL, 10000UL, 10000UL)]
		[TestCase(1UL, 10000UL, 100000000UL)]
		[TestCase(1UL, 10000UL, 10000000000000000UL)]
		[TestCase(1UL, 100000000UL, 0UL)]
		[TestCase(1UL, 100000000UL, 1UL)]
		[TestCase(1UL, 100000000UL, 100UL)]
		[TestCase(1UL, 100000000UL, 10000UL)]
		[TestCase(1UL, 100000000UL, 100000000UL)]
		[TestCase(1UL, 100000000UL, 10000000000000000UL)]
		[TestCase(1UL, 10000000000000000UL, 0UL)]
		[TestCase(1UL, 10000000000000000UL, 1UL)]
		[TestCase(1UL, 10000000000000000UL, 100UL)]
		[TestCase(1UL, 10000000000000000UL, 10000UL)]
		[TestCase(1UL, 10000000000000000UL, 100000000UL)]
		[TestCase(1UL, 10000000000000000UL, 10000000000000000UL)]
		[TestCase(100UL, 0UL, 0UL)]
		[TestCase(100UL, 0UL, 1UL)]
		[TestCase(100UL, 0UL, 100UL)]
		[TestCase(100UL, 0UL, 10000UL)]
		[TestCase(100UL, 0UL, 100000000UL)]
		[TestCase(100UL, 0UL, 10000000000000000UL)]
		[TestCase(100UL, 1UL, 0UL)]
		[TestCase(100UL, 1UL, 1UL)]
		[TestCase(100UL, 1UL, 100UL)]
		[TestCase(100UL, 1UL, 10000UL)]
		[TestCase(100UL, 1UL, 100000000UL)]
		[TestCase(100UL, 1UL, 10000000000000000UL)]
		[TestCase(100UL, 100UL, 0UL)]
		[TestCase(100UL, 100UL, 1UL)]
		[TestCase(100UL, 100UL, 100UL)]
		[TestCase(100UL, 100UL, 10000UL)]
		[TestCase(100UL, 100UL, 100000000UL)]
		[TestCase(100UL, 100UL, 10000000000000000UL)]
		[TestCase(100UL, 10000UL, 0UL)]
		[TestCase(100UL, 10000UL, 1UL)]
		[TestCase(100UL, 10000UL, 100UL)]
		[TestCase(100UL, 10000UL, 10000UL)]
		[TestCase(100UL, 10000UL, 100000000UL)]
		[TestCase(100UL, 10000UL, 10000000000000000UL)]
		[TestCase(100UL, 100000000UL, 0UL)]
		[TestCase(100UL, 100000000UL, 1UL)]
		[TestCase(100UL, 100000000UL, 100UL)]
		[TestCase(100UL, 100000000UL, 10000UL)]
		[TestCase(100UL, 100000000UL, 100000000UL)]
		[TestCase(100UL, 100000000UL, 10000000000000000UL)]
		[TestCase(100UL, 10000000000000000UL, 0UL)]
		[TestCase(100UL, 10000000000000000UL, 1UL)]
		[TestCase(100UL, 10000000000000000UL, 100UL)]
		[TestCase(100UL, 10000000000000000UL, 10000UL)]
		[TestCase(100UL, 10000000000000000UL, 100000000UL)]
		[TestCase(100UL, 10000000000000000UL, 10000000000000000UL)]
		[TestCase(10000UL, 0UL, 0UL)]
		[TestCase(10000UL, 0UL, 1UL)]
		[TestCase(10000UL, 0UL, 100UL)]
		[TestCase(10000UL, 0UL, 10000UL)]
		[TestCase(10000UL, 0UL, 100000000UL)]
		[TestCase(10000UL, 0UL, 10000000000000000UL)]
		[TestCase(10000UL, 1UL, 0UL)]
		[TestCase(10000UL, 1UL, 1UL)]
		[TestCase(10000UL, 1UL, 100UL)]
		[TestCase(10000UL, 1UL, 10000UL)]
		[TestCase(10000UL, 1UL, 100000000UL)]
		[TestCase(10000UL, 1UL, 10000000000000000UL)]
		[TestCase(10000UL, 100UL, 0UL)]
		[TestCase(10000UL, 100UL, 1UL)]
		[TestCase(10000UL, 100UL, 100UL)]
		[TestCase(10000UL, 100UL, 10000UL)]
		[TestCase(10000UL, 100UL, 100000000UL)]
		[TestCase(10000UL, 100UL, 10000000000000000UL)]
		[TestCase(10000UL, 10000UL, 0UL)]
		[TestCase(10000UL, 10000UL, 1UL)]
		[TestCase(10000UL, 10000UL, 100UL)]
		[TestCase(10000UL, 10000UL, 10000UL)]
		[TestCase(10000UL, 10000UL, 100000000UL)]
		[TestCase(10000UL, 10000UL, 10000000000000000UL)]
		[TestCase(10000UL, 100000000UL, 0UL)]
		[TestCase(10000UL, 100000000UL, 1UL)]
		[TestCase(10000UL, 100000000UL, 100UL)]
		[TestCase(10000UL, 100000000UL, 10000UL)]
		[TestCase(10000UL, 100000000UL, 100000000UL)]
		[TestCase(10000UL, 100000000UL, 10000000000000000UL)]
		[TestCase(10000UL, 10000000000000000UL, 0UL)]
		[TestCase(10000UL, 10000000000000000UL, 1UL)]
		[TestCase(10000UL, 10000000000000000UL, 100UL)]
		[TestCase(10000UL, 10000000000000000UL, 10000UL)]
		[TestCase(10000UL, 10000000000000000UL, 100000000UL)]
		[TestCase(10000UL, 10000000000000000UL, 10000000000000000UL)]
		[TestCase(100000000UL, 0UL, 0UL)]
		[TestCase(100000000UL, 0UL, 1UL)]
		[TestCase(100000000UL, 0UL, 100UL)]
		[TestCase(100000000UL, 0UL, 10000UL)]
		[TestCase(100000000UL, 0UL, 100000000UL)]
		[TestCase(100000000UL, 0UL, 10000000000000000UL)]
		[TestCase(100000000UL, 1UL, 0UL)]
		[TestCase(100000000UL, 1UL, 1UL)]
		[TestCase(100000000UL, 1UL, 100UL)]
		[TestCase(100000000UL, 1UL, 10000UL)]
		[TestCase(100000000UL, 1UL, 100000000UL)]
		[TestCase(100000000UL, 1UL, 10000000000000000UL)]
		[TestCase(100000000UL, 100UL, 0UL)]
		[TestCase(100000000UL, 100UL, 1UL)]
		[TestCase(100000000UL, 100UL, 100UL)]
		[TestCase(100000000UL, 100UL, 10000UL)]
		[TestCase(100000000UL, 100UL, 100000000UL)]
		[TestCase(100000000UL, 100UL, 10000000000000000UL)]
		[TestCase(100000000UL, 10000UL, 0UL)]
		[TestCase(100000000UL, 10000UL, 1UL)]
		[TestCase(100000000UL, 10000UL, 100UL)]
		[TestCase(100000000UL, 10000UL, 10000UL)]
		[TestCase(100000000UL, 10000UL, 100000000UL)]
		[TestCase(100000000UL, 10000UL, 10000000000000000UL)]
		[TestCase(100000000UL, 100000000UL, 0UL)]
		[TestCase(100000000UL, 100000000UL, 1UL)]
		[TestCase(100000000UL, 100000000UL, 100UL)]
		[TestCase(100000000UL, 100000000UL, 10000UL)]
		[TestCase(100000000UL, 100000000UL, 100000000UL)]
		[TestCase(100000000UL, 100000000UL, 10000000000000000UL)]
		[TestCase(100000000UL, 10000000000000000UL, 0UL)]
		[TestCase(100000000UL, 10000000000000000UL, 1UL)]
		[TestCase(100000000UL, 10000000000000000UL, 100UL)]
		[TestCase(100000000UL, 10000000000000000UL, 10000UL)]
		[TestCase(100000000UL, 10000000000000000UL, 100000000UL)]
		[TestCase(100000000UL, 10000000000000000UL, 10000000000000000UL)]
		[TestCase(10000000000000000UL, 0UL, 0UL)]
		[TestCase(10000000000000000UL, 0UL, 1UL)]
		[TestCase(10000000000000000UL, 0UL, 100UL)]
		[TestCase(10000000000000000UL, 0UL, 10000UL)]
		[TestCase(10000000000000000UL, 0UL, 100000000UL)]
		[TestCase(10000000000000000UL, 0UL, 10000000000000000UL)]
		[TestCase(10000000000000000UL, 1UL, 0UL)]
		[TestCase(10000000000000000UL, 1UL, 1UL)]
		[TestCase(10000000000000000UL, 1UL, 100UL)]
		[TestCase(10000000000000000UL, 1UL, 10000UL)]
		[TestCase(10000000000000000UL, 1UL, 100000000UL)]
		[TestCase(10000000000000000UL, 1UL, 10000000000000000UL)]
		[TestCase(10000000000000000UL, 100UL, 0UL)]
		[TestCase(10000000000000000UL, 100UL, 1UL)]
		[TestCase(10000000000000000UL, 100UL, 100UL)]
		[TestCase(10000000000000000UL, 100UL, 10000UL)]
		[TestCase(10000000000000000UL, 100UL, 100000000UL)]
		[TestCase(10000000000000000UL, 100UL, 10000000000000000UL)]
		[TestCase(10000000000000000UL, 10000UL, 0UL)]
		[TestCase(10000000000000000UL, 10000UL, 1UL)]
		[TestCase(10000000000000000UL, 10000UL, 100UL)]
		[TestCase(10000000000000000UL, 10000UL, 10000UL)]
		[TestCase(10000000000000000UL, 10000UL, 100000000UL)]
		[TestCase(10000000000000000UL, 10000UL, 10000000000000000UL)]
		[TestCase(10000000000000000UL, 100000000UL, 0UL)]
		[TestCase(10000000000000000UL, 100000000UL, 1UL)]
		[TestCase(10000000000000000UL, 100000000UL, 100UL)]
		[TestCase(10000000000000000UL, 100000000UL, 10000UL)]
		[TestCase(10000000000000000UL, 100000000UL, 100000000UL)]
		[TestCase(10000000000000000UL, 100000000UL, 10000000000000000UL)]
		[TestCase(10000000000000000UL, 10000000000000000UL, 0UL)]
		[TestCase(10000000000000000UL, 10000000000000000UL, 1UL)]
		[TestCase(10000000000000000UL, 10000000000000000UL, 100UL)]
		[TestCase(10000000000000000UL, 10000000000000000UL, 10000UL)]
		[TestCase(10000000000000000UL, 10000000000000000UL, 100000000UL)]
		[TestCase(10000000000000000UL, 10000000000000000UL, 10000000000000000UL)]
		public void TestClampUInt64UInt64(UInt64 value, UInt64 minInclusive, UInt64 maxInclusive)
        {
            BigInteger expected = 0, actual = 0;
            bool expectedException = false, actualException = false;

            try
            {
                expected = Clamp(value, minInclusive, maxInclusive);
            }
            catch (ArgumentException)
            {
                expectedException = true;
            }

            try
            {
                actual = MathTrifles.Clamp(value, minInclusive, maxInclusive);
            }
            catch (ArgumentException)
            {
                actualException = true;
            }

            Assert.That(actualException, Is.EqualTo(expectedException));

            if (!expectedException)
            {
                Assert.That(actual, Is.EqualTo(expected));
            }
        }



		#endregion

        #region Test Compare(), <, <=, ==, >=, >

        // Using BigInteger, which can safely receive a value from any of the native integer types
        // (at the cost of size and speed, which doesn't matter in testing), determine that the
        // result of a given inter-type compare is correct.

			
				[TestCase(-1, 0UL)]
				[TestCase(-1, 1UL)]
				[TestCase(0, 0UL)]
				[TestCase(0, 1UL)]
				[TestCase(1, 0UL)]
				[TestCase(1, 1UL)]
				[TestCase(Int32.MaxValue - 1, ((UInt64)(Int32.MaxValue)) - 1)]
				[TestCase(Int32.MaxValue - 1, ((UInt64)(Int32.MaxValue)))]
				[TestCase(Int32.MaxValue - 1, ((UInt64)(Int32.MaxValue)) + 1)]
				[TestCase(Int32.MaxValue, ((UInt64)(Int32.MaxValue)) - 1)]
				[TestCase(Int32.MaxValue, ((UInt64)(Int32.MaxValue)))]
				[TestCase(Int32.MaxValue, ((UInt64)(Int32.MaxValue)) + 1)]
				public void TestComparisonsInt32UInt64(Int32 a, UInt64 b)
				{
					BigInteger ba = a, bb = b;
					Assert.That(Sgn(ba.CompareTo(bb)), Is.EqualTo(Sgn(MathTrifles.Compare(a, b))));
					Assert.That(ba < bb, Is.EqualTo(MathTrifles.LessThan(a, b)));
					Assert.That(ba <= bb, Is.EqualTo(MathTrifles.LessThanOrEqual(a, b)));
					Assert.That(ba == bb, Is.EqualTo(MathTrifles.Equality(a, b)));
					Assert.That(ba >= bb, Is.EqualTo(MathTrifles.GreaterThanOrEqual(a, b)));
					Assert.That(ba > bb, Is.EqualTo(MathTrifles.GreaterThan(a, b)));
				}
				
				[TestCase(0UL, -1)]
				[TestCase(1UL, -1)]
				[TestCase(0UL, 0)]
				[TestCase(1UL, 0)]
				[TestCase(0UL, 1)]
				[TestCase(1UL, 1)]
				[TestCase(((UInt64)(Int32.MaxValue)) - 1, Int32.MaxValue - 1)]
				[TestCase(((UInt64)(Int32.MaxValue)), Int32.MaxValue - 1)]
				[TestCase(((UInt64)(Int32.MaxValue)) + 1, Int32.MaxValue - 1)]
				[TestCase(((UInt64)(Int32.MaxValue)) - 1, Int32.MaxValue)]
				[TestCase(((UInt64)(Int32.MaxValue)), Int32.MaxValue)]
				[TestCase(((UInt64)(Int32.MaxValue)) + 1, Int32.MaxValue)]
				public void TestComparisonsUInt64Int32(UInt64 a, Int32 b)
				{
					BigInteger ba = a, bb = b;
					Assert.That(Sgn(ba.CompareTo(bb)), Is.EqualTo(Sgn(MathTrifles.Compare(a, b))));
					Assert.That(ba < bb, Is.EqualTo(MathTrifles.LessThan(a, b)));
					Assert.That(ba <= bb, Is.EqualTo(MathTrifles.LessThanOrEqual(a, b)));
					Assert.That(ba == bb, Is.EqualTo(MathTrifles.Equality(a, b)));
					Assert.That(ba >= bb, Is.EqualTo(MathTrifles.GreaterThanOrEqual(a, b)));
					Assert.That(ba > bb, Is.EqualTo(MathTrifles.GreaterThan(a, b)));
				}
				
				[TestCase(-1L, 0UL)]
				[TestCase(-1L, 1UL)]
				[TestCase(0L, 0UL)]
				[TestCase(0L, 1UL)]
				[TestCase(1L, 0UL)]
				[TestCase(1L, 1UL)]
				[TestCase(Int64.MaxValue - 1, ((UInt64)(Int64.MaxValue)) - 1)]
				[TestCase(Int64.MaxValue - 1, ((UInt64)(Int64.MaxValue)))]
				[TestCase(Int64.MaxValue - 1, ((UInt64)(Int64.MaxValue)) + 1)]
				[TestCase(Int64.MaxValue, ((UInt64)(Int64.MaxValue)) - 1)]
				[TestCase(Int64.MaxValue, ((UInt64)(Int64.MaxValue)))]
				[TestCase(Int64.MaxValue, ((UInt64)(Int64.MaxValue)) + 1)]
				public void TestComparisonsInt64UInt64(Int64 a, UInt64 b)
				{
					BigInteger ba = a, bb = b;
					Assert.That(Sgn(ba.CompareTo(bb)), Is.EqualTo(Sgn(MathTrifles.Compare(a, b))));
					Assert.That(ba < bb, Is.EqualTo(MathTrifles.LessThan(a, b)));
					Assert.That(ba <= bb, Is.EqualTo(MathTrifles.LessThanOrEqual(a, b)));
					Assert.That(ba == bb, Is.EqualTo(MathTrifles.Equality(a, b)));
					Assert.That(ba >= bb, Is.EqualTo(MathTrifles.GreaterThanOrEqual(a, b)));
					Assert.That(ba > bb, Is.EqualTo(MathTrifles.GreaterThan(a, b)));
				}
				
				[TestCase(0UL, -1L)]
				[TestCase(1UL, -1L)]
				[TestCase(0UL, 0L)]
				[TestCase(1UL, 0L)]
				[TestCase(0UL, 1L)]
				[TestCase(1UL, 1L)]
				[TestCase(((UInt64)(Int64.MaxValue)) - 1, Int64.MaxValue - 1)]
				[TestCase(((UInt64)(Int64.MaxValue)), Int64.MaxValue - 1)]
				[TestCase(((UInt64)(Int64.MaxValue)) + 1, Int64.MaxValue - 1)]
				[TestCase(((UInt64)(Int64.MaxValue)) - 1, Int64.MaxValue)]
				[TestCase(((UInt64)(Int64.MaxValue)), Int64.MaxValue)]
				[TestCase(((UInt64)(Int64.MaxValue)) + 1, Int64.MaxValue)]
				public void TestComparisonsUInt64Int64(UInt64 a, Int64 b)
				{
					BigInteger ba = a, bb = b;
					Assert.That(Sgn(ba.CompareTo(bb)), Is.EqualTo(Sgn(MathTrifles.Compare(a, b))));
					Assert.That(ba < bb, Is.EqualTo(MathTrifles.LessThan(a, b)));
					Assert.That(ba <= bb, Is.EqualTo(MathTrifles.LessThanOrEqual(a, b)));
					Assert.That(ba == bb, Is.EqualTo(MathTrifles.Equality(a, b)));
					Assert.That(ba >= bb, Is.EqualTo(MathTrifles.GreaterThanOrEqual(a, b)));
					Assert.That(ba > bb, Is.EqualTo(MathTrifles.GreaterThan(a, b)));
				}
					
	

        #endregion


    }
}

